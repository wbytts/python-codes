
'''
动态类型是python灵活性的根源（动态一时爽，重构火葬场）
在python中，类型是在运行时自动决定的，而不是通过代码声明

变量与类型：
    变量永远不会拥有任何和它关联的类型信息或约束
    类型的概念存在于对象而不是变量名中
    变量是通用的，它只是在一个特定的时间点，简单地引用了一个特定的对象而已
    （类似C语言的 void* 万能指针，不关注所引用的对象的类型）
    一句话：变量无类型

！！！类型属于对象，而不属于变量，变量、变量名 没有类型
类型是与对象关联的，而不是与变量关联的

在变量出现在表达式中时，马上会被当前引用的对象所代替，无论这个对象是什么类型

1. 有一个对象
2. 想一个变量
3. 将变量和这个对象连接起来（引用）

引用是一种关系，通过内存中的指针的形式来实现
一旦使用（引用）变量，python自动跟踪这个变量到对象的连接

以具体的术语来讲：
    * 变量是一个系统表的入口，包含了指向对象的连接
    * 对象是被分配到的一块内存，在这块空间里去表示它们的值
    * 引用是自动形成的从变量到对象的指针

对象其实包含了更复杂的结构：
    每一个对象都有两个标准的头部信息：
        类型标志符（type designator），标识这个对象的类型
        引用计数器（reference counter），决定何时回收这个对象


'''
