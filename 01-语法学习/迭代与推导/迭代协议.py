
'''
所有带 __next__ 方法的对象会前进到下一个结果
而当到大一系列结果的末尾的时候，__next__ 会引发 StopIteration 异常
这种对象在python中也被称为迭代器
任何这类对象也能以for或其他迭代工具遍历，因为所有迭代工具内部工作起来都是在每次迭代中调用 __next__
并且通过捕捉 StopIteration 异常来确定何时离开
对某些对象完整的迭代协议包括额外的一步 iter 调用，但对文件而言这是不必要的

内置函数 next(x) ，也会调用对象的 __next__ 方法

for开始时，会首先把可迭代对象传入内置函数 iter，并由此拿到一个迭代器
iter调用返回的迭代器对象有这所需要的next方法
iter函数与next和__next__很像，在它的内部调用了 __iter__ 方法

完整的迭代协议：
    可迭代对象：迭代的被调对象，其 __iter__ 方法被 iter 函数所调用
    迭代器对象：可迭代对象的返回结果，在迭代过程中实际提供值的对象。它的 __next__ 方法被next运行，并且在结束时触发 StopIteration 异常

文件对象自身就是迭代器。由于文件对象只支持一次迭代（它们不通过反向查找来支持多重扫描）
文件有自己的 __next__ 方法，因此不需要返回一个不同的对象
    iter(f) is f
    iter(f) is f.__iter__()
    f.__next__()

列表以及很多其他的内置对象，由于自身不是迭代器，因此支持多次迭代


！实际上，python的内置工具集中所有能够从左到右扫描一个对象的工具，都被定义为在主体对象上使用了迭代协议
在python中，迭代是一个被广泛支持的强大模型，几乎无处不迭代

'''
