{'dateCreated': <DateTime '20200211T22:21:00' at 0x1a4f2585688>, 'description': '# 什么是Redis\n## 什么是NoSQL\n介绍Redis之前，先了解下NoSQL （Not noly SQL）不仅仅是SQL\n\n属于非关系型数据库；Redis就属于非关系型数据库\n\n传统的Mysql ,oracle ,sql server 等 都是关系型数据库\n\n为什么需要NoSQL，主要应对以下问题，传统关系型数据库力不从心\n- High performance -高并发读写\n- Huge Storage-海量数据的高效率存储和访问\n- High Scalablility && High Availability 高可扩展性和高可用性\n\n## NoSQL的特点\n易扩展\n灵活的数据模型\n大数据量，高性能\n高可用\n\n\n高性能键值对数据库，支持的键值数据类型\n- 字符串类型\n- 列表类型\n- 有序集合类型\n- 散列类型\n- 集合类型\n\n## Redis的应用场景\n- 缓存\n- 任务队列\n- 网站访问统计\n- 数据过期处理\n- 应用排行榜\n- 分布式集群架构中的session分离\n\n# 安装Redis\n\n## 第一步：安装gcc\ngcc是用来编译c语言的，因为redis源码是c写的，所以需要gcc\n```bash\nyum install gcc-c++\n```\n\n## 第二步：wget方式，下载redis压缩包，并解压以及编译\n\n下载：\n```bash\nwget http://download.redis.io/releases/redis-3.2.9.tar.gz\n```\n\n解压：\n```bash\ntar -zxvf redis-3.2.9.tar.gz\n```\n\n进入解压后的目录：\n```bash\nmake\n```\n\n## 第三步：安装redis\n```bash\nmake PREFIX=/usr/local/redis install\n```\n安装到/usr/local/redis\n\n回到解压目录，\n```bash\ncp redis.conf /usr/local/redis/\n```\n\n## 第四步：启动和关闭redis服务\n\n启动：redis里的redis-server命令\n结束：Ctrl + C\n或者：`./bin/redis-cli shutdown`\n\n验证：`ps -ef | grep -i redis`\n\n## 后台启动\n\n编辑redis.conf文件\n![](https://raw.githubusercontent.com/wbytts/images/master/2019/1020200105004838.png)\n把no改成yes\n\n使用指定配置文件启动：\n```bash\n ./bin/redis-server ./redis.conf \n```\n\n# Redis的基本使用\n\n`./bin/redis-cli`，进入客户端\n\n**字符串类型**：\n- 存储：`set key value`\n- 获取：`get key`\n    - 无值返回nil\n- 删除：`del key`\n\n**哈希类型 hash：**\n- 存储：`hset key field value`\n- 获取：\n    - 获取指定field：`hget key field`\n    - 获取全部field：`hgetall key`\n- 删除：`hdel key field`\n\n**列表类型：可以添加一个元素到列表的头部或者尾部**\n- 存储：\n    - 将元素添加到列表左边：`lpush key value1, value2, ......`\n    - 将元素添加到列表右边：`rpush key value1, value2, ......`\n获取：\n- 范围获取：`lrange key start end`（获取所有可以写start是0，end是-1）\n删除：\n- `lpop`：从左边弹出一个元素（删除最左边元素并返回）\n- `rpop`：从右边弹出一个元素\n\n**集合类型：**\n存储：`sadd key value`\n获取：`smembers key`：获取set集合中所有元素\n删除：`srem key value`：删除set集合中的某个元素\n\n\n\n**有序集合类型**：\n不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的，但分数（score）却可以重复\n集合是通过哈希表实现的，所以添加、删除、查找的复杂度都是O(1)。\n- 存储：`zadd key score value`\n- 获取：\n    - 获取所有：`zrange key start end`\n- 删除：`zrem key value`\n\n**通用命令：**\n- 查询所有的键：`keys *`  (*处其实可以添加正则表达式)\n- 获得value类型：`type key`\n- 删除指定key的value：`del key`\n', 'title': 'redis安装与基本使用', 'categories': ['[随笔分类]数据库~Redis'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12297107.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12297107.html', 'postid': '12297107', 'source': {}, 'userid': '-2'}