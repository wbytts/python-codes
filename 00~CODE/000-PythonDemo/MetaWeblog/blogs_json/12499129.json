{'dateCreated': <DateTime '20200315T18:25:00' at 0x1a4f2555708>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# Object 对象的相关方法\n\nJavaScript 在`Object`对象上面，提供了很多相关方法，处理面向对象编程的相关操作。本章介绍这些方法。\n\n## Object.getPrototypeOf()\n\n`Object.getPrototypeOf`方法返回参数对象的原型。这是获取原型对象的标准方法。\n\n```javascript\nvar F = function () {};\nvar f = new F();\nObject.getPrototypeOf(f) === F.prototype // true\n```\n\n上面代码中，实例对象`f`的原型是`F.prototype`。\n\n下面是几种特殊对象的原型。\n\n```javascript\n// 空对象的原型是 Object.prototype\nObject.getPrototypeOf({}) === Object.prototype // true\n\n// Object.prototype 的原型是 null\nObject.getPrototypeOf(Object.prototype) === null // true\n\n// 函数的原型是 Function.prototype\nfunction f() {}\nObject.getPrototypeOf(f) === Function.prototype // true\n```\n\n## Object.setPrototypeOf()\n\n`Object.setPrototypeOf`方法为参数对象设置原型，返回该参数对象。它接受两个参数，第一个是现有对象，第二个是原型对象。\n\n```javascript\nvar a = {};\nvar b = {x: 1};\nObject.setPrototypeOf(a, b);\n\nObject.getPrototypeOf(a) === b // true\na.x // 1\n```\n\n上面代码中，`Object.setPrototypeOf`方法将对象`a`的原型，设置为对象`b`，因此`a`可以共享`b`的属性。\n\n`new`命令可以使用`Object.setPrototypeOf`方法模拟。\n\n```javascript\nvar F = function () {\n  this.foo = \'bar\';\n};\n\nvar f = new F();\n// 等同于\nvar f = Object.setPrototypeOf({}, F.prototype);\nF.call(f);\n```\n\n上面代码中，`new`命令新建实例对象，其实可以分成两步。第一步，将一个空对象的原型设为构造函数的`prototype`属性（上例是`F.prototype`）；第二步，将构造函数内部的`this`绑定这个空对象，然后执行构造函数，使得定义在`this`上面的方法和属性（上例是`this.foo`），都转移到这个空对象上。\n\n## Object.create()\n\n生成实例对象的常用方法是，使用`new`命令让构造函数返回一个实例。但是很多时候，只能拿到一个实例对象，它可能根本不是由构建函数生成的，那么能不能从一个实例对象，生成另一个实例对象呢？\n\nJavaScript 提供了`Object.create`方法，用来满足这种需求。该方法接受一个对象作为参数，然后以它为原型，返回一个实例对象。该实例完全继承原型对象的属性。\n\n```javascript\n// 原型对象\nvar A = {\n  print: function () {\n    console.log(\'hello\');\n  }\n};\n\n// 实例对象\nvar B = Object.create(A);\n\nObject.getPrototypeOf(B) === A // true\nB.print() // hello\nB.print === A.print // true\n```\n\n上面代码中，`Object.create`方法以`A`对象为原型，生成了`B`对象。`B`继承了`A`的所有属性和方法。\n\n实际上，`Object.create`方法可以用下面的代码代替。\n\n```javascript\nif (typeof Object.create !== \'function\') {\n  Object.create = function (obj) {\n    function F() {}\n    F.prototype = obj;\n    return new F();\n  };\n}\n```\n\n上面代码表明，`Object.create`方法的实质是新建一个空的构造函数`F`，然后让`F.prototype`属性指向参数对象`obj`，最后返回一个`F`的实例，从而实现让该实例继承`obj`的属性。\n\n下面三种方式生成的新对象是等价的。\n\n```javascript\nvar obj1 = Object.create({});\nvar obj2 = Object.create(Object.prototype);\nvar obj3 = new Object();\n```\n\n如果想要生成一个不继承任何属性（比如没有`toString`和`valueOf`方法）的对象，可以将`Object.create`的参数设为`null`。\n\n```javascript\nvar obj = Object.create(null);\n\nobj.valueOf()\n// TypeError: Object [object Object] has no method \'valueOf\'\n```\n\n上面代码中，对象`obj`的原型是`null`，它就不具备一些定义在`Object.prototype`对象上面的属性，比如`valueOf`方法。\n\n使用`Object.create`方法的时候，必须提供对象原型，即参数不能为空，或者不是对象，否则会报错。\n\n```javascript\nObject.create()\n// TypeError: Object prototype may only be an Object or null\nObject.create(123)\n// TypeError: Object prototype may only be an Object or null\n```\n\n`Object.create`方法生成的新对象，动态继承了原型。在原型上添加或修改任何方法，会立刻反映在新对象之上。\n\n```javascript\nvar obj1 = { p: 1 };\nvar obj2 = Object.create(obj1);\n\nobj1.p = 2;\nobj2.p // 2\n```\n\n上面代码中，修改对象原型`obj1`会影响到实例对象`obj2`。\n\n除了对象的原型，`Object.create`方法还可以接受第二个参数。该参数是一个属性描述对象，它所描述的对象属性，会添加到实例对象，作为该对象自身的属性。\n\n```javascript\nvar obj = Object.create({}, {\n  p1: {\n    value: 123,\n    enumerable: true,\n    configurable: true,\n    writable: true,\n  },\n  p2: {\n    value: \'abc\',\n    enumerable: true,\n    configurable: true,\n    writable: true,\n  }\n});\n\n// 等同于\nvar obj = Object.create({});\nobj.p1 = 123;\nobj.p2 = \'abc\';\n```\n\n`Object.create`方法生成的对象，继承了它的原型对象的构造函数。\n\n```javascript\nfunction A() {}\nvar a = new A();\nvar b = Object.create(a);\n\nb.constructor === A // true\nb instanceof A // true\n```\n\n上面代码中，`b`对象的原型是`a`对象，因此继承了`a`对象的构造函数`A`。\n\n## Object.prototype.isPrototypeOf()\n\n实例对象的`isPrototypeOf`方法，用来判断该对象是否为参数对象的原型。\n\n```javascript\nvar o1 = {};\nvar o2 = Object.create(o1);\nvar o3 = Object.create(o2);\n\no2.isPrototypeOf(o3) // true\no1.isPrototypeOf(o3) // true\n```\n\n上面代码中，`o1`和`o2`都是`o3`的原型。这表明只要实例对象处在参数对象的原型链上，`isPrototypeOf`方法都返回`true`。\n\n```javascript\nObject.prototype.isPrototypeOf({}) // true\nObject.prototype.isPrototypeOf([]) // true\nObject.prototype.isPrototypeOf(/xyz/) // true\nObject.prototype.isPrototypeOf(Object.create(null)) // false\n```\n\n上面代码中，由于`Object.prototype`处于原型链的最顶端，所以对各种实例都返回`true`，只有直接继承自`null`的对象除外。\n\n## Object.prototype.\\_\\_proto\\_\\_\n\n实例对象的`__proto__`属性（前后各两个下划线），返回该对象的原型。该属性可读写。\n\n```javascript\nvar obj = {};\nvar p = {};\n\nobj.__proto__ = p;\nObject.getPrototypeOf(obj) === p // true\n```\n\n上面代码通过`__proto__`属性，将`p`对象设为`obj`对象的原型。\n\n根据语言标准，`__proto__`属性只有浏览器才需要部署，其他环境可以没有这个属性。它前后的两根下划线，表明它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用`Object.getPrototypeOf()`和`Object.setPrototypeOf()`，进行原型对象的读写操作。\n\n原型链可以用`__proto__`很直观地表示。\n\n```javascript\nvar A = {\n  name: \'张三\'\n};\nvar B = {\n  name: \'李四\'\n};\n\nvar proto = {\n  print: function () {\n    console.log(this.name);\n  }\n};\n\nA.__proto__ = proto;\nB.__proto__ = proto;\n\nA.print() // 张三\nB.print() // 李四\n\nA.print === B.print // true\nA.print === proto.print // true\nB.print === proto.print // true\n```\n\n上面代码中，`A`对象和`B`对象的原型都是`proto`对象，它们都共享`proto`对象的`print`方法。也就是说，`A`和`B`的`print`方法，都是在调用`proto`对象的`print`方法。\n\n## 获取原型对象方法的比较\n\n如前所述，`__proto__`属性指向当前对象的原型对象，即构造函数的`prototype`属性。\n\n```javascript\nvar obj = new Object();\n\nobj.__proto__ === Object.prototype\n// true\nobj.__proto__ === obj.constructor.prototype\n// true\n```\n\n上面代码首先新建了一个对象`obj`，它的`__proto__`属性，指向构造函数（`Object`或`obj.constructor`）的`prototype`属性。\n\n因此，获取实例对象`obj`的原型对象，有三种方法。\n\n- `obj.__proto__`\n- `obj.constructor.prototype`\n- `Object.getPrototypeOf(obj)`\n\n上面三种方法之中，前两种都不是很可靠。`__proto__`属性只有浏览器才需要部署，其他环境可以不部署。而`obj.constructor.prototype`在手动改变原型对象时，可能会失效。\n\n```javascript\nvar P = function () {};\nvar p = new P();\n\nvar C = function () {};\nC.prototype = p;\nvar c = new C();\n\nc.constructor.prototype === p // false\n```\n\n上面代码中，构造函数`C`的原型对象被改成了`p`，但是实例对象的`c.constructor.prototype`却没有指向`p`。所以，在改变原型对象时，一般要同时设置`constructor`属性。\n\n```javascript\nC.prototype = p;\nC.prototype.constructor = C;\n\nvar c = new C();\nc.constructor.prototype === p // true\n```\n\n因此，推荐使用第三种`Object.getPrototypeOf`方法，获取原型对象。\n\n## Object.getOwnPropertyNames()\n\n`Object.getOwnPropertyNames`方法返回一个数组，成员是参数对象本身的所有属性的键名，不包含继承的属性键名。\n\n```javascript\nObject.getOwnPropertyNames(Date)\n// ["parse", "arguments", "UTC", "caller", "name", "prototype", "now", "length"]\n```\n\n上面代码中，`Object.getOwnPropertyNames`方法返回`Date`所有自身的属性名。\n\n对象本身的属性之中，有的是可以遍历的（enumerable），有的是不可以遍历的。`Object.getOwnPropertyNames`方法返回所有键名，不管是否可以遍历。只获取那些可以遍历的属性，使用`Object.keys`方法。\n\n```javascript\nObject.keys(Date) // []\n```\n\n上面代码表明，`Date`对象所有自身的属性，都是不可以遍历的。\n\n## Object.prototype.hasOwnProperty()\n\n对象实例的`hasOwnProperty`方法返回一个布尔值，用于判断某个属性定义在对象自身，还是定义在原型链上。\n\n```javascript\nDate.hasOwnProperty(\'length\') // true\nDate.hasOwnProperty(\'toString\') // false\n```\n\n上面代码表明，`Date.length`（构造函数`Date`可以接受多少个参数）是`Date`自身的属性，`Date.toString`是继承的属性。\n\n另外，`hasOwnProperty`方法是 JavaScript 之中唯一一个处理对象属性时，不会遍历原型链的方法。\n\n## in 运算符和 for...in 循环\n\n`in`运算符返回一个布尔值，表示一个对象是否具有某个属性。它不区分该属性是对象自身的属性，还是继承的属性。\n\n```javascript\n\'length\' in Date // true\n\'toString\' in Date // true\n```\n\n`in`运算符常用于检查一个属性是否存在。\n\n获得对象的所有可遍历属性（不管是自身的还是继承的），可以使用`for...in`循环。\n\n```javascript\nvar o1 = { p1: 123 };\n\nvar o2 = Object.create(o1, {\n  p2: { value: "abc", enumerable: true }\n});\n\nfor (p in o2) {\n  console.info(p);\n}\n// p2\n// p1\n```\n\n上面代码中，对象`o2`的`p2`属性是自身的，`p1`属性是继承的。这两个属性都会被`for...in`循环遍历。\n\n为了在`for...in`循环中获得对象自身的属性，可以采用`hasOwnProperty`方法判断一下。\n\n```javascript\nfor ( var name in object ) {\n  if ( object.hasOwnProperty(name) ) {\n    /* loop code */\n  }\n}\n```\n\n获得对象的所有属性（不管是自身的还是继承的，也不管是否可枚举），可以使用下面的函数。\n\n```javascript\nfunction inheritedPropertyNames(obj) {\n  var props = {};\n  while(obj) {\n    Object.getOwnPropertyNames(obj).forEach(function(p) {\n      props[p] = true;\n    });\n    obj = Object.getPrototypeOf(obj);\n  }\n  return Object.getOwnPropertyNames(props);\n}\n```\n\n上面代码依次获取`obj`对象的每一级原型对象“自身”的属性，从而获取`obj`对象的“所有”属性，不管是否可遍历。\n\n下面是一个例子，列出`Date`对象的所有属性。\n\n```javascript\ninheritedPropertyNames(Date)\n// [\n//  "caller",\n//  "constructor",\n//  "toString",\n//  "UTC",\n//  ...\n// ]\n```\n\n## 对象的拷贝\n\n如果要拷贝一个对象，需要做到下面两件事情。\n\n- 确保拷贝后的对象，与原对象具有同样的原型。\n- 确保拷贝后的对象，与原对象具有同样的实例属性。\n\n下面就是根据上面两点，实现的对象拷贝函数。\n\n```javascript\nfunction copyObject(orig) {\n  var copy = Object.create(Object.getPrototypeOf(orig));\n  copyOwnPropertiesFrom(copy, orig);\n  return copy;\n}\n\nfunction copyOwnPropertiesFrom(target, source) {\n  Object\n    .getOwnPropertyNames(source)\n    .forEach(function (propKey) {\n      var desc = Object.getOwnPropertyDescriptor(source, propKey);\n      Object.defineProperty(target, propKey, desc);\n    });\n  return target;\n}\n```\n\n另一种更简单的写法，是利用 ES2017 才引入标准的`Object.getOwnPropertyDescriptors`方法。\n\n```javascript\nfunction copyObject(orig) {\n  return Object.create(\n    Object.getPrototypeOf(orig),\n    Object.getOwnPropertyDescriptors(orig)\n  );\n}\n```\n\n## 参考链接\n\n- Dr. Axel Rauschmayer, [JavaScript properties: inheritance and enumerability](http://www.2ality.com/2011/07/js-properties.html)', 'title': 'javascript：Object 对象的相关方法', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12499129.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12499129.html', 'postid': '12499129', 'source': {}, 'userid': '-2'}