{'dateCreated': <DateTime '20191230T01:02:00' at 0x1a4f2a14408>, 'description': '# 面向过程版\n\n```python\n# 0. 导入需要的包和模块\nfrom PyQt5.Qt import * # 包含了我们常用的QT中的一些类\nimport sys # 一个内置的模块，系统相关操作\n\n# 代码执行的时候，可以接收命令行的参数 sys.argv\n# args = sys.argv # python命令运行时的参数，一般第0个是文件名，后面是其他参数\n# print(args)\n\n# 1. 创建一个应用程序对象，\n# 一个PyQt程序都需要一个应用程序对象\n#       * 它包含主事件循环，在其中来自窗口系统和其他资源的所有事件被处理和调度\n#       * 它也处理应用程序的初始化和结束，并且提供对话管理\n#       * 它也处理绝大多数系统范围和应用程序范围的设置\napp = QApplication(sys.argv)\n# app.arguments() # 可以获取创建时传入的参数\n# 也可以通过 qApp.arguments() 来获取\n\n# 2. 控件的操作\n# 创建控件，控件的设置，事件的处理等\n# 创建控件\n# 当我们创建一个控件之后，如果说，这个控件没有父控件，则把它当做顶层控件（窗口）\n# 系统会自动地给窗口添加一些装饰（例如标题栏），窗口控件具备一些特征\n# 凡是顶层控件，都可以设置一些有关窗口的属性\n# 控件也可以作为一个容器（承载其他控件）\n# 如果一个控件有父控件，则父控件展示之后，子控件一般也会展示\n#window = QWidget()\nwindow = QLabel()\n# 设置控件\nwindow.setText("Hello World")\nwindow.setWindowTitle("titlexxxxxxx")\n# 展示控件\n# 刚创建好的控件默认不会被展示（如果这个控件没有什么父控件），需要手动show\nwindow.show()\n\n# 3. 应用程序的执行，进入到消息循环\n\n# 退出码，一般正常是0\nsys.exit(app.exec_())\n# app.exec_() 让整个程序开始执行， 进入消息循环（无限循环），不要停止\n# 消息循环检测整个程序所接收到的用户的交互信息和其他信息\n\n```', 'title': 'PyQt5程序基本结构分析', 'categories': ['[随笔分类]Python~PyQt'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12117344.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12117344.html', 'postid': '12117344', 'source': {}, 'userid': '-2'}