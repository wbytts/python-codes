{'dateCreated': <DateTime '20200503T05:07:00' at 0x1a4f2520648>, 'description': '\n```java\npackage com.bingyi.utils;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.TypeReference;\nimport com.alibaba.fastjson.serializer.JSONLibDataFormatSerializer;\nimport com.alibaba.fastjson.serializer.SerializeConfig;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * fastjson 封装\n */\npublic class FastJsonUtils {\n    private final static Logger logger = LoggerFactory.getLogger(FastJsonUtils.class);\n    private static SerializeConfig config;\n\n    static {\n        config = new SerializeConfig();\n        // 使用和json-lib兼容的日期输出格式\n        config.put(java.util.Date.class, new JSONLibDataFormatSerializer());\n        // 使用和json-lib兼容的日期输出格式\n        config.put(java.sql.Date.class, new JSONLibDataFormatSerializer());\n    }\n\n    private static final SerializerFeature[] features = {\n            //打开循环引用检测，JSONField(serialize = false)不循环\n            SerializerFeature.DisableCircularReferenceDetect,\n            //默认使用系统默认 格式日期格式化\n            SerializerFeature.WriteDateUseDateFormat,\n            //输出空置字段\n            SerializerFeature.WriteMapNullValue,\n            //list字段如果为null，输出为[]，而不是null\n            SerializerFeature.WriteNullListAsEmpty,\n            // 数值字段如果为null，输出为0，而不是null\n            SerializerFeature.WriteNullNumberAsZero,\n            //Boolean字段如果为null，输出为false，而不是null\n            SerializerFeature.WriteNullBooleanAsFalse,\n            //字符类型字段如果为null，输出为""，而不是null\n            SerializerFeature.WriteNullStringAsEmpty\n    };\n\n    /**\n     * 返回Json字符串里面包含的一个对象\n     *\n     * @param jsonStr  :{"city":"china","map1":[{"age":"28","name":"yys"}]}\n     * @param list_str :map1\n     * @param clazz    :Map.class,或者其他对象\n     * @param <T>      :Map\n     * @return :List<Map>\n     */\n    public static final <T> List<T> json2childList(String jsonStr, String list_str,\n                                                   Class<T> clazz) {\n        JSONObject jsonobj = JSON.parseObject(jsonStr);\n        if (jsonobj == null) {\n            return null;\n        }\n        Object obj = jsonobj.get(list_str);\n        if (obj == null) {\n            return null;\n        }\n        if (obj instanceof JSONArray) {\n            JSONArray jsonarr = (JSONArray) obj;\n            List<T> list = new ArrayList<T>();\n            for (int i = 0; i < jsonarr.size(); i++) {\n                list.add(jsonarr.getObject(i, clazz));\n            }\n            return list;\n        }\n        return null;\n    }\n\n    /**\n     * 返回Json字符串里面包含的一个对象\n     *\n     * @param jsonStr :{"department":{"id":"1","name":"生产部"},"password":"admin","username":"admin"}\n     * @param obj_str :department\n     * @param clazz   :Map.class,或者其他对象\n     * @param <T>     :Map\n     * @return\n     */\n    public static final <T> T json2childObj(String jsonStr, String obj_str,\n                                            Class<T> clazz) {\n        JSONObject jsonobj = JSON.parseObject(jsonStr);\n        if (jsonobj == null) {\n            return null;\n        }\n\n        Object obj = jsonobj.get(obj_str);\n        if (obj == null) {\n            return null;\n        }\n\n        if (obj instanceof JSONObject) {\n            return jsonobj.getObject(obj_str, clazz);\n        } else {\n            logger.info(obj.getClass() + "");\n        }\n\n        return null;\n    }\n\n    /**\n     * json 转换成对象\n     *\n     * @param jsonStr\n     * @param clazz\n     * @param <T>\n     * @return\n     */\n    public static final <T> T json2obj(String jsonStr, Class<T> clazz) {\n        T t = null;\n        try {\n            t = JSON.parseObject(jsonStr, clazz);\n        } catch (Exception e) {\n            logger.error("json字符串转换失败！" + jsonStr, e);\n        }\n        return t;\n    }\n\n    /**\n     * 对象转换成json字符串(带有格式化输出)\n     *\n     * @param object       要转换的对象\n     * @param prettyFormat 是否格式化json字符串,输出带有换行和缩进的字符串\n     * @return 返回一个json 字符串数组\n     */\n    public static final String obj2json(Object object, boolean prettyFormat) {\n        return JSON.toJSONString(object, prettyFormat);\n    }\n\n    /**\n     * 对象转换成json字符串\n     *\n     * @param object 要转换的对象\n     * @return 返回一个json 字符串数组\n     */\n    public static final String obj2jsonByFeatures(Object object) {\n        return JSON.toJSONString(object, config, features);\n    }\n\n    /**\n     * 对象转换成json字符串\n     *\n     * @param object 要转换的对象\n     * @return 返回一个json 字符串数组\n     */\n    public static final String obj2json(Object object) {\n        return JSON.toJSONString(object, config);\n    }\n\n    /**\n     * json 字符串转换成原始的Object对象\n     *\n     * @param jsonStr\n     * @return\n     */\n    public static final Object json2obj(String jsonStr) {\n        return JSON.parse(jsonStr);\n    }\n\n    /**\n     * json字符串转换成list\n     *\n     * @param jsonStr    Json字符串\n     * @param clazz      要转换的class\n     * @param <T>返回的泛型类型\n     * @return 返回的<T>泛型类型\n     */\n    public static <T> List<T> json2List(String jsonStr, Class<T> clazz) {\n        List<T> list = new ArrayList<T>();\n        try {\n            list = JSON.parseArray(jsonStr, clazz);\n        } catch (Exception e) {\n            logger.error("json字符串转List失败！" + jsonStr, e);\n        }\n        return list;\n    }\n\n    /**\n     * json字符串转换成Map\n     *\n     * @param jsonStr Json字符串\n     * @return Map\n     */\n    public static Map<String, Object> json2Map(String jsonStr) {\n        try {\n            return JSON.parseObject(jsonStr, Map.class);\n        } catch (Exception e) {\n            logger.error("json字符串转换失败！" + jsonStr, e);\n        }\n        return null;\n    }\n\n    /**\n     * json 转换成list<map>\n     *\n     * @param jsonString\n     * @return\n     */\n    public static List<Map<String, Object>> json2ListkeyMap(String jsonString) {\n        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();\n        try {\n            list = JSON.parseObject(jsonString,\n                    new TypeReference<List<Map<String, Object>>>() {\n                    });\n        } catch (Exception e) {\n            logger.error("json字符串转map失败", e);\n        }\n        return list;\n    }\n\n}\n```', 'title': 'fastjson 封装工具类', 'categories': ['[随笔分类]Java'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12820585.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12820585.html', 'postid': '12820585', 'source': {}, 'userid': '-2'}