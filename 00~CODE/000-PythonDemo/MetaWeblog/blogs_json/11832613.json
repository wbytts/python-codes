{'dateCreated': <DateTime '20191111T02:50:00' at 0x1a4f2a49508>, 'description': '# 1. 什么是 Spring boot\nSpring Boot来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用\n整个Spring技术栈的一个大整合\nJ2EE的一站式解决方案\n\n优点：\n* 快速创建独立运行的Spring项目以及与主流框架集成\n* 使用嵌入式的Servlet容器，应用无需打成WAR包\n* starters（启动器） 自动依赖与版本控制\n* 大量的自动配置，简化开发，也可以修改默认值\n* 无需配置XML，无代码生成，开箱即用\n* 准生产环境的运行时应用监控\n* 与云计算的天然集成\n\n**微服务**：其实是一种架构风格\n一个应用应该是一组小型服务；可以通过HTTP的方式进行沟通\n\n单体应用：all in one\n带来的问题：应用太大不容易维护，牵一发而动全身\n\n一个单体应用程序把它的所有功能放在一个单一进程中，并且通过在多个服务器上复制这个单体进行扩展\n一个微服务架构把每个功能元素放进一个独立的服务中，并且通过跨服务器分发这些服务进行扩展，只在需要时才复制\n\n每一个功能元素最终都是一个可独立替换和独立升级的软件单元\n\n详细参照微服务文档：\nhttps://martinfowler.com/   选择All Sections\nhttps://martinfowler.com/microservices/\n\n# 2. Springboot 的优点\n* 快速创建独立运行的Spring项目以及与主流框架集成\n* 使用嵌入式的Servlet容器，应用无需打成WAR包\n* starters（启动器） 自动依赖与版本控制\n* 大量的自动配置，简化开发，也可以修改默认值\n* 无需配置XML，无代码生成，开箱即用\n* 准生产环境的运行时应用监控\n* 与云计算的天然集成\n\n# 3. 使用Maven创建springboot工程\n## 3.1 第一步，创建一个空的maven工程\n## 3.2第二步，添加springboot父工程\n在项目的pom文件中添加springboot的父项目：\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.1.4.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n```\n\n> 这个父项目还有一个父项目：spring-boot-dependencies\n这个项目来真正管理Spring Boot应用里面的所有依赖版本\n所以这个项目又叫Spring Boot版本仲裁中心\n以后我们导入依赖默认是不需要写版本的\n但是没有在其中管理的依赖还是需要写版本的\n\n## 3.3 第三步，添加web依赖（启动器）\n在pom中添加依赖：\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\nspring-boot-started-web：帮我们导入了web模块正常运行依赖的组件\nspring-boot-starter：spring boot 场景启动器\n\nSpring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器\n\n## 3.4 第四步，编写一个主程序（用来启动Springboot应用）\n```java\n/**\n* @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用\n*/\n@SpringBootApplication\npublic class HelloWorldMainApplication {\n    public static void main(String[] args) {\n        // Spring应用启动起来\n        SpringApplication.run(HelloWorldMainApplication.class, args);\n    }\n}\n```\n\nSpringApplication.run的时候必须传入一个类，这个类必须是@SpringBootApplication注解修饰的类，即SpringBoot应用\n@SpringBootApplication标注说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法启动SpringBoot应用\n\n## 3.5 写一个controller来测试\n```java\n@Controller\npublic class HelloController {\n    @ResponseBody\n    @RequestMapping("/hello")\n    public String hello() {\n        return "Hello World!";\n    }\n}\n```\n\n## 3.6 运行\n找到刚刚创建的主程序类，运行其中的main函数\nspringboot运行直接运行main函数即可\n然后在浏览器中输入 ....../hello 进行测试\n\n# 4. 如何将应用打成jar包\n\n在pom文件中添加一个插件：\n```xml\n<build>\n    <plugins>\n        <!--可以生成一个可执行的jar包-->\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n然后运行maven的package打包命令即可将项目打包\n将jar包发送到目标服务器，使用 java -jar 包名 即可运行这个项目\n\n# 5. Springboot 项目结构介绍\n\nSpring Boot 的基础结构共三个文件:\n* src/main/java 程序开发以及主程序入口\n* src/main/resources 配置文件\n* src/test/java 测试程序\n\nspringboot推荐的项目结构：\n```\ncom\n  +- example\n    +- myproject\n      +- Application.java\n      |\n      +- model\n      |  +- Customer.java\n      |  +- CustomerRepository.java\n      |\n      +- service\n      |  +- CustomerService.java\n      |\n      +- controller\n      |  +- CustomerController.java\n      |\n```\n\n1、Application.java 建议放到根目录下面,主要用于做一些框架配置\n2、model 目录主要用于实体与数据访问层（Repository）\n3、service 层主要是业务类代码\n4、controller 负责页面访问控制\n\n# 做单元测试\n打开的src/test/下的测试入口，编写简单的 http 请求来测试；使用 mockmvc 进行，利用MockMvcResultHandlers.print()打印出执行结果。\n```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class HelloTests {\n\n  \n    private MockMvc mvc;\n\n    @Before\n    public void setUp() throws Exception {\n        mvc = MockMvcBuilders.standaloneSetup(new HelloWorldController()).build();\n    }\n\n    @Test\n    public void getHello() throws Exception {\n        mvc.perform(MockMvcRequestBuilders.get("/hello").accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(content().string(equalTo("Hello World")));\n    }\n\n}\n```\n# 开发环境的调试\n热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错；但springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置：\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n</dependencies>\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <fork>true</fork>\n            </configuration>\n        </plugin>\n</plugins>\n</build>\n```\n该模块在完整的打包环境下运行的时候会被禁用。如果你使用 java -jar启动应用或者用一个特定的 classloader 启动，它会认为这是一个“生产环境”。', 'title': 'Springboot学习：介绍与HelloWorld', 'categories': ['[随笔分类]Java~SpringBoot', '[随笔分类]Java~SpringBoot'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/11832613.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/11832613.html', 'postid': '11832613', 'source': {}, 'userid': '-2'}