{'dateCreated': <DateTime '20200315T18:33:00' at 0x1a4f2550888>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# ParentNode 接口，ChildNode 接口\n\n节点对象除了继承 Node 接口以外，还拥有其他接口。`ParentNode`接口表示当前节点是一个父节点，提供一些处理子节点的方法。`ChildNode`接口表示当前节点是一个子节点，提供一些相关方法。\n\n## ParentNode 接口\n\n如果当前节点是父节点，就会混入了（mixin）`ParentNode`接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会拥有`ParentNode`接口。\n\n### ParentNode.children\n\n`children`属性返回一个`HTMLCollection`实例，成员是当前节点的所有元素子节点。该属性只读。\n\n下面是遍历某个节点的所有元素子节点的示例。\n\n```javascript\nfor (var i = 0; i < el.children.length; i++) {\n  // ...\n}\n```\n\n注意，`children`属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。如果没有元素类型的子节点，返回值`HTMLCollection`实例的`length`属性为`0`。\n\n另外，`HTMLCollection`是动态集合，会实时反映 DOM 的任何变化。\n\n### ParentNode.firstElementChild\n\n`firstElementChild`属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回`null`。\n\n```javascript\ndocument.firstElementChild.nodeName\n// "HTML"\n```\n\n上面代码中，`document`节点的第一个元素子节点是`<HTML>`。\n\n### ParentNode.lastElementChild\n\n`lastElementChild`属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回`null`。\n\n```javascript\ndocument.lastElementChild.nodeName\n// "HTML"\n```\n\n上面代码中，`document`节点的最后一个元素子节点是`<HTML>`（因为`document`只包含这一个元素子节点）。\n\n### ParentNode.childElementCount\n\n`childElementCount`属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回`0`。\n\n```javascript\ndocument.body.childElementCount // 13\n```\n\n### ParentNode.append()，ParentNode.prepend()\n\n`append`方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。\n\n该方法不仅可以添加元素子节点，还可以添加文本子节点。\n\n```javascript\nvar parent = document.body;\n\n// 添加元素子节点\nvar p = document.createElement(\'p\');\nparent.append(p);\n\n// 添加文本子节点\nparent.append(\'Hello\');\n\n// 添加多个元素子节点\nvar p1 = document.createElement(\'p\');\nvar p2 = document.createElement(\'p\');\nparent.append(p1, p2);\n\n// 添加元素子节点和文本子节点\nvar p = document.createElement(\'p\');\nparent.append(\'Hello\', p);\n```\n\n注意，该方法没有返回值。\n\n`prepend`方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。它的用法与`append`方法完全一致，也是没有返回值。\n\n## ChildNode 接口\n\n如果一个节点有父节点，那么该节点就拥有了`ChildNode`接口。\n\n### ChildNode.remove()\n\n`remove`方法用于从父节点移除当前节点。\n\n```javascript\nel.remove()\n```\n\n上面代码在 DOM 里面移除了`el`节点。\n\n### ChildNode.before()，ChildNode.after()\n\n`before`方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。\n\n注意，该方法不仅可以插入元素节点，还可以插入文本节点。\n\n```javascript\nvar p = document.createElement(\'p\');\nvar p1 = document.createElement(\'p\');\n\n// 插入元素节点\nel.before(p);\n\n// 插入文本节点\nel.before(\'Hello\');\n\n// 插入多个元素节点\nel.before(p, p1);\n\n// 插入元素节点和文本节点\nel.before(p, \'Hello\');\n```\n\n`after`方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。用法与`before`方法完全相同。\n\n### ChildNode.replaceWith()\n\n`replaceWith`方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。\n\n```javascript\nvar span = document.createElement(\'span\');\nel.replaceWith(span);\n```\n\n上面代码中，`el`节点将被`span`节点替换。', 'title': 'javascript：ParentNode 接口，ChildNode 接口', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12499192.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12499192.html', 'postid': '12499192', 'source': {}, 'userid': '-2'}