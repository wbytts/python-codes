{'dateCreated': <DateTime '20200125T22:39:00' at 0x1a4f29c3fc8>, 'description': '资料：\nW3C标准：https://www.w3.org/TR/xpath/all/\nW3School：https://www.w3school.com.cn/xpath/index.asp\n菜鸟教程：https://www.runoob.com/xpath/xpath-tutorial.html\nxpath教程：http://www.zvon.org/xxl/XPathTutorial/General_chi/examples.html\n\nXPATH在线测试：http://www.bejson.com/testtools/xpath/\n\n# 简介\n\nXPath 使用路径表达式在 XML 文档中进行导航\nXPath 包含一个标准函数库\nXPath 是 XSLT 中的主要元素\nXPath 是一个 W3C 标准\n\nXPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。\n\nXPath 含有超过 100 个内建的函数。这些函数用于字符串值、数值、日期和时间比较、节点和 QName 处理、序列处理、逻辑值等等。\n\n# XPath 节点\n\n在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点。XML 文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。\n\n```\n<bookstore> （文档节点）\n<author>J K. Rowling</author> （元素节点）\nlang="en" （属性节点） \n```\n\n## 基本值\n\n称原子值，Atomic value\n基本值是无父或无子的节点。\n\n## 项目（Item）\n\n项目是基本值或者节点。\n\n# 节点关系\n\n## 父（Parent）\n\n每个元素以及属性都有一个父。\n\n## 子（Children）\n\n元素节点可有零个、一个或多个子。\n\n## 同胞（Sibling）\n\n拥有相同的父的节点\n\n## 先辈（Ancestor）\n\n某节点的父、父的父，等等。\n\n## 后代（Descendant）\n\n某个节点的子，子的子，等等。\n\n# XPath 语法\n\nXPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。\n\n## 选取节点\n\nXPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。\n\n下面列出了最有用的路径表达式：\n\n| 表达式   | 描述                                                       |\n| :------- | :--------------------------------------------------------- |\n| `nodename` | 选取此节点的所有子节点。                                   |\n| `/`        | 从根节点选取。                                             |\n| `//`       | 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。 |\n| `.`        | 选取当前节点。                                             |\n| `..`       | 选取当前节点的父节点。                                     |\n| `@`        | 选取属性。                                                 |\n\n## 谓语（Predicates）\n\n谓语用来查找某个特定的节点或者包含某个指定的值的节点。\n\n谓语被嵌在方括号中。\n注：**XPath的下标是从1开始的！**\n\n在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：\n\n| 路径表达式                         | 结果                                                         |\n| :--------------------------------- | :----------------------------------------------------------- |\n| `/bookstore/book[1] `                | 选取属于 bookstore 子元素的第一个 book 元素。                |\n| `/bookstore/book[last()]`            | 选取属于 bookstore 子元素的最后一个 book 元素。              |\n| `/bookstore/book[last()-1]`          | 选取属于 bookstore 子元素的倒数第二个 book 元素。            |\n| `/bookstore/book[position()<3]`      | 选取最前面的两个属于 bookstore 元素的子元素的 book 元素。    |\n| `//title[@lang]`                     | 选取所有拥有名为 lang 的属性的 title 元素。                  |\n| `//title[@lang=\'eng\']`               | 选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。   |\n| `/bookstore/book[price>35.00]`       | 选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。 |\n| `/bookstore/book[price>35.00]/title` | 选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。 |\n\n## 选取未知节点\n\nXPath 通配符可用来选取未知的 XML 元素。\n\n| 通配符 | 描述                 |\n| :----- | :------------------- |\n| `*`      | 匹配任何元素节点。   |\n| `@*`     | 匹配任何属性节点。   |\n| `node()` | 匹配任何类型的节点。 |\n\n## 选取若干路径\n\n通过在路径表达式中使用“|”运算符，您可以选取若干个路径。\n\n# XPath 轴\n\n轴可定义相对于当前节点的节点集。\n\n| 轴名称             | 结果                                                     |\n| :----------------- | :------------------------------------------------------- |\n| ancestor           | 选取当前节点的所有先辈（父、祖父等）。                   |\n| ancestor-or-self   | 选取当前节点的所有先辈（父、祖父等）以及当前节点本身。   |\n| attribute          | 选取当前节点的所有属性。                                 |\n| child              | 选取当前节点的所有子元素。                               |\n| descendant         | 选取当前节点的所有后代元素（子、孙等）。                 |\n| descendant-or-self | 选取当前节点的所有后代元素（子、孙等）以及当前节点本身。 |\n| following          | 选取文档中当前节点的结束标签之后的所有节点。             |\n| namespace          | 选取当前节点的所有命名空间节点。                         |\n| parent             | 选取当前节点的父节点。                                   |\n| preceding          | 选取文档中当前节点的开始标签之前的所有节点。             |\n| preceding-sibling  | 选取当前节点之前的所有同级节点。                         |\n| self               | 选取当前节点。                                           |\n\n## 位置路径表达式\n\n位置路径可以是绝对的，也可以是相对的。\n\n绝对路径起始于正斜杠( / )，而相对路径不会这样。在两种情况中，位置路径均包括一个或多个步，每个步均被斜杠分割：\n\n每个步均根据当前节点集之中的节点来进行计算。\n\n步（step）包括：\n- 轴（axis）定义所选节点与当前节点之间的树关系\n- 节点测试（node-test）识别某个轴内部的节点\n- 零个或者更多谓语（predicate）更深入地提炼所选的节点集\n\n步的语法：`轴名称::节点测试[谓语]`\n\n例子：\n\n| 例子                   | 结果                                                         |\n| :--------------------- | :----------------------------------------------------------- |\n| `child::book`            | 选取所有属于当前节点的子元素的 book 节点。                   |\n| `attribute::lang`        | 选取当前节点的 lang 属性。                                   |\n| `child::*`               | 选取当前节点的所有子元素。                                   |\n| `attribute::*`           | 选取当前节点的所有属性。                                     |\n| `child::text()`          | 选取当前节点的所有文本子节点。                               |\n| `child::node()`          | 选取当前节点的所有子节点。                                   |\n| `descendant::book`       | 选取当前节点的所有 book 后代。                               |\n| `ancestor::book`         | 选择当前节点的所有 book 先辈。                               |\n| `ancestor-or-self::book` | 选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点） |\n| `child::*/child::price`  | 选取当前节点的所有 price 孙节点。                            |\n\n# XPath 运算符\n\n| 运算符 | 描述           | 实例                      | 返回值                                                       |\n| :----- | :------------- | :------------------------ | :----------------------------------------------------------- |\n| \\|     | 计算两个节点集 | //book \\| //cd            | 返回所有拥有 book 和 cd 元素的节点集                         |\n| +      | 加法           | 6 + 4                     | 10                                                           |\n| -      | 减法           | 6 - 4                     | 2                                                            |\n| *      | 乘法           | 6 * 4                     | 24                                                           |\n| div    | 除法           | 8 div 4                   | 2                                                            |\n| =      | 等于           | price=9.80                | 如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。 |\n| !=     | 不等于         | price!=9.80               | 如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。 |\n| <      | 小于           | price<9.80                | 如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。 |\n| <=     | 小于或等于     | price<=9.80               | 如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。 |\n| >      | 大于           | price>9.80                | 如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。 |\n| >=     | 大于或等于     | price>=9.80               | 如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。 |\n| or     | 或             | price=9.80 or price=9.70  | 如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。 |\n| and    | 与             | price>9.00 and price<9.90 | 如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。 |\n| mod    | 计算除法的余数 | 5 mod 2                   | 1                                                            |\n\n\n# XPath 函数\n\n见：https://www.w3school.com.cn/xpath/xpath_functions.asp\n', 'title': 'Python爬虫：数据解析 之  xpath', 'categories': ['[随笔分类]Python~爬虫~'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12233532.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12233532.html', 'postid': '12233532', 'source': {}, 'userid': '-2'}