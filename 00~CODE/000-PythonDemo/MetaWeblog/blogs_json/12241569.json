{'dateCreated': <DateTime '20200129T21:41:00' at 0x1a4f29a06c8>, 'description': '# 直接用matplotlib画出直方图\n```python\ndef plot_demo(image):\n    plt.hist(image.ravel(), 256, [0, 256])  # image.ravel()将图像展开，256为bins数量，[0, 256]为范围\n    plt.show()\n```\n\n# 图像直方图\n\n```python\ndef image_hist(image):\n    color = (\'blue\', \'green\', \'red\')\n    for i, color in enumerate(color):\n\n        # 计算出直方图，calcHist(images, channels, mask, histSize(有多少个bin), ranges[, hist[, accumulate]]) -> hist\n        # hist 是一个 256x1 的数组，每一个值代表了与该灰度值对应的像素点数目。\n\n        hist = cv.calcHist(image, [i], None, [256], [0, 256])\n        print(hist.shape)\n        plt.plot(hist, color=color)\n        plt.xlim([0, 256])\n    plt.show()\n```\n\n# 直方图均值化\n\n是图像增强的一个手段\n\n```python\ndef equalHist_demo(image):\n    gray = cv.cvtColor(image,cv.COLOR_BGR2GRAY)\n\n    # 全局直方图均衡化，用于增强图像对比度，即黑的更黑，白的更白\n    dst = cv.equalizeHist(gray)\n    cv.imshow("equalHist_demo", dst)\n\n    # 局部直方图均衡化\n    clahe = cv.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))\n    clahe_dst = clahe.apply(gray)\n    cv.imshow("clahe", clahe_dst)\n```\n\n# 直方图比较\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200129213012922-2138646028.png)\n\n```python\n# 创建直方图\ndef create_rgb_demo(image):\n    h, w, c = image.shape\n    rgbHist = np.zeros([16*16*16, 1], np.float32)\n    bsize = 256 / 16\n    for row in range(h):\n        for col in range(w):\n            b = image[row, col, 0]\n            g = image[row, col, 1]\n            r = image[row, col, 2]\n            index = np.int(b/bsize)*16*16 + np.int(g/bsize)*16 + np.int(r/bsize)\n            rgbHist[np.int(index), 0] = rgbHist[np.int(index), 0] + 1\n\n    return rgbHist\n\n\n# 利用直方图比较相似性，用巴氏和相关性比较好\ndef hist_compare(image1, image2):\n    hist1 = create_rgb_demo(image1)\n    hist2 = create_rgb_demo(image2)\n    match1 = cv.compareHist(hist1, hist2, method=cv.HISTCMP_BHATTACHARYYA)\n    match2 = cv.compareHist(hist1, hist2, method=cv.HISTCMP_CORREL)\n    match3 = cv.compareHist(hist1, hist2, method=cv.HISTCMP_CHISQR)\n    print("巴式距离：%s, 相关性：%s, 卡方：%s"%(match1, match2, match3))\n```\n\n# 直方图反向投影\n\n```python\nimport cv2 as cv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef hist2d_demo(image):\n    hsv = cv.cvtColor(image, cv.COLOR_BGR2HSV)\n    hist = cv.calcHist([image], [0, 1], None, [180, 360], [0, 180, 0, 256])  # 计算直方图\n    print(hist.shape)\n    # cv.imshow("hist2d_demo", hist)\n    plt.imshow(hist, interpolation="nearest")  # 直方图显示\n    plt.title("2D Histogram")\n    plt.show()\n\n\n# OpenCV 提供的函数 cv2.calcBackProject() 可以用来做直方图反向 投影。\n# 它的参数与函数 cv2.calcHist 的参数基本相同。其中的一个参数是我 们要查找目标的直方图。\n# 同样再使用目标的直方图做反向投影之前我们应该先对其做归一化处理。\n# 返回的结果是一个概率图像\ndef back_projection_demo():\n    """\n    反向投影可以用来做图像分割，或者在图像中找寻我们感兴趣的部分。\n    它会输出与输入图像（待搜索）同样大小的图像，其中的每一个像素值代表了输入图像上对应点属于目标对象的概率。\n    输出图像中像素值越高（越白）的点就越可能代表我们要搜索的目标 （在输入图像所在的位置）。\n    直方图投影经常与camshift 算法等一起使用。\n    步骤：\n    1. 为一张包含我们要查找目标的图像创建直方图，我们要查找的对象要尽量占满这张图像。\n        最好使用颜色直方图，因为一个物体的颜色要比它的灰 度能更好的被用来进行图像分割与对象识别。\n    2. 们再把这个颜色直方图投 影到输入图像中寻找我们的目标，\n        也就是找到输入图像中的每一个像素点的像素值在直方图中对应的概率，这样我们就得到一个概率图像。\n    3. 设置适当的阈值对概率图像进行二值化\n    """\n    sample = cv.imread("../images/roi.png")\n    target = cv.imread("../images/CrystalLiu3.jpg")\n    roi_hsv = cv.cvtColor(sample, cv.COLOR_BGR2HSV)\n    target_hsv = cv.cvtColor(target, cv.COLOR_BGR2HSV)\n\n    cv.imshow("sample", sample)\n    cv.imshow("target", target)\n\n    roiHist = cv.calcHist([roi_hsv], [0, 1], None, [180, 256], [0, 180, 0, 256])\n\n    # 归一化：原始图像，结果图像，映射到结果图像中的最小值，最大值，归一化类型\n    # cv.NORM_MINMAX对数组的所有值进行转化，使它们线性映射到最小值和最大值之间\n    # 归一化后的图像便于显示，归一化后到0,255之间了\n    cv.normalize(roiHist, roiHist, 0, 255, cv.NORM_MINMAX)\n    dst = cv.calcBackProject([target_hsv], [0, 1], roiHist, [0, 180, 0, 256], 1)\n    cv.imshow("backProjectionDemo", dst)\n\n\nif __name__ == \'__main__\':\n    src = cv.imread("../images/CrystalLiu1.jpg")  # 读入图片放进src中\n    cv.namedWindow("Crystal Liu")  # 创建窗口\n    cv.imshow("Crystal Liu", src)  # 将src图片放入该创建的窗口中\n    hist2d_demo(src)\n    # back_projection_demo()\n\n    cv.waitKey(0) # 等有键输入或者1000ms后自动将窗口消除，0表示只用键输入结束窗口\n    cv.destroyAllWindows()  # 关闭所有窗口\n```', 'title': 'opencv python：图像直方图 histogram', 'categories': ['[随笔分类]OpenCV~Python', '[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12241569.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12241569.html', 'postid': '12241569', 'source': {}, 'userid': '-2'}