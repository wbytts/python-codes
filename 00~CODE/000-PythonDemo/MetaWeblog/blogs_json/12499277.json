{'dateCreated': <DateTime '20200315T18:46:00' at 0x1a4f254bdc8>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# EventTarget 接口\n\n事件的本质是程序各个组成部分之间的一种通信方式，也是异步编程的一种实现。DOM 支持大量的事件，本章开始介绍 DOM 的事件编程。\n\n## 概述\n\nDOM 的事件操作（监听和触发），都定义在`EventTarget`接口。所有节点对象都部署了这个接口，其他一些需要事件通信的浏览器内置对象（比如，`XMLHttpRequest`、`AudioNode`、`AudioContext`）也部署了这个接口。\n\n该接口主要提供三个实例方法。\n\n- `addEventListener`：绑定事件的监听函数\n- `removeEventListener`：移除事件的监听函数\n- `dispatchEvent`：触发事件\n\n## EventTarget.addEventListener()\n\n`EventTarget.addEventListener()`用于在当前节点或对象上，定义一个特定事件的监听函数。一旦这个事件发生，就会执行监听函数。该方法没有返回值。\n\n```javascript\ntarget.addEventListener(type, listener[, useCapture]);\n```\n\n该方法接受三个参数。\n\n- `type`：事件名称，大小写敏感。\n- `listener`：监听函数。事件发生时，会调用该监听函数。\n- `useCapture`：布尔值，表示监听函数是否在捕获阶段（capture）触发（参见后文《事件的传播》部分），默认为`false`（监听函数只在冒泡阶段被触发）。该参数可选。\n\n下面是一个例子。\n\n```javascript\nfunction hello() {\n  console.log(\'Hello world\');\n}\n\nvar button = document.getElementById(\'btn\');\nbutton.addEventListener(\'click\', hello, false);\n```\n\n上面代码中，`button`节点的`addEventListener`方法绑定`click`事件的监听函数`hello`，该函数只在冒泡阶段触发。\n\n关于参数，有两个地方需要注意。\n\n首先，第二个参数除了监听函数，还可以是一个具有`handleEvent`方法的对象。\n\n```javascript\nbuttonElement.addEventListener(\'click\', {\n  handleEvent: function (event) {\n    console.log(\'click\');\n  }\n});\n```\n\n上面代码中，`addEventListener`方法的第二个参数，就是一个具有`handleEvent`方法的对象。\n\n其次，第三个参数除了布尔值`useCapture`，还可以是一个属性配置对象。该对象有以下属性。\n\n> - `capture`：布尔值，表示该事件是否在`捕获阶段`触发监听函数。\n> - `once`：布尔值，表示监听函数是否只触发一次，然后就自动移除。\n> - `passive`：布尔值，表示监听函数不会调用事件的`preventDefault`方法。如果监听函数调用了，浏览器将忽略这个要求，并在监控台输出一行警告。\n\n如果希望事件监听函数只执行一次，可以打开属性配置对象的`once`属性。\n\n```javascript\nelement.addEventListener(\'click\', function (event) {\n  // 只执行一次的代码\n}, {once: true});\n```\n\n`addEventListener`方法可以为针对当前对象的同一个事件，添加多个不同的监听函数。这些函数按照添加顺序触发，即先添加先触发。如果为同一个事件多次添加同一个监听函数，该函数只会执行一次，多余的添加将自动被去除（不必使用`removeEventListener`方法手动去除）。\n\n```javascript\nfunction hello() {\n  console.log(\'Hello world\');\n}\n\ndocument.addEventListener(\'click\', hello, false);\ndocument.addEventListener(\'click\', hello, false);\n```\n\n执行上面代码，点击文档只会输出一行`Hello world`。\n\n如果希望向监听函数传递参数，可以用匿名函数包装一下监听函数。\n\n```javascript\nfunction print(x) {\n  console.log(x);\n}\n\nvar el = document.getElementById(\'div1\');\nel.addEventListener(\'click\', function () { print(\'Hello\'); }, false);\n```\n\n上面代码通过匿名函数，向监听函数`print`传递了一个参数。\n\n监听函数内部的`this`，指向当前事件所在的那个对象。\n\n```javascript\n// HTML 代码如下\n// <p id="para">Hello</p>\nvar para = document.getElementById(\'para\');\npara.addEventListener(\'click\', function (e) {\n  console.log(this.nodeName); // "P"\n}, false);\n```\n\n上面代码中，监听函数内部的`this`指向事件所在的对象`para`。\n\n## EventTarget.removeEventListener()\n\n`EventTarget.removeEventListener`方法用来移除`addEventListener`方法添加的事件监听函数。该方法没有返回值。\n\n```javascript\ndiv.addEventListener(\'click\', listener, false);\ndiv.removeEventListener(\'click\', listener, false);\n```\n\n`removeEventListener`方法的参数，与`addEventListener`方法完全一致。它的第一个参数“事件类型”，大小写敏感。\n\n注意，`removeEventListener`方法移除的监听函数，必须是`addEventListener`方法添加的那个监听函数，而且必须在同一个元素节点，否则无效。\n\n```javascript\ndiv.addEventListener(\'click\', function (e) {}, false);\ndiv.removeEventListener(\'click\', function (e) {}, false);\n```\n\n上面代码中，`removeEventListener`方法无效，因为监听函数不是同一个匿名函数。\n\n```javascript\nelement.addEventListener(\'mousedown\', handleMouseDown, true);\nelement.removeEventListener("mousedown", handleMouseDown, false);\n```\n\n上面代码中，`removeEventListener`方法也是无效的，因为第三个参数不一样。\n\n## EventTarget.dispatchEvent()\n\n`EventTarget.dispatchEvent`方法在当前节点上触发指定事件，从而触发监听函数的执行。该方法返回一个布尔值，只要有一个监听函数调用了`Event.preventDefault()`，则返回值为`false`，否则为`true`。\n\n```javascript\ntarget.dispatchEvent(event)\n```\n\n`dispatchEvent`方法的参数是一个`Event`对象的实例（详见《Event 对象》章节）。\n\n```javascript\npara.addEventListener(\'click\', hello, false);\nvar event = new Event(\'click\');\npara.dispatchEvent(event);\n```\n\n上面代码在当前节点触发了`click`事件。\n\n如果`dispatchEvent`方法的参数为空，或者不是一个有效的事件对象，将报错。\n\n下面代码根据`dispatchEvent`方法的返回值，判断事件是否被取消了。\n\n```javascript\nvar canceled = !cb.dispatchEvent(event);\nif (canceled) {\n  console.log(\'事件取消\');\n} else {\n  console.log(\'事件未取消\');\n}\n```', 'title': 'javascript：EventTarget 接口', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12499277.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12499277.html', 'postid': '12499277', 'source': {}, 'userid': '-2'}