{'dateCreated': <DateTime '20191116T14:43:00' at 0x1a4f2a3d108>, 'description': '## 简介\n\n使用SpringBoot；\n1）、创建SpringBoot应用，选中我们需要的模块；\n2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来\n3）、自己编写业务代码；\n\n**自动配置原理？**\n这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx\n```\nxxxxAutoConfiguration：帮我们给容器中自动配置组件；\nxxxxProperties:配置类来封装配置文件的内容；\n```\n\n## SpringBoot对静态资源的映射规则\n\n```java\n@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)\npublic class ResourceProperties implements ResourceLoaderAware {\n  //可以设置和静态资源有关的参数，缓存时间等\n```\n```java\n\tWebMvcAuotConfiguration：\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug("Default resource handling disabled");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tInteger cachePeriod = this.resourceProperties.getCachePeriod();\n\t\t\tif (!registry.hasMappingForPattern("/webjars/**")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler("/webjars/**")\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\t"classpath:/META-INF/resources/webjars/")\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n          \t//静态资源文件夹映射\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(\n\t\t\t\t\t\tregistry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t\t\t.addResourceLocations(\n\t\t\t\t\t\t\t\t\t\tthis.resourceProperties.getStaticLocations())\n\t\t\t\t\t\t.setCachePeriod(cachePeriod));\n\t\t\t}\n\t\t}\n\n        //配置欢迎页映射\n\t\t@Bean\n\t\tpublic WelcomePageHandlerMapping welcomePageHandlerMapping(\n\t\t\t\tResourceProperties resourceProperties) {\n\t\t\treturn new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),\n\t\t\t\t\tthis.mvcProperties.getStaticPathPattern());\n\t\t}\n\n       //配置喜欢的图标\n\t\t@Configuration\n\t\t@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)\n\t\tpublic static class FaviconConfiguration {\n\n\t\t\tprivate final ResourceProperties resourceProperties;\n\n\t\t\tpublic FaviconConfiguration(ResourceProperties resourceProperties) {\n\t\t\t\tthis.resourceProperties = resourceProperties;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic SimpleUrlHandlerMapping faviconHandlerMapping() {\n\t\t\t\tSimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n\t\t\t\tmapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\n              \t//所有  **/favicon.ico \n\t\t\t\tmapping.setUrlMap(Collections.singletonMap("**/favicon.ico",\n\t\t\t\t\t\tfaviconRequestHandler()));\n\t\t\t\treturn mapping;\n\t\t\t}\n\n\t\t\t@Bean\n\t\t\tpublic ResourceHttpRequestHandler faviconRequestHandler() {\n\t\t\t\tResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();\n\t\t\t\trequestHandler\n\t\t\t\t\t\t.setLocations(this.resourceProperties.getFaviconLocations());\n\t\t\t\treturn requestHandler;\n\t\t\t}\n\n\t\t}\n```\n\n==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==\nwebjars：以jar包的方式引入静态资源；  [http://www.webjars.org/](http://www.webjars.org/)\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116163652368-45603672.png)\n\nlocalhost:8080/webjars/jquery/3.3.1/jquery.js：\n```xml\n<!--引入jquery-webjar-->在访问的时候只需要写webjars下面资源的名称即可\n\t\t<dependency>\n\t\t\t<groupId>org.webjars</groupId>\n\t\t\t<artifactId>jquery</artifactId>\n\t\t\t<version>3.3.1</version>\n\t\t</dependency>\n```\n\n==2）、"/**" 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==\n```\n"classpath:/META-INF/resources/", \n"classpath:/resources/",\n"classpath:/static/", \n"classpath:/public/" \n"/"：当前项目的根路径\n```\n\nlocalhost:8080/abc ===  去静态资源文件夹里面找abc\n\n==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被"/**"映射；==\n\u200b\tlocalhost:8080/   找index页面\n\n==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==\n\n> 自己定义静态文件夹的路径：![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116171324450-75194738.png)\n> 自己定义了之后，默认的静态资源文件夹就不能使用了\n\n## JSON接口开发\n在以前的项目中，使用JSON接口需要：\n1. 添加 jackjson 等相关 jar 包\n2. 配置 Spring Controller 扫描\n3. 对接的方法添加 @ResponseBody\n\nSpring Boot只需要类添加 @RestController 即可，默认类中的方法都会以 json 的格式返回\n```java\n@RestController\npublic class HelloController {\n    @RequestMapping("/getUser")\n    public User getUser() {\n    \tUser user=new User();\n    \tuser.setUserName("小明");\n    \tuser.setPassWord("xxxx");\n        return user;\n    }\n}\n```\n如果需要使用页面开发只要使用@Controller注解即可\n\n## 自定义Filter\n我们常常在项目中会使用 filters 用于录调用日志、排除有 XSS 威胁的字符、执行权限验证等等。Spring Boot 自动添加了 OrderedCharacterEncodingFilter 和 HiddenHttpMethodFilter，并且我们可以自定义 Filter。\n两个步骤：\n* 实现 Filter 接口，实现 Filter 方法\n* 添加@Configuration 注解，将自定义Filter加入过滤链\n\n```java\n@Configuration\npublic class WebConfiguration {\n    @Bean\n    public RemoteIpFilter remoteIpFilter() {\n        return new RemoteIpFilter();\n    }\n    \n    @Bean\n    public FilterRegistrationBean testFilterRegistration() {\n\n        FilterRegistrationBean registration = new FilterRegistrationBean();\n        registration.setFilter(new MyFilter());\n        registration.addUrlPatterns("/*");\n        registration.addInitParameter("paramName", "paramValue");\n        registration.setName("MyFilter");\n        registration.setOrder(1);\n        return registration;\n    }\n    \n    public class MyFilter implements Filter {\n\t\t@Override\n\t\tpublic void destroy() {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n\n\t\t@Override\n\t\tpublic void doFilter(ServletRequest srequest, ServletResponse sresponse, FilterChain filterChain)\n\t\t\t\tthrows IOException, ServletException {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tHttpServletRequest request = (HttpServletRequest) srequest;\n\t\t\tSystem.out.println("this is MyFilter,url :"+request.getRequestURI());\n\t\t\tfilterChain.doFilter(srequest, sresponse);\n\t\t}\n\n\t\t@Override\n\t\tpublic void init(FilterConfig arg0) throws ServletException {\n\t\t\t// TODO Auto-generated method stub\n\t\t}\n    }\n}\n```\n\n## 自定义 Property\n1. 配置在 application.properties 中\n2. 自定义配置类\n```java\n@Component\npublic class NeoProperties {\n\t@Value("${com.neo.title}")\n\tprivate String title;\n\t@Value("${com.neo.description}")\n\tprivate String description;\n\n\t//省略getter settet方法\n\n\t}\n```\n\n## log配置\n\n```\nlogging.path=/user/local/log\nlogging.level.com.favorites=DEBUG\nlogging.level.org.springframework.web=INFO\nlogging.level.org.hibernate=ERROR\n```\npath 为本机的 log 地址，logging.level 后面可以根据包路径配置不同资源的 log 级别\n\n## 数据库操作\n\n添加 jar 包:\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n <dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n添加配置文件:\n```\nspring.datasource.url=jdbc:mysql://localhost:3306/test\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\nspring.jpa.properties.hibernate.hbm2ddl.auto=update\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect\nspring.jpa.show-sql= true\n```\n\n添加实体类和 Dao：\n```java\n@Entity\npublic class User implements Serializable {\n\n\tprivate static final long serialVersionUID = 1L;\n\t@Id\n\t@GeneratedValue\n\tprivate Long id;\n\t@Column(nullable = false, unique = true)\n\tprivate String userName;\n\t@Column(nullable = false)\n\tprivate String passWord;\n\t@Column(nullable = false, unique = true)\n\tprivate String email;\n\t@Column(nullable = true, unique = true)\n\tprivate String nickName;\n\t@Column(nullable = false)\n\tprivate String regTime;\n\n\t//省略getter settet方法、构造方法\n\n}\n```\ndao 只要继承 JpaRepository 类就可以，几乎可以不用写方法，\n可以根据方法名来自动的生成 SQL，比如findByUserName 会自动生成一个以 userName 为参数的查询方法，比如 findAlll 自动会查询表里面的所有数据，比如自动分页等等。\n\n**Entity 中不映射成列的字段得加 @Transient 注解，不加注解也会映射成列**\n\n```java\npublic interface UserRepository extends JpaRepository<User, Long> {\n    User findByUserName(String userName);\n    User findByUserNameOrEmail(String username, String email);\n}\n```\n\n测试：\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(Application.class)\npublic class UserRepositoryTests {\n\n\t@Autowired\n\tprivate UserRepository userRepository;\n\n\t@Test\n\tpublic void test() throws Exception {\n\t\tDate date = new Date();\n\t\tDateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);        \n\t\tString formattedDate = dateFormat.format(date);\n\t\t\n\t\tuserRepository.save(new User("aa1", "aa@126.com", "aa", "aa123456",formattedDate));\n\t\tuserRepository.save(new User("bb2", "bb@126.com", "bb", "bb123456",formattedDate));\n\t\tuserRepository.save(new User("cc3", "cc@126.com", "cc", "cc123456",formattedDate));\n\n\t\tAssert.assertEquals(9, userRepository.findAll().size());\n\t\tAssert.assertEquals("bb", userRepository.findByUserNameOrEmail("bb", "cc@126.com").getNickName());\n\t\tuserRepository.delete(userRepository.findByUserName("aa1"));\n\t}\n\n}\n```\n\nSpring Data Jpa 还有很多功能，比如封装好的分页，可以自己定义 SQL，主从分离等等\n\n## Thymeleaf 模板\n> Thymeleaf 是一款用于渲染 XML/XHTML/HTML5 内容的模板引擎。类似 JSP，Velocity，FreeMaker 等，它也可以轻易的与 Spring MVC 等 Web 框架进行集成作为 Web 应用的模板引擎。与其它模板引擎相比，Thymeleaf 最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个 Web 应用。\n\nThymeleaf 是与众不同的，因为它使用了自然的模板技术。这意味着 Thymeleaf 的模板语法并不会破坏文档的结构，模板依旧是有效的XML文档。模板还可以用作工作原型，Thymeleaf 会在运行期替换掉静态值。Velocity 与 FreeMarke r则是连续的文本处理器。 下面的代码示例分别使用 Velocity、FreeMarker 与 Thymeleaf 打印出一条消息：\n```html\nVelocity: <p>$message</p>\nFreeMarker: <p>${message}</p>\nThymeleaf: <p th:text="${message}">Hello World!</p>\n```\n**注意，由于 Thymeleaf 使用了 XML DOM 解析器，因此它并不适合于处理大规模的 XML 文件。**\n\n引入webjars：\n<link th:href="@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}" rel="stylesheet"></link>\n\n### 页面即原型\n\n在 Web 开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统 Java Web 开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类 Java IDE 中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。\n\n但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用 JSP，Velocity 等传统的 Java 模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而 Thymeleaf 从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如 JSP 中的 ，不会在 Tag 内部写表达式。整个页面直接作为 HTML 文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的 HTML/CSS/JavaScript 文件。\n\n### 引入Thymeleaf\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n切换thymeleaf版本\n<properties>\n\t<thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>\n\t<!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 -->\n\t<!-- thymeleaf2   layout1-->\n\t<thymeleaf-layout-dialect.version>2.2.2</thymeleaf-layout-dialect.version>\n  </properties>\n```\n### Thymeleaf使用\n```\n@ConfigurationProperties(prefix = "spring.thymeleaf")\npublic class ThymeleafProperties {\n\n\tprivate static final Charset DEFAULT_ENCODING = Charset.forName("UTF-8");\n\n\tprivate static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf("text/html");\n\n\tpublic static final String DEFAULT_PREFIX = "classpath:/templates/";\n\n\tpublic static final String DEFAULT_SUFFIX = ".html";\n  \t//\n```\n**只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；**\n\n1. 导入thymeleaf的名称空间\n```html\n<html lang="en" xmlns:th="http://www.thymeleaf.org">\n```\n2. 使用thymeleaf语法；\n```html\n<!DOCTYPE html>\n<html lang="en" xmlns:th="http://www.thymeleaf.org">\n<head>\n    <meta charset="UTF-8">\n    <title>Title</title>\n</head>\n<body>\n    <h1>成功！</h1>\n    <!--th:text 将div里面的文本内容设置为 -->\n    <div th:text="${hello}">这是显示欢迎信息</div>\n</body>\n</html>\n```', 'title': 'Springboot学习：Web开发介绍', 'categories': ['[随笔分类]Java~SpringBoot'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/11871772.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/11871772.html', 'postid': '11871772', 'source': {}, 'userid': '-2'}