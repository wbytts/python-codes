{'dateCreated': <DateTime '20200315T18:44:00' at 0x1a4f254e1c8>, 'description': "原文章：https://wangdoc.com/javascript/index.html\n# Mutation Observer API\n\n## 概述\n\nMutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。\n\n概念上，它很接近事件，可以理解为 DOM 发生变动就会触发 Mutation Observer 事件。但是，它与事件有一个本质不同：事件是同步触发，也就是说，DOM 的变动立刻会触发相应的事件；Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。\n\n这样设计是为了应付 DOM 变动频繁的特点。举例来说，如果文档中连续插入1000个`<p>`元素，就会连续触发1000个插入事件，执行每个事件的回调函数，这很可能造成浏览器的卡顿；而 Mutation Observer 完全不同，只在1000个段落都插入结束后才会触发，而且只触发一次。\n\nMutation Observer 有以下特点。\n\n- 它等待所有脚本任务完成后，才会运行（即异步触发方式）。\n- 它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。\n- 它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。\n\n## MutationObserver 构造函数\n\n使用时，首先使用`MutationObserver`构造函数，新建一个观察器实例，同时指定这个实例的回调函数。\n\n```javascript\nvar observer = new MutationObserver(callback);\n```\n\n上面代码中的回调函数，会在每次 DOM 变动后调用。该回调函数接受两个参数，第一个是变动数组，第二个是观察器实例，下面是一个例子。\n\n```javascript\nvar observer = new MutationObserver(function (mutations, observer) {\n  mutations.forEach(function(mutation) {\n    console.log(mutation);\n  });\n});\n```\n\n## MutationObserver 的实例方法\n\n### observe()\n\n`observe`方法用来启动监听，它接受两个参数。\n\n- 第一个参数：所要观察的 DOM 节点\n- 第二个参数：一个配置对象，指定所要观察的特定变动\n\n```javascript\nvar article = document.querySelector('article');\n\nvar  options = {\n  'childList': true,\n  'attributes':true\n} ;\n\nobserver.observe(article, options);\n```\n\n上面代码中，`observe`方法接受两个参数，第一个是所要观察的DOM元素是`article`，第二个是所要观察的变动类型（子节点变动和属性变动）。\n\n观察器所能观察的 DOM 变动类型（即上面代码的`options`对象），有以下几种。\n\n- **childList**：子节点的变动（指新增，删除或者更改）。\n- **attributes**：属性的变动。\n- **characterData**：节点内容或节点文本的变动。\n\n想要观察哪一种变动类型，就在`option`对象中指定它的值为`true`。需要注意的是，必须同时指定`childList`、`attributes`和`characterData`中的一种或多种，若未均指定将报错。\n\n除了变动类型，`options`对象还可以设定以下属性：\n\n- `subtree`：布尔值，表示是否将该观察器应用于该节点的所有后代节点。\n- `attributeOldValue`：布尔值，表示观察`attributes`变动时，是否需要记录变动前的属性值。\n- `characterDataOldValue`：布尔值，表示观察`characterData`变动时，是否需要记录变动前的值。\n- `attributeFilter`：数组，表示需要观察的特定属性（比如`['class','src']`）。\n\n```javascript\n// 开始监听文档根节点（即<html>标签）的变动\nmutationObserver.observe(document.documentElement, {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true,\n  attributeOldValue: true,\n  characterDataOldValue: true\n});\n```\n\n对一个节点添加观察器，就像使用`addEventListener`方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。如果指定不同的`options`对象，以后面添加的那个为准，类似覆盖。\n\n下面的例子是观察新增的子节点。\n\n```javascript\nvar insertedNodes = [];\nvar observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    for (var i = 0; i < mutation.addedNodes.length; i++) {\n      insertedNodes.push(mutation.addedNodes[i]);\n    }\n  });\n  console.log(insertedNodes);\n});\nobserver.observe(document, { childList: true, subtree: true });\n```\n\n### disconnect()，takeRecords（）\n\n`disconnect`方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。\n\n```javascript\nobserver.disconnect();\n```\n\n`takeRecords`方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。\n\n```javascript\nobserver.takeRecords();\n```\n\n下面是一个例子。\n\n```javascript\n// 保存所有没有被观察器处理的变动\nvar changes = mutationObserver.takeRecords();\n\n// 停止观察\nmutationObserver.disconnect();\n```\n\n## MutationRecord 对象\n\nDOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 处理的就是一个个`MutationRecord`实例所组成的数组。\n\n`MutationRecord`对象包含了DOM的相关信息，有如下属性：\n\n- `type`：观察的变动类型（`attributes`、`characterData`或者`childList`）。\n- `target`：发生变动的DOM节点。\n- `addedNodes`：新增的DOM节点。\n- `removedNodes`：删除的DOM节点。\n- `previousSibling`：前一个同级节点，如果没有则返回`null`。\n- `nextSibling`：下一个同级节点，如果没有则返回`null`。\n- `attributeName`：发生变动的属性。如果设置了`attributeFilter`，则只返回预先指定的属性。\n- `oldValue`：变动前的值。这个属性只对`attribute`和`characterData`变动有效，如果发生`childList`变动，则返回`null`。\n\n## 应用示例\n\n### 子元素的变动\n\n下面的例子说明如何读取变动记录。\n\n```javascript\nvar callback = function (records){\n  records.map(function(record){\n    console.log('Mutation type: ' + record.type);\n    console.log('Mutation target: ' + record.target);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar option = {\n  'childList': true,\n  'subtree': true\n};\n\nmo.observe(document.body, option);\n```\n\n上面代码的观察器，观察`<body>`的所有下级节点（`childList`表示观察子节点，`subtree`表示观察后代节点）的变动。回调函数会在控制台显示所有变动的类型和目标节点。\n\n### 属性的变动\n\n下面的例子说明如何追踪属性的变动。\n\n```javascript\nvar callback = function (records) {\n  records.map(function (record) {\n    console.log('Previous attribute value: ' + record.oldValue);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar element = document.getElementById('#my_element');\n\nvar options = {\n  'attributes': true,\n  'attributeOldValue': true\n}\n\nmo.observe(element, options);\n```\n\n上面代码先设定追踪属性变动（`'attributes': true`），然后设定记录变动前的值。实际发生变动时，会将变动前的值显示在控制台。\n\n### 取代 DOMContentLoaded 事件\n\n网页加载的时候，DOM 节点的生成会产生变动记录，因此只要观察 DOM 的变动，就能在第一时间触发相关事件，也就没有必要使用`DOMContentLoaded`事件。\n\n```javascript\nvar observer = new MutationObserver(callback);\nobserver.observe(document.documentElement, {\n  childList: true,\n  subtree: true\n});\n```\n\n上面代码中，监听`document.documentElement`（即网页的`<html>`HTML 节点）的子节点的变动，`subtree`属性指定监听还包括后代节点。因此，任意一个网页元素一旦生成，就能立刻被监听到。\n\n下面的代码，使用`MutationObserver`对象封装一个监听 DOM 生成的函数。\n\n```javascript\n(function(win){\n  'use strict';\n\n  var listeners = [];\n  var doc = win.document;\n  var MutationObserver = win.MutationObserver || win.WebKitMutationObserver;\n  var observer;\n\n  function ready(selector, fn){\n    // 储存选择器和回调函数\n    listeners.push({\n      selector: selector,\n      fn: fn\n    });\n    if(!observer){\n      // 监听document变化\n      observer = new MutationObserver(check);\n      observer.observe(doc.documentElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n    // 检查该节点是否已经在DOM中\n    check();\n  }\n\n  function check(){\n  // 检查是否匹配已储存的节点\n    for(var i = 0; i < listeners.length; i++){\n      var listener = listeners[i];\n      // 检查指定节点是否有匹配\n      var elements = doc.querySelectorAll(listener.selector);\n      for(var j = 0; j < elements.length; j++){\n        var element = elements[j];\n        // 确保回调函数只会对该元素调用一次\n        if(!element.ready){\n          element.ready = true;\n          // 对该节点调用回调函数\n          listener.fn.call(element, element);\n        }\n      }\n    }\n  }\n\n  // 对外暴露ready\n  win.ready = ready;\n\n})(this);\n\n// 使用方法\nready('.foo', function(element){\n  // ...\n});\n```\n\n## 参考链接\n\n- Paul Kinlan, [Detect DOM changes with Mutation Observers](https://developers.google.com/web/updates/2012/02/Detect-DOM-changes-with-Mutation-Observers)\n- Tiffany Brown, [Getting to know mutation observers](http://dev.opera.com/articles/view/mutation-observers-tutorial/)\n- Michal Budzynski, [JavaScript: The less known parts. DOM Mutations](http://michalbe.blogspot.com/2013/04/javascript-less-known-parts-dom.html)\n- Jeff Griffiths, [DOM MutationObserver – reacting to DOM changes without killing browser performance](https://hacks.mozilla.org/2012/05/dom-mutationobserver-reacting-to-dom-changes-without-killing-browser-performance/)\n- Addy Osmani, [Detect, Undo And Redo DOM Changes With Mutation Observers](http://addyosmani.com/blog/mutation-observers/)\n- Ryan Morr, [Using Mutation Observers to Watch for Element Availability](http://ryanmorr.com/using-mutation-observers-to-watch-for-element-availability/)", 'title': 'javascript：Mutation Observer API', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12499266.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12499266.html', 'postid': '12499266', 'source': {}, 'userid': '-2'}