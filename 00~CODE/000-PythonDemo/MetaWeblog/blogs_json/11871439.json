{'dateCreated': <DateTime '20191116T12:48:00' at 0x1a4f2a3d4c8>, 'description': '## 介绍\n\n市面上的日志框架：\nJUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j....\n\n| 日志门面  （日志的抽象层）                                   | 日志实现                                             |\n| ------------------------------------------------------------ | ---------------------------------------------------- |\n| ~~JCL（Jakarta  Commons Logging）~~    SLF4j（Simple  Logging Facade for Java）    **~~jboss-logging~~** | Log4j  JUL（java.util.logging）  Log4j2  **Logback** |\n\n左边选一个门面（抽象层）、右边来选一个实现；\n* 日志门面：  SLF4J；\n* 日志实现：Logback；\n\nSpringBoot：底层是Spring框架，Spring框架默认是用JCL；\n**==SpringBoot选用 SLF4j和logback；==**\n\n## SLF4j使用\n\n### 1.如何在系统中使用SLF4j   https://www.slf4j.org\n以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；\n\n给系统里面导入slf4j的jar和  logback的实现jar：\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWorld {\n  public static void main(String[] args) {\n    Logger logger = LoggerFactory.getLogger(HelloWorld.class);\n    logger.info("Hello World");\n  }\n}\n```  \n\n图示：\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116140446367-929615928.png)\n\n每一个日志的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架自己本身的配置文件；**\n\n### 遗留问题\na（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx\n统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116140617325-1038168852.png)\n\n**如何让系统中所有的日志都统一到slf4j；**\n==1、将系统中其他日志框架先排除出去；==\n==2、用中间包来替换原有的日志框架；==\n==3、我们导入slf4j其他的实现==\n\n### SpringBoot日志关系\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter</artifactId>\n</dependency>\n```\nSpringBoot使用它来做日志功能；\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-logging</artifactId>\n</dependency>\n```\n查看依赖关系：\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116143931986-1074047161.png)\n\n底层依赖关系：\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116140920707-1916101185.png)\n\n总结：\n\n\u200b1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录\n\u200b2）、SpringBoot也把其他的日志都替换成了slf4j；\n\u200b3）、中间替换包？\n```java\n@SuppressWarnings("rawtypes")\npublic abstract class LogFactory {\n\n    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = "http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j";\n\n    static LogFactory logFactory = new SLF4JLogFactory();\n```\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116141121975-387292949.png)\n4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？\n    Spring框架用的是commons-logging；\n```xml\n<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-core</artifactId>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>commons-logging</groupId>\n\t\t\t\t\t<artifactId>commons-logging</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n```\n**==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==**\n\n## 日志使用\n\n### 默认配置\nSpringBoot默认帮我们配置好了日志；\n```java\n\t//记录器\n\tLogger logger = LoggerFactory.getLogger(getClass());\n\t@Test\n\tpublic void contextLoads() {\n\t\t//System.out.println();\n\n\t\t//日志的级别；\n\t\t//由低到高   trace<debug<info<warn<error\n\t\t//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效\n\t\tlogger.trace("这是trace日志...");\n\t\tlogger.debug("这是debug日志...");\n\t\t//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别\n\t\tlogger.info("这是info日志...");\n\t\tlogger.warn("这是warn日志...");\n\t\tlogger.error("这是error日志...");\n\t}\n```\n\n```\n    日志输出格式：\n\t\t%d表示日期时间，\n\t\t%thread表示线程名，\n\t\t%-5level：级别从左显示5个字符宽度\n\t\t%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n\t\t%msg：日志消息，\n\t\t%n是换行符\n    -->\n    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n\n```\nSpringBoot修改日志的默认配置:\n```properties\nlogging.level.com.atguigu=trace\n\n\n#logging.path=\n# 不指定路径在当前项目下生成springboot.log日志\n# 可以指定完整的路径；\n#logging.file=G:/springboot.log\n\n# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用\xa0spring.log 作为默认文件\nlogging.path=/spring/log\n\n#  在控制台输出的日志的格式\nlogging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n\n# 指定文件中日志输出的格式\nlogging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n\n```\n| logging.file | logging.path | Example  | Description                        |\n| ------------ | ------------ | -------- | ---------------------------------- |\n| (none)       | (none)       |          | 只在控制台输出                     |\n| 指定文件名   | (none)       | my.log   | 输出日志到my.log文件               |\n| (none)       | 指定目录     | /var/log | 输出到指定目录的 spring.log 文件中 |\n\n### 指定配置\n\n给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了\n\n| Logging System          | Customization                                                |\n| ----------------------- | ------------------------------------------------------------ |\n| Logback                 | `logback-spring.xml`, `logback-spring.groovy`, `logback.xml` or `logback.groovy` |\n| Log4j2                  | `log4j2-spring.xml` or `log4j2.xml`                          |\n| JDK (Java Util Logging) | `logging.properties`                                         |\n\nlogback.xml：直接就被日志框架识别了；\n\n**logback-spring.xml**：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能\n```xml\n<springProfile name="staging">\n    <!-- configuration to be enabled when the "staging" profile is active -->\n  \t可以指定某段配置只在某个环境下生效\n</springProfile>\n```\n如：\n```xml\n<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">\n        <!--\n        日志输出格式：\n\t\t\t%d表示日期时间，\n\t\t\t%thread表示线程名，\n\t\t\t%-5level：级别从左显示5个字符宽度\n\t\t\t%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 \n\t\t\t%msg：日志消息，\n\t\t\t%n是换行符\n        -->\n        <layout class="ch.qos.logback.classic.PatternLayout">\n            <springProfile name="dev">\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>\n            </springProfile>\n            <springProfile name="!dev">\n                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n</pattern>\n            </springProfile>\n        </layout>\n    </appender>\n```\n如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误 `no applicable action for [springProfile]`\n\n## 切换日志框架\n可以按照slf4j的日志适配图，进行相关的切换；\nslf4j+log4j的方式；\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n  <exclusions>\n    <exclusion>\n      <artifactId>logback-classic</artifactId>\n      <groupId>ch.qos.logback</groupId>\n    </exclusion>\n    <exclusion>\n      <artifactId>log4j-over-slf4j</artifactId>\n      <groupId>org.slf4j</groupId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n</dependency>\n```\n\n切换为log4j2\n```xml\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-boot-starter-logging</artifactId>\n                    <groupId>org.springframework.boot</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n```', 'title': 'Springboot学习：日志', 'categories': ['[随笔分类]Java~SpringBoot'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/11871439.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/11871439.html', 'postid': '11871439', 'source': {}, 'userid': '-2'}