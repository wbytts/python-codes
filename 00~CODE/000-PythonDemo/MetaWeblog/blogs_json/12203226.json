{'dateCreated': <DateTime '20200116T20:55:00' at 0x1a4f29e4108>, 'description': "\nTim Peters 的 The Zen of python，希冀自己以后恪守规范，写出优雅简洁的代码。\n\n> Beautiful is better than ugly.\n优美胜于丑陋（Python 以编写优美的代码为目标）\nExplicit is better than implicit.\n明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）\nSimple is better than complex.\n简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）\nComplex is better than complicated.\n复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）\nFlat is better than nested.\n扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）\nSparse is better than dense.\n间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）\nReadability counts.\n可读性很重要（优美的代码是可读的）\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\n即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）\nErrors should never pass silently.\nUnless explicitly silenced.\n不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）\nIn the face of ambiguity, refuse the temptation to guess.\n当存在多种可能，不要尝试去猜测\nThere should be one-- and preferably only one --obvious way to do it.\n而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）\nAlthough that way may not be obvious at first unless you're Dutch.\n虽然这并不容易，因为你不是 Python 之父\nNow is better than never.\nAlthough never is often better than right now.\n做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\n如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）\nNamespaces are one honking great idea -- let's do more of those!\n命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）", 'title': 'Python之禅', 'categories': ['[随笔分类]Python~'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12203226.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12203226.html', 'postid': '12203226', 'source': {}, 'userid': '-2'}