{'dateCreated': <DateTime '20200120T17:28:00' at 0x1a4f29d3848>, 'description': "# if 语句\n\n```python\nif 条件:\n    ......\n    # 条件为真的时候，执行缩进的代码\n```\n\n```python\nif 条件:\n    ...... # 条件为真的时候执行\nelse:\n    ...... # 条件为假的时候执行\n```\n\n```python\nif 条件1:\n    ...... # 条件1 为真的时候执行\nelif 条件2:\n    ...... # 条件2 为真的时候执行\n...... # 可以写多个条件的 elif 判断\n\nelse: \n    ...... # 条件都为假的时候执行\n```\n\n# while 语句\n\n```python\nwhile 条件:\n    ......  # 当条件为真的时候，执行循环体代码\n```\n\n# pass\n\n如果判断体或者循环体内没有具体要执行的操作，可以使用 pass，当做代码题\n\npass可以用于各种地方，比如函数等\n\n\n# break 和 continue\n\nbreak：跳出整个循环，执行循环下面的语句\n\ncontinue：结束本次循环，进行下一次循环\n\n# 循环中的 else\n\n当和循环一起使用时，`else` 子句与 `try` 语句中的 `else` 子句的共同点多于 `if` 语句中的子句: `try` 语句中的 `else` 子句会在未发生异常时执行，而循环中的 `else` 子句则会在未发生 `break` 时执行。\n\n# for in 语句\n\n`for in` 主要用来遍历序列\n```python\nwords = ['cat', 'window', 'defenestrate']\nfor w in words:\n    print(w, len(w))\n```\n\n如果在循环内需要修改序列中的值（比如重复某些选中的元素），推荐你先拷贝一份副本。对序列进行循环不代表制作了一个副本进行操作。\n切片操作使这件事非常简单：\n```python\nfor w in words[:]:  # Loop over a slice copy of the entire list.\n    if len(w) > 6:\n        words.insert(0, w)\n```", 'title': 'python学习笔记：分支 与 循环', 'categories': ['[随笔分类]Python~语法'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12218783.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12218783.html', 'postid': '12218783', 'source': {}, 'userid': '-2'}