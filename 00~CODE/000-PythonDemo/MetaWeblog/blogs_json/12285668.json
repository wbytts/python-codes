{'dateCreated': <DateTime '20200208T23:24:00' at 0x1a4f2587208>, 'description': '新建的Activity类可以继承这个Activity，这个类封装了关于新版的权限处理相关的代码\n使用方法：\n![](https://img2018.cnblogs.com/blog/1446249/202002/1446249-20200208233525180-495034445.png)\n\n\n```java\npackage com.glsite.phone;\n\nimport android.content.DialogInterface;\nimport android.content.pm.PackageManager;\nimport android.os.Build;\nimport android.support.annotation.NonNull;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v7.app.AlertDialog;\nimport android.support.v7.app.AppCompatActivity;\nimport android.widget.Toast;\n\n/**\n * @author Admin\n * @version $Rev$\n * @des ${TODO}\n * @updateAuthor $Author$\n * @updateDes ${TODO}\n */\npublic class BaseActivity extends AppCompatActivity {\n    //**************** Android M Permission (Android 6.0权限控制代码封装)\n    private int permissionRequestCode = 88;\n    private PermissionCallback permissionRunnable;\n\n    public interface PermissionCallback {\n        void hasPermission();\n\n        void noPermission();\n    }\n\n    /**\n     * Android M运行时权限请求封装\n     *\n     * @param permissionDes 权限描述\n     * @param runnable      请求权限回调\n     * @param permissions   请求的权限（数组类型），直接从Manifest中读取相应的值，比如Manifest.permission.WRITE_CONTACTS\n     */\n    public void performCodeWithPermission(@NonNull String permissionDes, PermissionCallback runnable, @NonNull String... permissions) {\n        if (permissions == null || permissions.length == 0)\n            return;\n        //        this.permissionrequestCode = requestCode;\n        this.permissionRunnable = runnable;\n        if ((Build.VERSION.SDK_INT < Build.VERSION_CODES.M) || checkPermissionGranted(permissions)) {\n            if (permissionRunnable != null) {\n                permissionRunnable.hasPermission();\n                permissionRunnable = null;\n            }\n        } else {\n            //permission has not been granted.\n            requestPermission(permissionDes, permissionRequestCode, permissions);\n        }\n\n    }\n\n    private boolean checkPermissionGranted(String[] permissions) {\n        boolean flag = true;\n        for (String p : permissions) {\n            if (ActivityCompat.checkSelfPermission(this, p) != PackageManager.PERMISSION_GRANTED) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n    }\n\n    private void requestPermission(String permissionDes, final int requestCode, final String[] permissions) {\n        if (shouldShowRequestPermissionRationale(permissions)) {\n            /*1. 第一次请求权限时，用户拒绝了，下一次：shouldShowRequestPermissionRationale()  返回 true，应该显示一些为什么需要这个权限的说明\n            2.第二次请求权限时，用户拒绝了，并选择了“不在提醒”的选项时：shouldShowRequestPermissionRationale()  返回 false\n            3. 设备的策略禁止当前应用获取这个权限的授权：shouldShowRequestPermissionRationale()  返回 false*/\n            // Provide an additional rationale to the user if the permission was not granted\n            // and the user would benefit from additional context for the use of the permission.\n            // For example, if the request has been denied previously.\n\n            //            Snackbar.make(getWindow().getDecorView(), requestName,\n            //                    Snackbar.LENGTH_INDEFINITE)\n            //                    .setAction(R.string.common_ok, new View.OnClickListener() {\n            //                        @Override\n            //                        public void onClick(View view) {\n            //                            ActivityCompat.requestPermissions(BaseAppCompatActivity.this,\n            //                                    permissions,\n            //                                    requestCode);\n            //                        }\n            //                    })\n            //                    .show();\n            //如果用户之前拒绝过此权限，再提示一次准备授权相关权限\n            new AlertDialog.Builder(this)\n                    .setTitle("提示")\n                    .setMessage(permissionDes)\n                    .setPositiveButton("授权", new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialog, int which) {\n                            ActivityCompat.requestPermissions(BaseActivity.this, permissions, requestCode);\n                        }\n                    }).show();\n\n        } else {\n            // Contact permissions have not been granted yet. Request them directly.\n            ActivityCompat.requestPermissions(BaseActivity.this, permissions, requestCode);\n        }\n    }\n\n    private boolean shouldShowRequestPermissionRationale(String[] permissions) {\n        boolean flag = false;\n        for (String p : permissions) {\n            if (ActivityCompat.shouldShowRequestPermissionRationale(this, p)) {\n                flag = true;\n                break;\n            }\n        }\n        return flag;\n    }\n\n    /**\n     * Callback received when a permissions request has been completed.\n     */\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,\n                                           @NonNull int[] grantResults) {\n        if (requestCode == permissionRequestCode) {\n            if (verifyPermissions(grantResults)) {\n                if (permissionRunnable != null) {\n                    permissionRunnable.hasPermission();\n                    permissionRunnable = null;\n                }\n            } else {\n                Toast.makeText(this, "暂无权限执行相关操作！", Toast.LENGTH_SHORT).show();\n                if (permissionRunnable != null) {\n                    permissionRunnable.noPermission();\n                    permissionRunnable = null;\n                }\n            }\n        } else {\n            super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n        }\n\n    }\n\n    public boolean verifyPermissions(int[] grantResults) {\n        // At least one result must be checked.\n        if (grantResults.length < 1) {\n            return false;\n        }\n\n        // Verify that each required permission has been granted, otherwise return false.\n        for (int result : grantResults) {\n            if (result != PackageManager.PERMISSION_GRANTED) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //********************** END Android M Permission ****************************************\n}\n```', 'title': 'android：Android 6.0+  权限控制代码封装', 'categories': ['[随笔分类]Android~'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12285668.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12285668.html', 'postid': '12285668', 'source': {}, 'userid': '-2'}