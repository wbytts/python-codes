{'dateCreated': <DateTime '20200131T20:12:00' at 0x1a4f29949c8>, 'description': '\n```c++\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n    Mat src = imread("f:/images/butterfly.jpg");\n    if (src.empty())\n    {\n        printf("Could not find the image!\\n");\n        return -1;\n    }\n\n    namedWindow("input", WINDOW_AUTOSIZE);\n    imshow("input", src);\n    \n    vector<Mat> mv;\n    split(src, mv);\n\n    // 计算直方图\n    int histSize = 256;\n    float range[] = { 0, 255 };\n    const float* histRanges = { range };\n    Mat b_hist, g_hist, r_hist;\n    calcHist(&mv[0], 1, 0, Mat(), b_hist, 1, &histSize, &histRanges, true, false);\n    calcHist(&mv[1], 1, 0, Mat(), g_hist, 1, &histSize, &histRanges, true, false);\n    calcHist(&mv[2], 1, 0, Mat(), r_hist, 1, &histSize, &histRanges, true, false);\n\n    Mat result = Mat::zeros(Size(600, 400), CV_8UC3);\n    int margin = 50;\n    int maxValue = result.rows - 2 * margin;\n    // 归一化\n    normalize(b_hist, b_hist, 0, maxValue, NORM_MINMAX, -1, Mat());\n    normalize(g_hist, g_hist, 0, maxValue, NORM_MINMAX, -1, Mat());\n    normalize(r_hist, r_hist, 0, maxValue, NORM_MINMAX, -1, Mat());\n\n    float step = 500.0 / 256.0;\n    // 绘制直方图\n    for (int i = 0; i < 255; i++) {\n        float bh1 = b_hist.at<float>(i, 0);\n        float gh1 = g_hist.at<float>(i, 0);\n        float rh1 = r_hist.at<float>(i, 0);\n\n        float bh2 = b_hist.at<float>(i + 1, 0);\n        float gh2 = g_hist.at<float>(i + 1, 0);\n        float rh2 = r_hist.at<float>(i + 1, 0);\n\n        line(result, \n            Point(step * i + margin, maxValue + 50 - bh1),\n            Point(step * (i + 1) + margin, maxValue + 50 - bh2),\n            Scalar(255, 0, 0), 1, 8, 0);\n        line(result, \n            Point(step * i + margin, maxValue + 50 - gh1),\n            Point(step * (i + 1) + margin, maxValue + 50 - gh2),\n            Scalar(0, 255, 0), 1, 8, 0);\n        line(result, \n            Point(step * i + margin, maxValue + 50 - rh1),\n            Point(step * (i + 1) + margin, maxValue + 50 - rh2),\n            Scalar(0, 0, 255), 1, 8, 0);\n    }\n\n    imshow("result", result);\n\n    waitKey(0);\n    destroyAllWindows();\n}\n```\n\n函数抽取：\n```c++\nvoid show_hist(string name, Mat src) {\n    vector<Mat> mv;\n    split(src, mv);\n\n    // 计算直方图\n    int histSize = 256;\n    float range[] = { 0, 255 };\n    const float* histRanges = { range };\n    Mat b_hist, g_hist, r_hist;\n    calcHist(&mv[0], 1, 0, Mat(), b_hist, 1, &histSize, &histRanges, true, false);\n    calcHist(&mv[1], 1, 0, Mat(), g_hist, 1, &histSize, &histRanges, true, false);\n    calcHist(&mv[2], 1, 0, Mat(), r_hist, 1, &histSize, &histRanges, true, false);\n\n    Mat result = Mat::zeros(Size(600, 400), CV_8UC3);\n    int margin = 50;\n    int maxValue = result.rows - 2 * margin;\n    // 归一化\n    normalize(b_hist, b_hist, 0, maxValue, NORM_MINMAX, -1, Mat());\n    normalize(g_hist, g_hist, 0, maxValue, NORM_MINMAX, -1, Mat());\n    normalize(r_hist, r_hist, 0, maxValue, NORM_MINMAX, -1, Mat());\n\n    float step = 500.0 / 256.0;\n    // 绘制直方图\n    for (int i = 0; i < 255; i++) {\n        float bh1 = b_hist.at<float>(i, 0);\n        float gh1 = g_hist.at<float>(i, 0);\n        float rh1 = r_hist.at<float>(i, 0);\n\n        float bh2 = b_hist.at<float>(i + 1, 0);\n        float gh2 = g_hist.at<float>(i + 1, 0);\n        float rh2 = r_hist.at<float>(i + 1, 0);\n\n        line(result,\n            Point(step * i + margin, maxValue + 50 - bh1),\n            Point(step * (i + 1) + margin, maxValue + 50 - bh2),\n            Scalar(255, 0, 0), 1, 8, 0);\n        line(result,\n            Point(step * i + margin, maxValue + 50 - gh1),\n            Point(step * (i + 1) + margin, maxValue + 50 - gh2),\n            Scalar(0, 255, 0), 1, 8, 0);\n        line(result,\n            Point(step * i + margin, maxValue + 50 - rh1),\n            Point(step * (i + 1) + margin, maxValue + 50 - rh2),\n            Scalar(0, 0, 255), 1, 8, 0);\n    }\n\n    imshow(name, result);\n}\n```', 'title': 'opencv：绘制图像直方图', 'categories': ['[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12246548.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12246548.html', 'postid': '12246548', 'source': {}, 'userid': '-2'}