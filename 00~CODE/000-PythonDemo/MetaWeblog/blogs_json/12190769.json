{'dateCreated': <DateTime '20200114T10:40:00' at 0x1a4f29ea348>, 'description': '转自：https://www.cnblogs.com/niaonao/p/12190602.html\n\n团队开发时，业务模块分配的越清晰，代码注释管理越完善，越有利于后面维护，后面再管理也方便不少。另外也起着"文字砖"的作用，你懂的。注释不需要很详细，把代码块方法块功能简述一下就行。不然三月后回头看就要骂人了，骂完发现是自己写的，啧啧啧...\n\n# 三种常用的 Java 注释方式\n\n```java\n// 声明常量\nint number;\n```\n\n```java\n/*\n * 类主函数\n */\npublic static void main(String[] args) {\n}\n```\n\n```java\n    /**\n     * @param masterId  品牌商Id\n     * @param shopId    店铺Id\n     * @param skuId     商品skuId\n     * @description: 校验商品标识码与店铺的所属关系\n     * @return: net.jdcloud.APIECRM.model.ValidateSkuUsingGETResponse\n     * @author: niaonao\n     * @date: 2020/01/13\n     */\n    public static ValidateSkuUsingGETResponse validateSkuUsing(String masterId, String shopId, String skuId){\n        return null;\n    }\n```\n\n# 自定义注释模板\n\n## 类注释模板\n\n菜单路径 File-Settings-Editor-File and Code Templates-Incudes-File Header 下添加注释模板，配置模板后点击 Apply OK 应用。\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200114103453771-8820779.png)\n\n自定义注释模板\n\n```\n/**\n * @className: ${NAME}\n * @description: TODO 类描述 \n * @author: niaonao\n * @date:  ${DATE}\n **/\n```\n\n```\n/**\n * @className: CrowdService\n * @description: 人群对象业务\n * @author: niaonao\n * @date: 2020/1/13\n **/\npublic interface CrowdService {\n}\n```\n\n自定义注释模板不完全变量参考表\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200114103809962-2017570573.png)\n\n## 方法注释模板\n\n菜单路径 File-Settings-Editor-Live Templates 下添加一个新模板组，名字自定义 JavaTemplateGroup。选中模板组，右侧点击新增按钮，创建新模板。\n\nAbbreviation 配置为`*` 。\nDescription 自定义描述信息。\nTemplate Text 自定义模板\n```\n*\n $param$\n * @description: TODO\n * @return: $return$\n * @author: niaonao\n * @date: $date$\n */\n```\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200114103848654-225865674.png)\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200114103852855-1667072562.png)\n\nEdit variables 编辑变量\n\n变量 return 表达式为 methodReturnType()\n变量 date 表达式为 date()\n变量 param 表达式为\n\n```\ngroovyScript("def result=\'\'; def params=\\"${_1}\\".replaceAll(\'[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]\', \'\').split(\',\').toList(); for(i = 0; i < params.size(); i++) {result+=\'* @param: \' + params[i] + ((i < params.size() - 1) ? \'\\\\n \' : \'\')};return result", methodParameters())\n```\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200114103917895-474810485.png)\n\n若有警告信息 No Applicable contexts，点击 Define 选中 Java 即可。\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200114103930221-7733533.png)\n\n\n此处 Expend With 配置为 Enter 回车键，注释生成快捷方式，看个人习惯，也可以时 Tab 键。\n\n点击 Apply OK 应用配置即可。效果如下\n\n```java\n    /**\n     * @param: masterId\n     * @param: shopId\n     * @param: skuId\n     * @description: TODO\n     * @return: net.jdcloud.APIECRM.model.ValidateSkuUsingGETResponse\n     * @author: niaonao\n     * @date: 2020/1/13\n     */\n    public static ValidateSkuUsingGETResponse validateSkuUsing(String masterId, String shopId, String skuId) {\n        return null;\n    }\n```\n\n方法注释模板不可用在，方法外，若用在方法外 @param 获取不到，注释为 @param null;\n\n类注释模板在文件创建时生成，已创建文件不会触发该模板，会触发方法注释模板。', 'title': '代码注释规范-IDEA 配置 Java 类方法注释模板', 'categories': ['[随笔分类]工具~JetBrains'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12190769.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12190769.html', 'postid': '12190769', 'source': {}, 'userid': '-2'}