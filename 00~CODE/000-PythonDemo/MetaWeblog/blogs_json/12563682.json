{'dateCreated': <DateTime '20200325T05:24:00' at 0x1a4f252e648>, 'description': '官方的pom\n```xml\n<dependency>  \n    <groupId>com.google.code.kaptcha</groupId>  \n    <artifactId>kaptcha</artifactId>  \n    <version>2.3.2</version>  \n</dependency>\n```\n\n阿里的maven仓库pom\n```xml\n<dependency>  \n    <groupId>com.github.penggle</groupId>  \n    <artifactId>kaptcha</artifactId>  \n    <version>2.3.2</version>  \n</dependency>\n```\n\n控制验证码的图片的生成的规则的配置信息都放到了com.google.code.kaptcha.util.Config类中\n```java\npackage com.google.code.kaptcha.util;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.util.Properties;\n\nimport com.google.code.kaptcha.BackgroundProducer;\nimport com.google.code.kaptcha.GimpyEngine;\nimport com.google.code.kaptcha.NoiseProducer;\nimport com.google.code.kaptcha.Producer;\nimport com.google.code.kaptcha.impl.DefaultBackground;\nimport com.google.code.kaptcha.impl.DefaultKaptcha;\nimport com.google.code.kaptcha.impl.DefaultNoise;\nimport com.google.code.kaptcha.impl.WaterRipple;\nimport com.google.code.kaptcha.text.TextProducer;\nimport com.google.code.kaptcha.text.WordRenderer;\nimport com.google.code.kaptcha.text.impl.DefaultTextCreator;\nimport com.google.code.kaptcha.text.impl.DefaultWordRenderer;\nimport com.google.code.kaptcha.util.ConfigHelper;\n\npublic class Config\n{\n  private Properties properties;\n  private ConfigHelper helper;\n  \n  public Config(Properties properties)\n  {\n    this.properties = properties;\n    this.helper = new ConfigHelper();\n  }\n  \n  /**\n   * 设置图片是否有边框\n   * @return\n   */\n  public boolean isBorderDrawn()\n  {\n    String paramName = "kaptcha.border";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getBoolean(paramName, paramValue, true);\n  }\n  \n  /**\n   * 边框颜色   合法值： r,g,b (and optional alpha) 或者 white,black,blue.\n   * @return\n   */\n  public Color getBorderColor()\n  {\n    String paramName = "kaptcha.border.color";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getColor(paramName, paramValue, Color.BLACK);\n  }\n  \n  /**\n   * 边框厚度  合法值：>0\n   * @return\n   */\n  public int getBorderThickness()\n  {\n    String paramName = "kaptcha.border.thickness";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getPositiveInt(paramName, paramValue, 1);\n  }\n  \n  /**\n   * 文本集合，验证码值从此集合中获取\n   * @return\n   */\n  public char[] getTextProducerCharString()\n  {\n    String paramName = "kaptcha.textproducer.char.string";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getChars(paramName, paramValue, "abcde2345678gfynmnpwx".toCharArray());\n  }\n  \n  /**\n   * 验证码长度\n   * @return\n   */\n  public int getTextProducerCharLength()\n  {\n    String paramName = "kaptcha.textproducer.char.length";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getPositiveInt(paramName, paramValue, 5);\n  }\n  \n  /**\n   * 字体类型\n   * @param fontSize 见Font中的定义\n   * @return\n   */\n  public Font[] getTextProducerFonts(int fontSize)\n  {\n    String paramName = "kaptcha.textproducer.font.names";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getFonts(paramName, paramValue, fontSize, new Font[] { new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize) });\n  }\n  \n  /**\n   * 字体大小\n   * @return\n   */\n  public int getTextProducerFontSize()\n  {\n    String paramName = "kaptcha.textproducer.font.size";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getPositiveInt(paramName, paramValue, 40);\n  }\n  \n  /**\n   * 字体颜色  rgb颜色或者Color中的值\n   * @return\n   */\n  public Color getTextProducerFontColor()\n  {\n    String paramName = "kaptcha.textproducer.font.color";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getColor(paramName, paramValue, Color.BLACK);\n  }\n  \n  /**\n   * 干扰线的颜色\n   * @return\n   */\n  public Color getNoiseColor()\n  {\n    String paramName = "kaptcha.noise.color";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getColor(paramName, paramValue, Color.BLACK);\n  }\n    \n  /**\n   * 背景颜色渐变色开始色  rgb或者Color中定义的\n   * @return\n   */\n  public Color getBackgroundColorFrom()\n  {\n    String paramName = "kaptcha.background.clear.from";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getColor(paramName, paramValue, Color.LIGHT_GRAY);\n  }\n  \n  /**\n   * 背景颜色渐变色结束色   rgb或者Color中定义的\n   * @return\n   */\n  public Color getBackgroundColorTo()\n  {\n    String paramName = "kaptcha.background.clear.to";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getColor(paramName, paramValue, Color.WHITE);\n  }\n  \n  /**\n   * 图片的宽度\n   * @return\n   */\n  public int getWidth()\n  {\n    String paramName = "kaptcha.image.width";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getPositiveInt(paramName, paramValue, 200);\n  }\n  \n  /**\n   * 图片的高度\n   * @return\n   */\n  public int getHeight()\n  {\n    String paramName = "kaptcha.image.height";\n    String paramValue = this.properties.getProperty(paramName);\n    return this.helper.getPositiveInt(paramName, paramValue, 50);\n  }\n  \n  /**\n   * 图片的session key\n   * @return\n   */\n  public String getSessionKey()\n  {\n    return this.properties.getProperty("kaptcha.session.key", "KAPTCHA_SESSION_KEY");\n  }\n  \n  public Properties getProperties()\n  {\n    return this.properties;\n  }\n  \n  /**\n   * 生成默认的图片生产者实现\n   * @return\n   */\n  public Producer getProducerImpl()\n  {\n    String paramName = "kaptcha.producer.impl";\n    String paramValue = this.properties.getProperty(paramName);\n    Producer producer = (Producer)this.helper.getClassInstance(paramName, paramValue, new DefaultKaptcha(), this);\n    return producer;\n  }\n  \n  /**\n   * 生成默认的验证码文字生产者实现\n   * @return\n   */\n  public TextProducer getTextProducerImpl()\n  {\n    String paramName = "kaptcha.textproducer.impl";\n    String paramValue = this.properties.getProperty(paramName);\n    TextProducer textProducer = (TextProducer)this.helper.getClassInstance(paramName, paramValue, new DefaultTextCreator(), this);\n    \n    return textProducer;\n  }\n  \n  /**\n   * 文字干扰实现类，默认DefaultNoise，还可以选择com.google.code.kaptcha.impl.NoNoise没有干扰线的实现类\n   * @return\n   */\n  public NoiseProducer getNoiseImpl()\n  {\n      String paramName = "kaptcha.noise.impl";\n      String paramValue = this.properties.getProperty(paramName);\n      NoiseProducer noiseProducer = (NoiseProducer)this.helper.getClassInstance(paramName, paramValue, new DefaultNoise(), this);\n      \n      return noiseProducer;\n  }\n  \n  /**\n   * 图片样式的实现类，默认WaterRipple（水纹），还有下面2种可选\n   * 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy    阴影com.google.code.kaptcha.impl.ShadowGimpy\n   * \n   * @return\n   */\n  public GimpyEngine getObscurificatorImpl()\n  {\n    String paramName = "kaptcha.obscurificator.impl";\n    String paramValue = this.properties.getProperty(paramName);\n    GimpyEngine gimpyEngine = (GimpyEngine)this.helper.getClassInstance(paramName, paramValue, new WaterRipple(), this);\n    return gimpyEngine;\n  }\n  \n  /**\n   * 文字渲染实现类，默认DefaultWordRenderer，也只有这一个默认的实现类\n   * @return\n   */\n  public WordRenderer getWordRendererImpl()\n  {\n    String paramName = "kaptcha.word.impl";\n    String paramValue = this.properties.getProperty(paramName);\n    WordRenderer wordRenderer = (WordRenderer)this.helper.getClassInstance(paramName, paramValue, new DefaultWordRenderer(), this);\n    \n    return wordRenderer;\n  }\n  \n  /**\n   * 背景图片实现类，默认DefaultBackground，也只有这一个默认实现类\n   * @return\n   */\n  public BackgroundProducer getBackgroundImpl()\n  {\n    String paramName = "kaptcha.background.impl";\n    String paramValue = this.properties.getProperty(paramName);\n    BackgroundProducer backgroundProducer = (BackgroundProducer)this.helper.getClassInstance(paramName, paramValue, new DefaultBackground(), this);\n    \n    return backgroundProducer;\n  }\n}\n```\n\nspring bean的配置\n```xml\n<!-- google kaptcha的相关配置-->\n    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  \n        <property name="config">  \n            <bean class="com.google.code.kaptcha.util.Config">  \n                <constructor-arg>  \n                    <props> \n                        <!-- 是否有边框 可选yes 或者 no --> \n                        <prop key="kaptcha.border">yes</prop>  \n                        <!-- 边框颜色 -->\n                        <prop key="kaptcha.border.color">105,179,90</prop>  \n                        <!-- 验证码文本字符颜色 -->\n                        <prop key="kaptcha.textproducer.font.color">blue</prop>  \n                        <!-- 验证码文本字符大小 -->\n                        <prop key="kaptcha.textproducer.font.size">45</prop>  \n                        <!-- 验证码图片的宽度 默认200 -->\n                        <prop key="kaptcha.image.width">125</prop>  \n                        <!-- 验证码图片的高度 默认50 -->\n                        <prop key="kaptcha.image.height">45</prop>  \n                        <!-- 验证码文本字符长度  默认为5 -->\n                        <prop key="kaptcha.textproducer.char.length">4</prop>  \n                        <!-- 验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)  -->\n                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  \n                    </props>  \n                </constructor-arg>  \n            </bean>  \n        </property>  \n    </bean>\n```\n\nspringboot使用配置\n```java\nimport java.util.Properties;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.google.code.kaptcha.Producer;\nimport com.google.code.kaptcha.util.Config;\n\n@Configuration\npublic class KaptchaConfig {\n\n    @Bean\n    public Producer KaptchaProducer() {\n        Properties kaptchaProperties = new Properties();\n        kaptchaProperties.put("kaptcha.border", "no");\n        kaptchaProperties.put("kaptcha.textproducer.char.length","4");\n        kaptchaProperties.put("kaptcha.image.height","50");\n        kaptchaProperties.put("kaptcha.image.width","150");\n        kaptchaProperties.put("kaptcha.obscurificator.impl","com.google.code.kaptcha.impl.ShadowGimpy");\n        kaptchaProperties.put("kaptcha.textproducer.font.color","black");\n        kaptchaProperties.put("kaptcha.textproducer.font.size","40");\n        kaptchaProperties.put("kaptcha.noise.impl","com.google.code.kaptcha.impl.NoNoise");\n        //kaptchaProperties.put("kaptcha.noise.impl","com.google.code.kaptcha.impl.DefaultNoise");\n        kaptchaProperties.put("kaptcha.textproducer.char.string","acdefhkmnprtwxy2345678");\n\n        Config config = new Config(kaptchaProperties);\n        return config.getProducerImpl();\n    }\n}\n```\n\n使用示例：\n```java\nimport com.google.code.kaptcha.Constants;\nimport com.google.code.kaptcha.Producer;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\n@Controller\n@Slf4j\npublic class KaptchaController {\n\n    private final Producer captchaProducer;\n\n    @Autowired\n    public KaptchaController(Producer captchaProducer) {\n        this.captchaProducer = captchaProducer;\n    }\n\n    @RequestMapping("/image/code")\n    public ModelAndView kaptcha(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        HttpSession session = request.getSession();\n        response.setDateHeader("Expires", 0);\n        response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");\n        response.addHeader("Cache-Control", "post-check=0, pre-check=0");\n        response.setHeader("Pragma", "no-cache");\n        response.setContentType("image/jpeg");\n\n        String capText = captchaProducer.createText();\n        session.setAttribute(Constants.KAPTCHA_SESSION_KEY, capText);\n\n        String code = (String) session.getAttribute(Constants.KAPTCHA_SESSION_KEY);\n        log.info("输出验证码：[{}]", code);\n\n        BufferedImage bi = captchaProducer.createImage(capText);\n        ServletOutputStream out = response.getOutputStream();\n        ImageIO.write(bi, "jpg", out);\n        out.flush();\n        out.close();\n        return null;\n    }\n}\n```\n\n参考：\nhttps://www.cnblogs.com/FlyHeLanMan/p/6293991.html\nhttps://blog.csdn.net/victor_cindy1/article/details/78603734\nhttps://www.cnblogs.com/yangzhilong/p/8574685.html', 'title': 'Google Kaptcha 生成图形验证码', 'categories': ['[随笔分类]Java'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12563682.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12563682.html', 'postid': '12563682', 'source': {}, 'userid': '-2'}