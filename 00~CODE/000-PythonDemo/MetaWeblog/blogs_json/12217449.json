{'dateCreated': <DateTime '20200120T12:21:00' at 0x1a4f29d5b48>, 'description': "cv2.getTrackbarPos() 函数的\n一个参数是滑动条的名字，\n第二个参数是滑动条被放置窗口的名字，\n第三个参数是滑动条的默认位置。\n第四个参数是滑动条的最大值，\n第五个函数是回调函数，每次滑动条的滑动都会调用回调函数。\n回调函数通常都会含有一个默认参数，就是滑动条的位置。\n在本例中这个函数不用做任何事情，我们只需要 pass 就可以了\n滑动条的另外一个重要应用就是用作转换按钮。\n默认情况下 OpenCV 本身不带有按钮函数。\n所以我们使用滑动条来代替。\n在我们的程序中，我们要创建一个转换按钮，只有当装换按钮指向 ON 时，滑动条的滑动才有用，否则窗户口都是黑的\n\n```python\nimport cv2\nimport numpy as np\n\n\ndef nothing(x):\n    pass\n\n\n# 创建一副黑色图像\nimg = np.zeros((300, 512, 3), np.uint8)\ncv2.namedWindow('image')\ncv2.createTrackbar('R', 'image', 0, 255, nothing)\ncv2.createTrackbar('G', 'image', 0, 255, nothing)\ncv2.createTrackbar('B', 'image', 0, 255, nothing)\nswitch = '0:OFF\\n1:ON'\ncv2.createTrackbar(switch, 'image', 0, 1, nothing)\nwhile(1):\n    cv2.imshow('image', img)\n    k = cv2.waitKey(1) & 0xFF\n    if k == 27:\n        break\n    r = cv2.getTrackbarPos('R', 'image')\n    g = cv2.getTrackbarPos('G', 'image')\n    b = cv2.getTrackbarPos('B', 'image')\n    s = cv2.getTrackbarPos(switch, 'image')\n    if s == 0:\n        img[:] = 0\n    else:\n        img[:] = [b, g, r]\ncv2.destroyAllWindows()\n```\n\n```python\nimport cv2\nimport numpy as np\n\n\ndef nothing(x):\n    pass\n\n\n# 当鼠标按下时变为 True\ndrawing = False\n# 如果 mode 为 true 绘制矩形。按下'm' 变成绘制曲线。\nmode = True\nix, iy = -1, -1\n# 创建回调函数\n\n\ndef draw_circle(event, x, y, flags, param):\n    r = cv2.getTrackbarPos('R', 'image')\n    g = cv2.getTrackbarPos('G', 'image')\n    b = cv2.getTrackbarPos('B', 'image')\n    color = (b, g, r)\n    global ix, iy, drawing, mode\n# 当按下左键是返回起始位置坐标\n    if event == cv2.EVENT_LBUTTONDOWN:\n        drawing = True\n        ix, iy = x, y\n# 当鼠标左键按下并移动是绘制图形。 event 可以查看移动， flag 查看是否按下\n    elif event == cv2.EVENT_MOUSEMOVE and flags == cv2.EVENT_FLAG_LBUTTON:\n        if drawing == True:\n            if mode == True:\n                cv2.rectangle(img, (ix, iy), (x, y), color, -1)\n            else:\n                # 绘制圆圈，小圆点连在一起就成了线， 3 代表了笔画的粗细\n                cv2.circle(img, (x, y), 3, color, -1)\n        # 下面注释掉的代码是起始点为圆心，起点到终点为半径的\n        # r=int(np.sqrt((x-ix)**2+(y-iy)**2))\n        # cv2.circle(img,(x,y),r,(0,0,255),-1)\n        # 当鼠标松开停止绘画。\n    elif event == cv2.EVENT_LBUTTONUP:\n        drawing == False\n\n\n        # if mode==True:\n        # cv2.rectangle(img,(ix,iy),(x,y),(0,255,0),-1)\n        # else:\n        # cv2.circle(img,(x,y),5,(0,0,255),-1)\nimg = np.zeros((512, 512, 3), np.uint8)\ncv2.namedWindow('image')\ncv2.createTrackbar('R', 'image', 0, 255, nothing)\ncv2.createTrackbar('G', 'image', 0, 255, nothing)\ncv2.createTrackbar('B', 'image', 0, 255, nothing)\ncv2.setMouseCallback('image', draw_circle)\nwhile(1):\n    cv2.imshow('image', img)\n    k = cv2.waitKey(1) & 0xFF\n    if k == ord('m'):\n        mode = not mode\n    elif k == 27:\n        break\n```", 'title': 'python opencv：使用滑动条做调色板', 'categories': ['[随笔分类]OpenCV~Python', '[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12217449.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12217449.html', 'postid': '12217449', 'source': {}, 'userid': '-2'}