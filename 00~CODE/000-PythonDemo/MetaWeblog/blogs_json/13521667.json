{'dateCreated': <DateTime '20200818T09:44:00' at 0x1a4f24fd348>, 'description': '# JSP是什么\n\n## JSP与Servlet\nJSP 基于Java Servlet API，因此，JSP拥有各种强大的企业级Java API，包括JDBC，JNDI，EJB，JAXP等等。\nJSP页面可以与处理业务逻辑的 Servlet 一起使用，这种模式被Java servlet 模板引擎所支持。\n\n> 与纯 Servlet 相比：JSP可以很方便的编写或者修改HTML网页而不用去面对大量的println语句。\n\n## JSP的结构\n\nJSP 容器与 Web 服务器协同合作，为JSP的正常运行提供必要的运行环境和其他服务，并且能够正确识别专属于 JSP 网页的特殊元素。\n![](https://img2020.cnblogs.com/blog/1446249/202008/1446249-20200818093048976-1602749307.png)\n![](https://img2020.cnblogs.com/blog/1446249/202008/1446249-20200818093103432-1321940331.png)\n\n## JSP的生命周期\n![](https://img2020.cnblogs.com/blog/1446249/202008/1446249-20200818093305099-1916162662.png)\n\n```\n编译阶段：\nservlet容器编译servlet源文件，生成servlet类\n当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。\n      编译的过程包括三个步骤：\n           1.解析JSP文件。\n           2.将JSP文件转为servlet。\n           3.编译servlet。\n\n初始化阶段：\n加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法\n容器载入JSP文件后，它会在为请求提供任何服务前调用jspInit()方法。如果您需要执行自定义的JSP初始化任务，复写jspInit()方法就行了\n\n执行阶段：\n调用与JSP对应的servlet实例的服务方法\n这一阶段描述了JSP生命周期中一切与请求相关的交互行为，直到被销毁。\n当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。\n_jspService()方法需要一个HttpServletRequest对象和一个HttpServletResponse对象作为它的参数\n\n销毁阶段：\n调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例\nJSP生命周期的销毁阶段描述了当一个JSP网页从容器中被移除时所发生的一切。\njspDestroy()方法在JSP中等价于servlet中的销毁方法。当您需要执行任何清理工作时复写jspDestroy()方法，比如释放数据库连接或者关闭文件夹等等。\n```\n\n# 基本语法概述\n## 脚本程序\n可以包含任意量的Java语句、变量、方法或表达式，只要它们在脚本语言中是有效的\n任何文本、HTML标签、JSP元素必须写在脚本程序的外面\n```jsp\n<% 代码片段 %>\n或者：\n<jsp:scriptlet>\n   代码片段\n</jsp:scriptlet>\n```\n## 中文编码问题\n如果我们要在页面正常显示中文，我们需要在 JSP 文件头部添加以下代码：\n```jsp\n<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>\n```\n\n## JSP声明\n一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。\n```jsp\n<%! declaration; [ declaration; ]+ ... %>\n\n或者：\n\n<jsp:declaration>\n   代码片段\n</jsp:declaration>\n\n实例：\n<%! int i = 0; %> \n<%! int a, b, c; %> \n<%! Circle a = new Circle(2.0); %> \n```\n\n## JSP表达式\n一个JSP表达式中包含的脚本语言表达式，先被转化成String，然后插入到表达式出现的地方。\n由于表达式的值会被转化成String，所以您可以在一个文本行中使用表达式而不用去管它是否是HTML标签。\n表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。\n```jsp\n<%= 表达式 %>\n\n或者：\n\n<jsp:expression>\n   表达式\n</jsp:expression>\n```\n\n## JSP注释\n\n`<%-- 该部分注释在网页中不会被显示--%> `\n不同情况下使用注释的语法规则：\n```\n<%-- 注释 --%>\tJSP注释，注释内容不会被发送至浏览器甚至不会被编译\n<!-- 注释 -->\tHTML注释，通过浏览器查看网页源代码时可以看见注释内容\n<\\%\t代表静态 <%常量\n%\\>\t代表静态 %> 常量\n\\\'\t在属性中使用的单引号\n\\"\t在属性中使用的双引号\n```\n\n## JSP指令\nJSP指令用来设置与整个JSP页面相关的属性。\n\n```jsp\n<%@ directive attribute="value" %>\n```\n\n几种不同种类的指令标签：\n```\n<%@ page ... %>\t定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等\n<%@ include ... %>\t包含其他文件\n<%@ taglib ... %>\t引入标签库的定义，可以是自定义标签\n```\n\n## JSP行为\nJSP行为标签使用XML语法结构来控制servlet引擎。它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等。\n行为标签只有一种语法格式，它严格遵守XML标准：\n```\n<jsp:action_name attribute="value" />\n\n行为标签基本上是一些预先就定义好的函数，下表罗列出了一些可用的JSP行为标签：\njsp:include\t用于在当前页面中包含静态或动态资源\njsp:useBean\t寻找和初始化一个JavaBean组件\njsp:setProperty\t设置 JavaBean组件的值\njsp:getProperty\t将 JavaBean组件的值插入到 output中\njsp:forward\t从一个JSP文件向另一个文件传递一个包含用户请求的request对象\njsp:plugin\t用于在生成的HTML页面中包含Applet和JavaBean对象\njsp:element\t动态创建一个XML元素\njsp:attribute\t定义动态创建的XML元素的属性\njsp:body\t定义动态创建的XML元素的主体\njsp:text\t用于封装模板数据\n```\n\n## JSP隐含对象\nJSP支持九个自动定义的变量，江湖人称隐含对象。这九个隐含对象的简介见下表：\n```\nrequest\tHttpServletRequest类的实例\nresponse\tHttpServletResponse类的实例\nout\tPrintWriter类的实例，用于把结果输出至网页上\nsession\tHttpSession类的实例\napplication\tServletContext类的实例，与应用上下文有关\nconfig\tServletConfig类的实例\npageContext\tPageContext类的实例，提供对JSP页面所有对象以及命名空间的访问\npage\t类似于Java类中的this关键字\nException\tException类的对象，代表发生错误的JSP页面中对应的异常对象\n```\n\n# 指令\n## page指令\n## include指令\n## taglib指令\n\n# 动作\n动作元素基本上都是预定义的函数，JSP规范定义了一系列的标准动作，它用JSP作为前缀，可用的标准动作元素如下：\n```\njsp:include\t在页面被请求的时候引入一个文件。\njsp:useBean\t寻找或者实例化一个JavaBean。\njsp:setProperty\t设置JavaBean的属性。\njsp:getProperty\t输出某个JavaBean的属性。\njsp:forward\t把请求转到一个新的页面。\njsp:plugin\t根据浏览器类型为Java插件生成OBJECT或EMBED标记。\njsp:element\t定义动态XML元素\njsp:attribute\t设置动态定义的XML元素属性。\njsp:body\t设置动态定义的XML元素内容。\njsp:text\t在JSP页面和文档中使用写入文本的模板\n```\n\n# 隐含对象\n\n# JSP 表达式语言\nJSP表达式语言（EL）使得访问存储在JavaBean中的数据变得非常简单。\nJSP EL既可以用来创建算术表达式也可以用来创建逻辑表达式。\n在JSP EL表达式内可以使用整型数，浮点数，字符串，常量true、false，还有null。\n\n## EL的写法\n> 在JSP EL中通用的操作符是 `.` 和 `{}` 。这两个操作符允许您通过内嵌的JSP对象访问各种各样的JavaBean属性。\n> 当JSP编译器在属性中见到"${}"格式后，它会产生代码来计算这个表达式，并且产生一个替代品来代替表达式的值。\n> 在EL表达式中可以使用圆括号来组织子表达式。\n\n想要停用对EL表达式的评估的话，需要使用page指令将isELIgnored属性值设为true\n\n## EL的操作符\nEL表达式支持大部分Java所提供的算术和逻辑操作符：\n```\n.\t访问一个Bean属性或者一个映射条目\n[]\t访问一个数组或者链表的元素\n( )\t组织一个子表达式以改变优先级\n+\t加\n-\t减或负\n*\t乘\n/ or div\t除\n% or mod\t取模\n== or eq\t测试是否相等\n!= or ne\t测试是否不等\n< or lt\t测试是否小于\n> or gt\t测试是否大于\n<= or le\t测试是否小于等于\n>= or ge\t测试是否大于等于\n&& or and\t测试逻辑与\n|| or or\t测试逻辑或\n! or not\t测试取反\nempty\t测试是否空值\n```\n\n## EL中使用函数\nJSP EL允许您在表达式中使用函数。这些函数必须被定义在自定义标签库中。函数的使用语法如下：\n```\n${ns:func(param1, param2, ...)}\nns指的是命名空间（namespace），\nfunc指的是函数的名称，\nparam1指的是第一个参数，param2指的是第二个参数，以此类推。\n```\n\n## EL的隐含对象\nJSP EL支持下表列出的隐含对象：\n```\npageScope\tpage 作用域\nrequestScope\trequest 作用域\nsessionScope\tsession 作用域\napplicationScope\tapplication 作用域\nparam\tRequest 对象的参数，字符串\nparamValues\tRequest对象的参数，字符串集合\nheader\tHTTP 信息头，字符串\nheaderValues\tHTTP 信息头，字符串集合\ninitParam\t上下文初始化参数\ncookie\tCookie值\npageContext\t当前页面的pageContext\n```\n\n## 其他EL使用技巧\n\n# JSP 标准标签库（JSTL）\n## 核心标签\n## 格式化标签\n## SQL标签\n## XML 标签\n## JSTL函数', 'title': 'JSP 常用语法整理', 'categories': ['[随笔分类]Java~JavaEE'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/13521667.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/13521667.html', 'postid': '13521667', 'source': {}, 'userid': '-2'}