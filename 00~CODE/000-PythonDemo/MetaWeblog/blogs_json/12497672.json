{'dateCreated': <DateTime '20200315T15:04:00' at 0x1a4f2563048>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# Boolean 对象\n\n## 概述\n\n`Boolean`对象是 JavaScript 的三个包装对象之一。作为构造函数，它主要用于生成布尔值的包装对象实例。\n\n```javascript\nvar b = new Boolean(true);\n\ntypeof b // "object"\nb.valueOf() // true\n```\n\n上面代码的变量`b`是一个`Boolean`对象的实例，它的类型是对象，值为布尔值`true`。\n\n注意，`false`对应的包装对象实例，布尔运算结果也是`true`。\n\n```javascript\nif (new Boolean(false)) {\n  console.log(\'true\');\n} // true\n\nif (new Boolean(false).valueOf()) {\n  console.log(\'true\');\n} // 无输出\n```\n\n上面代码的第一个例子之所以得到`true`，是因为`false`对应的包装对象实例是一个对象，进行逻辑运算时，被自动转化成布尔值`true`（因为所有对象对应的布尔值都是`true`）。而实例的`valueOf`方法，则返回实例对应的原始值，本例为`false`。\n\n## Boolean 函数的类型转换作用\n\n`Boolean`对象除了可以作为构造函数，还可以单独使用，将任意值转为布尔值。这时`Boolean`就是一个单纯的工具方法。\n\n```javascript\nBoolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(\'\') // false\nBoolean(NaN) // false\n\nBoolean(1) // true\nBoolean(\'false\') // true\nBoolean([]) // true\nBoolean({}) // true\nBoolean(function () {}) // true\nBoolean(/foo/) // true\n```\n\n上面代码中几种得到`true`的情况，都值得认真记住。\n\n顺便提一下，使用双重的否运算符（`!`）也可以将任意值转为对应的布尔值。\n\n```javascript\n!!undefined // false\n!!null // false\n!!0 // false\n!!\'\' // false\n!!NaN // false\n\n!!1 // true\n!!\'false\' // true\n!![] // true\n!!{} // true\n!!function(){} // true\n!!/foo/ // true\n```\n\n最后，对于一些特殊值，`Boolean`对象前面加不加`new`，会得到完全相反的结果，必须小心。\n\n```javascript\nif (Boolean(false)) {\n  console.log(\'true\');\n} // 无输出\n\nif (new Boolean(false)) {\n  console.log(\'true\');\n} // true\n\nif (Boolean(null)) {\n  console.log(\'true\');\n} // 无输出\n\nif (new Boolean(null)) {\n  console.log(\'true\');\n} // true\n```', 'title': 'javascript：Boolean对象', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12497672.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12497672.html', 'postid': '12497672', 'source': {}, 'userid': '-2'}