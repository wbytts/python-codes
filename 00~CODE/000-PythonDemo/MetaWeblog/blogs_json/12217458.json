{'dateCreated': <DateTime '20200120T12:27:00' at 0x1a4f29d5788>, 'description': '# 图片的像素\n\n- 像素：组成图片的单位\n- RGB：颜色由 RGB三种颜色组成\n- 颜色深度：对于8bit的颜色深度来说，它可以表示的颜色范围是 0 ~ 255，对于RGB图片来说，8位颜色深度可以表示 (2^8)^3 种颜色\n- 宽高：图片横向与纵向的像素点个数\n- 大小：宽 * 高 * 3 * 8 bit = xxx bit\n- alpha：有些图片还会有一个alpha通道，描绘图片的透明度信息\n\n常见颜色存储格式：RGB、BGR\n\n# 像素操作\n\n获取一个具体点的像素值： `r, g, b = img[x, y]`\n\n写入一个颜色到指定点：`img[100,100]=[255,255,255]`\n\n# 使用NumPy的方法进行读取和写入\n\n`print( img.item(10,10,2))`\n\n`img.itemset((10,10,2), 100)`\n\nNumpy 是经过优化了的进行快速矩阵运算的软件包。所以我们不推荐\n逐个获取像素值并修改，这样会很慢，能有矩阵运算就不要用循环。 \n\n上面提到的方法被用来选取矩阵的一个区域，比如说前 5 行的后 3\n列。对于获取每一个像素值，也许使用 Numpy 的 array.item() 和 array.itemset() 会更好。但是返回值是标量。如果你想获得所有 B， G， R 的\n值，你需要使用 array.item() 分割他们。\n\n# 像素取反\n\n```python\ndef\xa0access_pixels(image):\n\xa0\xa0\xa0\xa0print(image.shape)\n\xa0\xa0\xa0\xa0height\xa0=\xa0image.shape[0]\n\xa0\xa0\xa0\xa0width\xa0=\xa0image.shape[1]\n\xa0\xa0\xa0\xa0channels\xa0=\xa0image.shape[2]\n\xa0\xa0\xa0\xa0print("width\xa0:\xa0%s,\xa0height\xa0:\xa0%s,\xa0channels\xa0:\xa0%s"\xa0%\xa0(width,\xa0height,\xa0channels))\n\xa0\xa0\xa0\xa0for\xa0row\xa0in\xa0range(height):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0col\xa0in\xa0range(width):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0for\xa0c\xa0in\xa0range(channels):\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pv\xa0=\xa0image[row,\xa0col,\xa0c]\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0image[row,\xa0col,\xa0c]\xa0=\xa0255-pv\xa0\xa0#\xa0修改\n\xa0\xa0\xa0\xa0cv2.imshow("pixels_demo",\xa0image) \n```\n\n使用 OpenCV 自带的API：\n```python\ndst\xa0=\xa0cv2.bitwise_not(image)\n```\n这个操作底层是用C++操作的，比起自己使用循环来操作速度快很多\n\n# NumPy 创建一张图片\n\n```python\ndef create_image():\n    img = np.zeros([400, 400, 3], np.uint8)\n    # img = np.zeros([400, 400, 1], np.uint8)  # 单通道图片\n    # img[:, :, 0] = np.ones([400, 400])*127  # 单通道设置灰度图\n    img[:, :, 0] = np.ones([400, 400])*255\n    # img[:, :, 1] = np.ones([400, 400])*255\n    # img[:, :, 2] = np.ones([400, 400])*255\n    cv2.imshow("new image", img)\n    # cv2.imwrite("images/demo.img")\n```', 'title': 'python opencv：像素操作', 'categories': ['[随笔分类]OpenCV~Python', '[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12217458.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12217458.html', 'postid': '12217458', 'source': {}, 'userid': '-2'}