{'dateCreated': <DateTime '20200131T00:29:00' at 0x1a4f2996188>, 'description': '\n# 霍夫直线变换介绍\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002149213-1917857453.png)\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002200730-1006501796.png)\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002351899-835484871.png)\n\n# 霍夫圆检测\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002540481-482481522.png)\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002618978-1555446162.png)\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002651004-1188178748.png)\n\n现实中：\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131002711000-1046862127.png)\n\n# example\n```python\nimport cv2 as cv\nimport numpy as np\n\n\n# 关于霍夫变换的相关知识可以看看这个博客：https://blog.csdn.net/kbccs/article/details/79641887\ndef line_detection(image):\n    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    edges = cv.Canny(gray, 50, 150, apertureSize=3)\n\n    # cv2.HoughLines()返回值就是（ρ,θ）。ρ 的单位是像素，θ 的单位是弧度。\n    # 这个函数的第一个参数是一个二值化图像，所以在进行霍夫变换之前要首先进行二值化，或者进行 Canny 边缘检测。\n    # 第二和第三个值分别代表 ρ 和 θ 的精确度。第四个参数是阈值，只有累加其中的值高于阈值时才被认为是一条直线，\n    # 也可以把它看成能 检测到的直线的最短长度（以像素点为单位）。\n\n    lines = cv.HoughLines(edges, 1, np.pi/180, 200)\n\n    for rho, theta in lines[0]:\n\n        a = np.cos(theta)\n        b = np.sin(theta)\n        x0 = a * rho\n        y0 = b * rho\n        x1 = int(x0 + 1000*(-b))\n        y1 = int(y0 + 1000*(a))\n        x2 = int(x0 - 1000*(-b))\n        y2 = int(y0 - 1000*(a))\n        cv.line(image, (x1, y1), (x2, y2), (0, 0, 255), 2)\n\n    cv.imshow("line_detection", image)\n\n\ndef line_detection_possible_demo(image):\n    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    edges = cv.Canny(gray, 50, 150, apertureSize=3)\n    minLineLength = 100\n    maxLineGap = 10\n    lines = cv.HoughLinesP(edges, 1, np.pi / 180, 100, minLineLength, maxLineGap)\n    for x1, y1, x2, y2 in lines[0]:\n        cv.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)\n    cv.imshow(\'hough_lines\', image)\n\n\n# Hough Circle 在xy坐标系中一点对应Hough坐标系中的一个圆，xy坐标系中圆上各个点对应Hough坐标系各个圆，\n# 相加的一点，即对应xy坐标系中圆心\n# 现实考量：Hough圆对噪声比较敏感，所以做hough圆之前要中值滤波，\n# 基于效率考虑，OpenCV中实现的霍夫变换圆检测是基于图像梯度的实现，分为两步：\n# 1. 检测边缘，发现可能的圆心候选圆心开始计算最佳半径大小\n# 2. 基于第一步的基础上，从\ndef detection_circles_demo(image):\n    dst = cv.pyrMeanShiftFiltering(image, 10, 100)  # 均值迁移，sp，sr为空间域核与像素范围域核半径\n    gray = cv.cvtColor(dst, cv.COLOR_BGR2GRAY)\n\n    """\n    .   @param image 8-bit, single-channel, grayscale input image.\n    .   @param circles Output vector of found circles. Each vector is encoded as  3 or 4 element\n    .   floating-point vector \\f$(x, y, radius)\\f$ or \\f$(x, y, radius, votes)\\f$ .\n    .   @param method Detection method, see #HoughModes. Currently, the only implemented method is #HOUGH_GRADIENT\n    .   @param dp Inverse ratio of the accumulator resolution to the image resolution. For example, if\n    .   dp=1 , the accumulator has the same resolution as the input image. If dp=2 , the accumulator has\n    .   half as big width and height.\n        累加器图像的分辨率。这个参数允许创建一个比输入图像分辨率低的累加器。\n        （这样做是因为有理由认为图像中存在的圆会自然降低到与图像宽高相同数量的范畴）。\n        如果dp设置为1，则分辨率是相同的；如果设置为更大的值（比如2），累加器的分辨率受此影响会变小（此情况下为一半）。\n        dp的值不能比1小。\n    .   @param minDist Minimum distance between the centers of the detected circles. If the parameter is\n    .   too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is\n    .   too large, some circles may be missed.\n        该参数是让算法能明显区分的两个不同圆之间的最小距离。\n    .   @param param1 First method-specific parameter. In case of #HOUGH_GRADIENT , it is the higher\n    .   threshold of the two passed to the Canny edge detector (the lower one is twice smaller).\n        用于Canny的边缘阀值上限，下限被置为上限的一半。\n    .   @param param2 Second method-specific parameter. In case of #HOUGH_GRADIENT , it is the\n    .   accumulator threshold for the circle centers at the detection stage. The smaller it is, the more\n    .   false circles may be detected. Circles, corresponding to the larger accumulator values, will be\n    .   returned first.\n        累加器的阀值。\n    .   @param minRadius Minimum circle radius.\n        最小圆半径\n    .   @param maxRadius Maximum circle radius. If <= 0, uses the maximum image dimension. If < 0, returns\n    .   centers without finding the radius.\n        最大圆半径。\n    """\n    circles = cv.HoughCircles(gray, cv.HOUGH_GRADIENT, 1, 20, param1=40, param2=30, minRadius=0, maxRadius=0)\n    circles = np.uint16(np.around(circles))\n    print(circles.shape)\n    for i in circles[0,:]:  # draw the outer circle\n        cv.circle(image, (i[0], i[1]), i[2], (0, 255, 0), 2) # draw the center of the circle\n        cv.circle(image, (i[0], i[1]), 2, (0, 0, 255), 3)\n    cv.imshow(\'detected circles\', image)\n\n\ndef main():\n    src = cv.imread("../images/sudoku.png")\n    cv.imshow("demo",src)\n\n    line_detection(src)\n    # line_detection_possible_demo(src)\n    # img = cv.imread("../images/circle.png")\n    # detection_circles_demo(img)\n    cv.waitKey(0)  # 等有键输入或者1000ms后自动将窗口消除，0表示只用键输入结束窗口\n    cv.destroyAllWindows()  # 关闭所有窗口\n\n\nif __name__ == \'__main__\':\n    main()\n```', 'title': 'opencv python：直线检测 与 圆检测', 'categories': ['[随笔分类]OpenCV~Python', '[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12244499.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12244499.html', 'postid': '12244499', 'source': {}, 'userid': '-2'}