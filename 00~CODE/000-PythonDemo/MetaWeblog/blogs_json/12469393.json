{'dateCreated': <DateTime '20200312T15:06:00' at 0x1a4f2569a08>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# 函数\n\n函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。\n\n## 概述\n\n### 函数的声明\n\nJavaScript 有三种声明函数的方法。\n\n**（1）function 命令**\n\n`function`命令声明的代码区块，就是一个函数。`function`命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。\n\n```javascript\nfunction print(s) {\n  console.log(s);\n}\n```\n\n上面的代码命名了一个`print`函数，以后使用`print()`这种形式，就可以调用相应的代码。这叫做函数的声明（Function Declaration）。\n\n**（2）函数表达式**\n\n除了用`function`命令声明函数，还可以采用变量赋值的写法。\n\n```javascript\nvar print = function(s) {\n  console.log(s);\n};\n```\n\n这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式（Function Expression），因为赋值语句的等号右侧只能放表达式。\n\n采用函数表达式声明函数时，`function`命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。\n\n```javascript\nvar print = function x(){\n  console.log(typeof x);\n};\n\nx\n// ReferenceError: x is not defined\n\nprint()\n// function\n```\n\n上面代码在函数表达式中，加入了函数名`x`。这个`x`只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错（除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数）。因此，下面的形式声明函数也非常常见。\n\n```javascript\nvar f = function f() {};\n```\n\n需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。总的来说，这两种声明函数的方式，差别很细微，可以近似认为是等价的。\n\n**（3）Function 构造函数**\n\n第三种声明函数的方式是`Function`构造函数。\n\n```javascript\nvar add = new Function(\n  \'x\',\n  \'y\',\n  \'return x + y\'\n);\n\n// 等同于\nfunction add(x, y) {\n  return x + y;\n}\n```\n\n上面代码中，`Function`构造函数接受三个参数，除了最后一个参数是`add`函数的“函数体”，其他参数都是`add`函数的参数。\n\n你可以传递任意数量的参数给`Function`构造函数，只有最后一个参数会被当做函数体，如果只有一个参数，该参数就是函数体。\n\n```javascript\nvar foo = new Function(\n  \'return "hello world";\'\n);\n\n// 等同于\nfunction foo() {\n  return \'hello world\';\n}\n```\n\n`Function`构造函数可以不使用`new`命令，返回结果完全一样。\n\n总的来说，这种声明函数的方式非常不直观，几乎无人使用。\n\n### 函数的重复声明\n\n如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。\n\n```javascript\nfunction f() {\n  console.log(1);\n}\nf() // 2\n\nfunction f() {\n  console.log(2);\n}\nf() // 2\n```\n\n上面代码中，后一次的函数声明覆盖了前面一次。而且，由于函数名的提升（参见下文），前一次声明在任何时候都是无效的，这一点要特别注意。\n\n### 圆括号运算符，return 语句和递归\n\n调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\n\nadd(1, 1) // 2\n```\n\n上面代码中，函数名后面紧跟一对圆括号，就会调用这个函数。\n\n函数体内部的`return`语句，表示返回。JavaScript 引擎遇到`return`语句，就直接返回`return`后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，`return`语句所带的那个表达式，就是函数的返回值。`return`语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回`undefined`。\n\n函数可以调用自身，这就是递归（recursion）。下面就是通过递归，计算斐波那契数列的代码。\n\n```javascript\nfunction fib(num) {\n  if (num === 0) return 0;\n  if (num === 1) return 1;\n  return fib(num - 2) + fib(num - 1);\n}\n\nfib(6) // 8\n```\n\n上面代码中，`fib`函数内部又调用了`fib`，计算得到斐波那契数列的第6个元素是8。\n\n### 第一等公民\n\nJavaScript 语言将函数看作一种值，与其它值（数值、字符串、布尔值等等）地位相同。凡是可以使用值的地方，就能使用函数。比如，可以把函数赋值给变量和对象的属性，也可以当作参数传入其他函数，或者作为函数的结果返回。函数只是一个可以执行的值，此外并无特殊之处。\n\n由于函数与其他数据类型地位平等，所以在 JavaScript 语言中又称函数为第一等公民。\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\n\n// 将函数赋值给一个变量\nvar operator = add;\n\n// 将函数作为参数和返回值\nfunction a(op){\n  return op;\n}\na(add)(1, 1)\n// 2\n```\n\n### 函数名的提升\n\nJavaScript 引擎将函数名视同变量名，所以采用`function`命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。\n\n```javascript\nf();\n\nfunction f() {}\n```\n\n表面上，上面代码好像在声明之前就调用了函数`f`。但是实际上，由于“变量提升”，函数`f`被提升到了代码头部，也就是在调用之前已经声明了。但是，如果采用赋值语句定义函数，JavaScript 就会报错。\n\n```javascript\nf();\nvar f = function (){};\n// TypeError: undefined is not a function\n```\n\n上面的代码等同于下面的形式。\n\n```javascript\nvar f;\nf();\nf = function () {};\n```\n\n上面代码第二行，调用`f`的时候，`f`只是被声明了，还没有被赋值，等于`undefined`，所以会报错。因此，如果同时采用`function`命令和赋值语句声明同一个函数，最后总是采用赋值语句的定义。\n\n```javascript\nvar f = function () {\n  console.log(\'1\');\n}\n\nfunction f() {\n  console.log(\'2\');\n}\n\nf() // 1\n```\n\n## 函数的属性和方法\n\n### name 属性\n\n函数的`name`属性返回函数的名字。\n\n```javascript\nfunction f1() {}\nf1.name // "f1"\n```\n\n如果是通过变量赋值定义的函数，那么`name`属性返回变量名。\n\n```javascript\nvar f2 = function () {};\nf2.name // "f2"\n```\n\n但是，上面这种情况，只有在变量的值是一个匿名函数时才是如此。如果变量的值是一个具名函数，那么`name`属性返回`function`关键字之后的那个函数名。\n\n```javascript\nvar f3 = function myName() {};\nf3.name // \'myName\'\n```\n\n上面代码中，`f3.name`返回函数表达式的名字。注意，真正的函数名还是`f3`，而`myName`这个名字只在函数体内部可用。\n\n`name`属性的一个用处，就是获取参数函数的名字。\n\n```javascript\nvar myFunc = function () {};\n\nfunction test(f) {\n  console.log(f.name);\n}\n\ntest(myFunc) // myFunc\n```\n\n上面代码中，函数`test`内部通过`name`属性，就可以知道传入的参数是什么函数。\n\n### length 属性\n\n函数的`length`属性返回函数预期传入的参数个数，即函数定义之中的参数个数。\n\n```javascript\nfunction f(a, b) {}\nf.length // 2\n```\n\n上面代码定义了空函数`f`，它的`length`属性就是定义时的参数个数。不管调用时输入了多少个参数，`length`属性始终等于2。\n\n`length`属性提供了一种机制，判断定义时和调用时参数的差异，以便实现面向对象编程的“方法重载”（overload）。\n\n### toString()\n\n函数的`toString`方法返回一个字符串，内容是函数的源码。\n\n```javascript\nfunction f() {\n  a();\n  b();\n  c();\n}\n\nf.toString()\n// function f() {\n//  a();\n//  b();\n//  c();\n// }\n```\n\n对于那些原生的函数，`toString()`方法返回`function (){[native code]}`。\n\n```javascript\nMath.sqrt.toString()\n// "function sqrt() { [native code] }"\n```\n\n上面代码中，`Math.sqrt`是 JavaScript 引擎提供的原生函数，`toString()`方法就返回原生代码的提示。\n\n函数内部的注释也可以返回。\n\n```javascript\nfunction f() {/*\n  这是一个\n  多行注释\n*/}\n\nf.toString()\n// "function f(){/*\n//   这是一个\n//   多行注释\n// */}"\n```\n\n利用这一点，可以变相实现多行字符串。\n\n```javascript\nvar multiline = function (fn) {\n  var arr = fn.toString().split(\'\\n\');\n  return arr.slice(1, arr.length - 1).join(\'\\n\');\n};\n\nfunction f() {/*\n  这是一个\n  多行注释\n*/}\n\nmultiline(f);\n// " 这是一个\n//   多行注释"\n```\n\n## 函数作用域\n\n### 定义\n\n作用域（scope）指的是变量存在的范围。在 ES5 的规范中，JavaScript 只有两种作用域：一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；另一种是函数作用域，变量只在函数内部存在。ES6 又新增了块级作用域，本教程不涉及。\n\n对于顶层函数来说，函数外部声明的变量就是全局变量（global variable），它可以在函数内部读取。\n\n```javascript\nvar v = 1;\n\nfunction f() {\n  console.log(v);\n}\n\nf()\n// 1\n```\n\n上面的代码表明，函数`f`内部可以读取全局变量`v`。\n\n在函数内部定义的变量，外部无法读取，称为“局部变量”（local variable）。\n\n```javascript\nfunction f(){\n  var v = 1;\n}\n\nv // ReferenceError: v is not defined\n```\n\n上面代码中，变量`v`在函数内部定义，所以是一个局部变量，函数之外就无法读取。\n\n函数内部定义的变量，会在该作用域内覆盖同名全局变量。\n\n```javascript\nvar v = 1;\n\nfunction f(){\n  var v = 2;\n  console.log(v);\n}\n\nf() // 2\nv // 1\n```\n\n上面代码中，变量`v`同时在函数的外部和内部有定义。结果，在函数内部定义，局部变量`v`覆盖了全局变量`v`。\n\n注意，对于`var`命令来说，局部变量只能在函数内部声明，在其他区块中声明，一律都是全局变量。\n\n```javascript\nif (true) {\n  var x = 5;\n}\nconsole.log(x);  // 5\n```\n\n上面代码中，变量`x`在条件判断区块之中声明，结果就是一个全局变量，可以在区块之外读取。\n\n### 函数内部的变量提升\n\n与全局作用域一样，函数作用域内部也会产生“变量提升”现象。`var`命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。\n\n```javascript\nfunction foo(x) {\n  if (x > 100) {\n    var tmp = x - 100;\n  }\n}\n\n// 等同于\nfunction foo(x) {\n  var tmp;\n  if (x > 100) {\n    tmp = x - 100;\n  };\n}\n```\n\n### 函数本身的作用域\n\n函数本身也是一个值，也有自己的作用域。它的作用域与变量一样，就是其声明时所在的作用域，与其运行时所在的作用域无关。\n\n```javascript\nvar a = 1;\nvar x = function () {\n  console.log(a);\n};\n\nfunction f() {\n  var a = 2;\n  x();\n}\n\nf() // 1\n```\n\n上面代码中，函数`x`是在函数`f`的外部声明的，所以它的作用域绑定外层，内部变量`a`不会到函数`f`体内取值，所以输出`1`，而不是`2`。\n\n总之，函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域。\n\n很容易犯错的一点是，如果函数`A`调用函数`B`，却没考虑到函数`B`不会引用函数`A`的内部变量。\n\n```javascript\nvar x = function () {\n  console.log(a);\n};\n\nfunction y(f) {\n  var a = 2;\n  f();\n}\n\ny(x)\n// ReferenceError: a is not defined\n```\n\n上面代码将函数`x`作为参数，传入函数`y`。但是，函数`x`是在函数`y`体外声明的，作用域绑定外层，因此找不到函数`y`的内部变量`a`，导致报错。\n\n同样的，函数体内部声明的函数，作用域绑定函数体内部。\n\n```javascript\nfunction foo() {\n  var x = 1;\n  function bar() {\n    console.log(x);\n  }\n  return bar;\n}\n\nvar x = 2;\nvar f = foo();\nf() // 1\n```\n\n上面代码中，函数`foo`内部声明了一个函数`bar`，`bar`的作用域绑定`foo`。当我们在`foo`外部取出`bar`执行时，变量`x`指向的是`foo`内部的`x`，而不是`foo`外部的`x`。正是这种机制，构成了下文要讲解的“闭包”现象。\n\n## 参数\n\n### 概述\n\n函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数。\n\n```javascript\nfunction square(x) {\n  return x * x;\n}\n\nsquare(2) // 4\nsquare(3) // 9\n```\n\n上式的`x`就是`square`函数的参数。每次运行的时候，需要提供这个值，否则得不到结果。\n\n### 参数的省略\n\n函数参数不是必需的，JavaScript 允许省略参数。\n\n```javascript\nfunction f(a, b) {\n  return a;\n}\n\nf(1, 2, 3) // 1\nf(1) // 1\nf() // undefined\n\nf.length // 2\n```\n\n上面代码的函数`f`定义了两个参数，但是运行时无论提供多少个参数（或者不提供参数），JavaScript 都不会报错。省略的参数的值就变为`undefined`。需要注意的是，函数的`length`属性与实际传入的参数个数无关，只反映函数预期传入的参数个数。\n\n但是，没有办法只省略靠前的参数，而保留靠后的参数。如果一定要省略靠前的参数，只有显式传入`undefined`。\n\n```javascript\nfunction f(a, b) {\n  return a;\n}\n\nf( , 1) // SyntaxError: Unexpected token ,(…)\nf(undefined, 1) // undefined\n```\n\n上面代码中，如果省略第一个参数，就会报错。\n\n### 传递方式\n\n函数参数如果是原始类型的值（数值、字符串、布尔值），传递方式是传值传递（passes by value）。这意味着，在函数体内修改参数值，不会影响到函数外部。\n\n```javascript\nvar p = 2;\n\nfunction f(p) {\n  p = 3;\n}\nf(p);\n\np // 2\n```\n\n上面代码中，变量`p`是一个原始类型的值，传入函数`f`的方式是传值传递。因此，在函数内部，`p`的值是原始值的拷贝，无论怎么修改，都不会影响到原始值。\n\n但是，如果函数参数是复合类型的值（数组、对象、其他函数），传递方式是传址传递（pass by reference）。也就是说，传入函数的原始值的地址，因此在函数内部修改参数，将会影响到原始值。\n\n```javascript\nvar obj = { p: 1 };\n\nfunction f(o) {\n  o.p = 2;\n}\nf(obj);\n\nobj.p // 2\n```\n\n上面代码中，传入函数`f`的是参数对象`obj`的地址。因此，在函数内部修改`obj`的属性`p`，会影响到原始值。\n\n注意，如果函数内部修改的，不是参数对象的某个属性，而是替换掉整个参数，这时不会影响到原始值。\n\n```javascript\nvar obj = [1, 2, 3];\n\nfunction f(o) {\n  o = [2, 3, 4];\n}\nf(obj);\n\nobj // [1, 2, 3]\n```\n\n上面代码中，在函数`f`内部，参数对象`obj`被整个替换成另一个值。这时不会影响到原始值。这是因为，形式参数（`o`）的值实际是参数`obj`的地址，重新对`o`赋值导致`o`指向另一个地址，保存在原地址上的值当然不受影响。\n\n### 同名参数\n\n如果有同名的参数，则取最后出现的那个值。\n\n```javascript\nfunction f(a, a) {\n  console.log(a);\n}\n\nf(1, 2) // 2\n```\n\n上面代码中，函数`f`有两个参数，且参数名都是`a`。取值的时候，以后面的`a`为准，即使后面的`a`没有值或被省略，也是以其为准。\n\n```javascript\nfunction f(a, a) {\n  console.log(a);\n}\n\nf(1) // undefined\n```\n\n调用函数`f`的时候，没有提供第二个参数，`a`的取值就变成了`undefined`。这时，如果要获得第一个`a`的值，可以使用`arguments`对象。\n\n```javascript\nfunction f(a, a) {\n  console.log(arguments[0]);\n}\n\nf(1) // 1\n```\n\n### arguments 对象\n\n**（1）定义**\n\n由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是`arguments`对象的由来。\n\n`arguments`对象包含了函数运行时的所有参数，`arguments[0]`就是第一个参数，`arguments[1]`就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。\n\n```javascript\nvar f = function (one) {\n  console.log(arguments[0]);\n  console.log(arguments[1]);\n  console.log(arguments[2]);\n}\n\nf(1, 2, 3)\n// 1\n// 2\n// 3\n```\n\n正常模式下，`arguments`对象可以在运行时修改。\n\n```javascript\nvar f = function(a, b) {\n  arguments[0] = 3;\n  arguments[1] = 2;\n  return a + b;\n}\n\nf(1, 1) // 5\n```\n\n上面代码中，函数`f`调用时传入的参数，在函数内部被修改成`3`和`2`。\n\n严格模式下，`arguments`对象与函数参数不具有联动关系。也就是说，修改`arguments`对象不会影响到实际的函数参数。\n\n```javascript\nvar f = function(a, b) {\n  \'use strict\'; // 开启严格模式\n  arguments[0] = 3;\n  arguments[1] = 2;\n  return a + b;\n}\n\nf(1, 1) // 2\n```\n\n上面代码中，函数体内是严格模式，这时修改`arguments`对象，不会影响到真实参数`a`和`b`。\n\n通过`arguments`对象的`length`属性，可以判断函数调用时到底带几个参数。\n\n```javascript\nfunction f() {\n  return arguments.length;\n}\n\nf(1, 2, 3) // 3\nf(1) // 1\nf() // 0\n```\n\n**（2）与数组的关系**\n\n需要注意的是，虽然`arguments`很像数组，但它是一个对象。数组专有的方法（比如`slice`和`forEach`），不能在`arguments`对象上直接使用。\n\n如果要让`arguments`对象使用数组方法，真正的解决方法是将`arguments`转为真正的数组。下面是两种常用的转换方法：`slice`方法和逐一填入新数组。\n\n```javascript\nvar args = Array.prototype.slice.call(arguments);\n\n// 或者\nvar args = [];\nfor (var i = 0; i < arguments.length; i++) {\n  args.push(arguments[i]);\n}\n```\n\n**（3）callee 属性**\n\n`arguments`对象带有一个`callee`属性，返回它所对应的原函数。\n\n```javascript\nvar f = function () {\n  console.log(arguments.callee === f);\n}\n\nf() // true\n```\n\n可以通过`arguments.callee`，达到调用函数自身的目的。这个属性在严格模式里面是禁用的，因此不建议使用。\n\n## 函数的其他知识点\n\n### 闭包\n\n闭包（closure）是 JavaScript 语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。\n\n理解闭包，首先必须理解变量作用域。前面提到，JavaScript 有两种作用域：全局作用域和函数作用域。函数内部可以直接读取全局变量。\n\n```javascript\nvar n = 999;\n\nfunction f1() {\n  console.log(n);\n}\nf1() // 999\n```\n\n上面代码中，函数`f1`可以读取全局变量`n`。\n\n但是，函数外部无法读取函数内部声明的变量。\n\n```javascript\nfunction f1() {\n  var n = 999;\n}\n\nconsole.log(n)\n// Uncaught ReferenceError: n is not defined(\n```\n\n上面代码中，函数`f1`内部声明的变量`n`，函数外是无法读取的。\n\n如果出于种种原因，需要得到函数内的局部变量。正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。\n\n```javascript\nfunction f1() {\n  var n = 999;\n  function f2() {\n\u3000\u3000console.log(n); // 999\n  }\n}\n```\n\n上面代码中，函数`f2`就在函数`f1`内部，这时`f1`内部的所有局部变量，对`f2`都是可见的。但是反过来就不行，`f2`内部的局部变量，对`f1`就是不可见的。这就是 JavaScript 语言特有的"链式作用域"结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。\n\n既然`f2`可以读取`f1`的局部变量，那么只要把`f2`作为返回值，我们不就可以在`f1`外部读取它的内部变量了吗！\n\n```javascript\nfunction f1() {\n  var n = 999;\n  function f2() {\n    console.log(n);\n  }\n  return f2;\n}\n\nvar result = f1();\nresult(); // 999\n```\n\n上面代码中，函数`f1`的返回值就是函数`f2`，由于`f2`可以读取`f1`的内部变量，所以就可以在外部获得`f1`的内部变量了。\n\n闭包就是函数`f2`，即能够读取其他函数内部变量的函数。由于在 JavaScript 语言中，只有函数内部的子函数才能读取内部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。闭包最大的特点，就是它可以“记住”诞生的环境，比如`f2`记住了它诞生的环境`f1`，所以从`f2`可以得到`f1`的内部变量。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n闭包的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中，即闭包可以使得它诞生环境一直存在。请看下面的例子，闭包使得内部变量记住上一次调用时的运算结果。\n\n```javascript\nfunction createIncrementor(start) {\n  return function () {\n    return start++;\n  };\n}\n\nvar inc = createIncrementor(5);\n\ninc() // 5\ninc() // 6\ninc() // 7\n```\n\n上面代码中，`start`是函数`createIncrementor`的内部变量。通过闭包，`start`的状态被保留了，每一次调用都是在上一次调用的基础上进行计算。从中可以看到，闭包`inc`使得函数`createIncrementor`的内部环境，一直存在。所以，闭包可以看作是函数内部作用域的一个接口。\n\n为什么会这样呢？原因就在于`inc`始终在内存中，而`inc`的存在依赖于`createIncrementor`，因此也始终在内存中，不会在调用结束后，被垃圾回收机制回收。\n\n闭包的另一个用处，是封装对象的私有属性和私有方法。\n\n```javascript\nfunction Person(name) {\n  var _age;\n  function setAge(n) {\n    _age = n;\n  }\n  function getAge() {\n    return _age;\n  }\n\n  return {\n    name: name,\n    getAge: getAge,\n    setAge: setAge\n  };\n}\n\nvar p1 = Person(\'张三\');\np1.setAge(25);\np1.getAge() // 25\n```\n\n上面代码中，函数`Person`的内部变量`_age`，通过闭包`getAge`和`setAge`，变成了返回对象`p1`的私有变量。\n\n注意，外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。因此不能滥用闭包，否则会造成网页的性能问题。\n\n### 立即调用的函数表达式（IIFE）\n\n在 JavaScript 中，圆括号`()`是一种运算符，跟在函数名之后，表示调用该函数。比如，`print()`就表示调用`print`函数。\n\n有时，我们需要在定义函数之后，立即调用该函数。这时，你不能在函数的定义之后加上圆括号，这会产生语法错误。\n\n```javascript\nfunction(){ /* code */ }();\n// SyntaxError: Unexpected token (\n```\n\n产生这个错误的原因是，`function`这个关键字即可以当作语句，也可以当作表达式。\n\n```javascript\n// 语句\nfunction f() {}\n\n// 表达式\nvar f = function f() {}\n```\n\n为了避免解析上的歧义，JavaScript 引擎规定，如果`function`关键字出现在行首，一律解释成语句。因此，JavaScript 引擎看到行首是`function`关键字之后，认为这一段都是函数的定义，不应该以圆括号结尾，所以就报错了。\n\n解决方法就是不要让`function`出现在行首，让引擎将其理解成一个表达式。最简单的处理，就是将其放在一个圆括号里面。\n\n```javascript\n(function(){ /* code */ }());\n// 或者\n(function(){ /* code */ })();\n```\n\n上面两种写法都是以圆括号开头，引擎就会认为后面跟的是一个表示式，而不是函数定义语句，所以就避免了错误。这就叫做“立即调用的函数表达式”（Immediately-Invoked Function Expression），简称 IIFE。\n\n注意，上面两种写法最后的分号都是必须的。如果省略分号，遇到连着两个 IIFE，可能就会报错。\n\n```javascript\n// 报错\n(function(){ /* code */ }())\n(function(){ /* code */ }())\n```\n\n上面代码的两行之间没有分号，JavaScript 会将它们连在一起解释，将第二行解释为第一行的参数。\n\n推而广之，任何让解释器以表达式来处理函数定义的方法，都能产生同样的效果，比如下面三种写法。\n\n```javascript\nvar i = function(){ return 10; }();\ntrue && function(){ /* code */ }();\n0, function(){ /* code */ }();\n```\n\n甚至像下面这样写，也是可以的。\n\n```javascript\n!function () { /* code */ }();\n~function () { /* code */ }();\n-function () { /* code */ }();\n+function () { /* code */ }();\n```\n\n通常情况下，只对匿名函数使用这种“立即执行的函数表达式”。它的目的有两个：一是不必为函数命名，避免了污染全局变量；二是 IIFE 内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。\n\n```javascript\n// 写法一\nvar tmp = newData;\nprocessData(tmp);\nstoreData(tmp);\n\n// 写法二\n(function () {\n  var tmp = newData;\n  processData(tmp);\n  storeData(tmp);\n}());\n```\n\n上面代码中，写法二比写法一更好，因为完全避免了污染全局变量。\n\n## eval 命令\n\n### 基本用法\n\n`eval`命令接受一个字符串作为参数，并将这个字符串当作语句执行。\n\n```javascript\neval(\'var a = 1;\');\na // 1\n```\n\n上面代码将字符串当作语句运行，生成了变量`a`。\n\n如果参数字符串无法当作语句运行，那么就会报错。\n\n```javascript\neval(\'3x\') // Uncaught SyntaxError: Invalid or unexpected token\n```\n\n放在`eval`中的字符串，应该有独自存在的意义，不能用来与`eval`以外的命令配合使用。举例来说，下面的代码将会报错。\n\n```javascript\neval(\'return;\'); // Uncaught SyntaxError: Illegal return statement\n```\n\n上面代码会报错，因为`return`不能单独使用，必须在函数中使用。\n\n如果`eval`的参数不是字符串，那么会原样返回。\n\n```javascript\neval(123) // 123\n```\n\n`eval`没有自己的作用域，都在当前作用域内执行，因此可能会修改当前作用域的变量的值，造成安全问题。\n\n```javascript\nvar a = 1;\neval(\'a = 2\');\n\na // 2\n```\n\n上面代码中，`eval`命令修改了外部变量`a`的值。由于这个原因，`eval`有安全风险。\n\n为了防止这种风险，JavaScript 规定，如果使用严格模式，`eval`内部声明的变量，不会影响到外部作用域。\n\n```javascript\n(function f() {\n  \'use strict\';\n  eval(\'var foo = 123\');\n  console.log(foo);  // ReferenceError: foo is not defined\n})()\n```\n\n上面代码中，函数`f`内部是严格模式，这时`eval`内部声明的`foo`变量，就不会影响到外部。\n\n不过，即使在严格模式下，`eval`依然可以读写当前作用域的变量。\n\n```javascript\n(function f() {\n  \'use strict\';\n  var foo = 1;\n  eval(\'foo = 2\');\n  console.log(foo);  // 2\n})()\n```\n\n上面代码中，严格模式下，`eval`内部还是改写了外部变量，可见安全风险依然存在。\n\n总之，`eval`的本质是在当前作用域之中，注入代码。由于安全风险和不利于 JavaScript 引擎优化执行速', 'title': 'javascript：数据结构-函数', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12469393.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12469393.html', 'postid': '12469393', 'source': {}, 'userid': '-2'}