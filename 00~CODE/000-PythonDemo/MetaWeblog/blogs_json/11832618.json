{'dateCreated': <DateTime '20191111T03:08:00' at 0x1a4f2a45d48>, 'description': '# 核心配置文件介绍\nSpringBoot使用一个全局配置文件，配置文件名是固定的\n* application.properties\n* application.yml\n\n配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；\n\n\n# YML的基本语法\nYAML（YAML Ain\'t Markup Language）\n* YAML A Markup Language\n* YAML isn\'t Markup Language\n\n标记语言：\n* 以前的配置文件，大多都是使用的是xxx.xml做配置文件\n* YAML：以数据为中心，比其他类型更适合做配置文件\n\n举例，yaml配置服务器端口号：\n```yml\nserver:\n  port: 8081\n```\n\n## 基本语法\nk:(空格)v：表示一对键值对（空格必须有）；\n以**空格**的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的\n属性和值也是大小写敏感；\n\n## 值的写法\n### 字面量：普通的值（数字，字符串，布尔）\n```\n\u200bk: v：字面直接来写；\n\u200b    字符串默认不用加上单引号或者双引号；\n\u200b        ""：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思\n\u200b            name:   "zhangsan \\n lisi"：输出；zhangsan 换行  lisi\n\u200b\t\'\'：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据\n            name:   ‘zhangsan \\n lisi’：输出；zhangsan \\n  lisi\n```\n\n####对象、Map（属性和值）（键值对）：\n```\n\u200b\tk: v：在下一行来写对象的属性和值的关系；注意缩进\n\n\u200b\t\t对象还是k: v的方式\n```\n\nkv方式：\n```yml\nfriends:\n  lastName: zhangsan\n  age: 20\n```\n\n行内写法：\n```yml\nfriends: {lastName: zhangsan,age: 18}\n```\n\n## 数组写法\n用- 值表示数组中的一个元素\n```yml\npets:\n - cat\n - dog\n - pig\n```\n\n行内写法\n```yml\npets: [cat,dog,pig]\n```\n\n# 属性注入的方式\n有一个配置：\n```yml\nperson:\n    lastName: hello\n    age: 18\n    boss: false\n    birth: 2017/12/12\n    maps: {k1: v1,k2: 12}\n    lists:\n      - lisi\n      - zhaoliu\n    dog:\n      name: 小狗\n      age: 12\n```\n有一个javaBean：（定义了get和set方法）\n```java\n/**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *\n */\n@Component\n@ConfigurationProperties(prefix = "person")\npublic class Person {\n\n    private String lastName;\n    private Integer age;\n    private Boolean boss;\n    private Date birth;\n\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n\n```\n\n我们可以导入配置文件处理器，以后编写配置就有提示了\n```xml\n<!--导入配置文件处理器，配置文件进行绑定就会有提示-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n## @Value获取值和@ConfigurationProperties获取值比较\n|                      | @ConfigurationProperties | @Value     |\n| -------------------- | ------------------------ | ---------- |\n| 功能                 | 批量注入配置文件中的属性 | 一个个指定 |\n| 松散绑定（松散语法） | 支持                     | 不支持     |\n| SpEL                 | 不支持                   | 支持       |\n| JSR303数据校验       | 支持                     | 不支持     |\n| 复杂类型封装         | 支持                     | 不支持     |\n\n配置文件yml还是properties他们都能获取到值；\n\n如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；\n\n如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；\n\n## 配置文件注入值数据校验\n```java\n@Component\n@ConfigurationProperties(prefix = "person")\n@Validated\npublic class Person {\n\n    /**\n     * <bean class="Person">\n     *      <property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}"></property>\n     * <bean/>\n     */\n\n   //lastName必须是邮箱格式\n    @Email\n    //@Value("${person.last-name}")\n    private String lastName;\n    //@Value("#{11*2}")\n    private Integer age;\n    //@Value("true")\n    private Boolean boss;\n\n    private Date birth;\n    private Map<String,Object> maps;\n    private List<Object> lists;\n    private Dog dog;\n```\n\n## @PropertySource&@ImportResource&@Bean\n@**PropertySource**：加载指定的配置文件；\n```java\n/**\n * 将配置文件中配置的每一个属性的值，映射到这个组件中\n * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；\n *      prefix = "person"：配置文件中哪个下面的所有属性进行一一映射\n *\n * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；\n *  @ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值；\n *\n */\n@PropertySource(value = {"classpath:person.properties"})\n@Component\n@ConfigurationProperties(prefix = "person")\n//@Validated\npublic class Person {\n\n    /**\n     * <bean class="Person">\n     *      <property name="lastName" value="字面量/${key}从环境变量、配置文件中获取值/#{SpEL}"></property>\n     * <bean/>\n     */\n\n   //lastName必须是邮箱格式\n   // @Email\n    //@Value("${person.last-name}")\n    private String lastName;\n    //@Value("#{11*2}")\n    private Integer age;\n    //@Value("true")\n    private Boolean boss;\n```\n\n@**ImportResource**：导入Spring的配置文件，让配置文件里面的内容生效；\nSpring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；\n想让Spring的配置文件生效，加载进来；@**ImportResource**标注在一个配置类上\n\n```java\n@ImportResource(locations = {"classpath:beans.xml"})\n导入Spring的配置文件让其生效\n```\n\n不来编写Spring的配置文件\n```xml\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">\n    <bean id="helloService" class="com.atguigu.springboot.service.HelloService"></bean>\n</beans>\n```\n\nSpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式\n1、配置类**@Configuration**------>Spring配置文件\n2、使用**@Bean**给容器中添加组件\n\n```java\n/**\n * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件\n *\n * 在配置文件中用<bean><bean/>标签添加组件\n *\n */\n@Configuration\npublic class MyAppConfig {\n\n    //将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名\n    @Bean\n    public HelloService helloService02(){\n        System.out.println("配置类@Bean给容器中添加组件了...");\n        return new HelloService();\n    }\n}\n```\n\n## 配置文件占位符\n\n随机数\n```java\n${random.value}、${random.int}、${random.long}\n${random.int(10)}、${random.int[1024,65536]}\n```\n占位符获取之前配置的值，如果没有可以是用:指定默认值\n```\nperson.last-name=张三${random.uuid}\nperson.age=${random.int}\nperson.birth=2017/12/15\nperson.boss=false\nperson.maps.k1=v1\nperson.maps.k2=14\nperson.lists=a,b,c\nperson.dog.name=${person.hello:hello}_dog\nperson.dog.age=15\n```\n\n## Profile\n我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml\n默认使用application.properties的配置；\n\nyml支持多文档块方式:\n```yml\nserver:\n  port: 8081\nspring:\n  profiles:\n    active: prod\n\n---\nserver:\n  port: 8083\nspring:\n  profiles: dev\n\n\n---\n\nserver:\n  port: 8084\nspring:\n  profiles: prod  #指定属于哪个环境\n```\n\n激活指定profile\n```\n1、在配置文件中指定  spring.profiles.active=dev\n\n\u200b2、命令行：\n\u200b    java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；\n\u200b    可以直接在测试的时候，配置传入命令行参数\n\n\u200b3、虚拟机参数；\n\u200b    -Dspring.profiles.active=dev\n```\n\n## 配置文件加载位置\nspringboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件\n```\n–file:./config/\n–file:./\n–classpath:/config/\n–classpath:/\n优先级由高到底，高优先级的配置会覆盖低优先级的配置；\n```\nSpringBoot会从这四个位置全部加载主配置文件；**互补配置**；\n\n==我们还可以通过spring.config.location来改变默认的配置文件位置==\n\n**项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；**\n\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties\n\n## 外部配置加载顺序\n![](https://img2018.cnblogs.com/blog/1446249/201911/1446249-20191116134121528-1177466206.png)\n\n\n所有支持的配置加载来源；\n[参考官方文档](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config)\n\n```\n**==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==**\n\n**1.命令行参数**\n\n所有的配置都可以在命令行上进行指定\n\njava -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc\n\n多个配置用空格分开； --配置项=值\n\n\n\n2.来自java:comp/env的JNDI属性\n\n3.Java系统属性（System.getProperties()）\n\n4.操作系统环境变量\n\n5.RandomValuePropertySource配置的random.*属性值\n\n\n\n==**由jar包外向jar包内进行寻找；**==\n\n==**优先加载带profile**==\n\n**6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\n\n**7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件**\n\n\n\n==**再来加载不带profile**==\n\n**8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件**\n\n**9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件**\n\n\n\n10.@Configuration注解类上的@PropertySource\n\n11.通过SpringApplication.setDefaultProperties指定的默认属性\n```\n\n## 自动配置原理\n配置文件到底能写什么？怎么写？自动配置原理；\n[配置文件能配置的属性参照](https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties)\n\n**自动配置原理：**\n* 1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==\n* 2）、@EnableAutoConfiguration 作用：**\n    * 利用EnableAutoConfigurationImportSelector给容器中导入一些组件？\n    * 可以查看selectImports()方法的内容；\n    * List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置\n    * ```\nSpringFactoriesLoader.loadFactoryNames()\n扫描所有jar包类路径下  META-INF/spring.factories\n把扫描到的这些文件的内容包装成properties对象\n从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中\n```\n**==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**\n```properties\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\\\norg.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration\n```\n每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；\n3）、每一个自动配置类进行自动配置功能；\n4）、以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；\n```java\n@Configuration   //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件\n@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中\n\n@ConditionalOnWebApplication //Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效\n\n@ConditionalOnClass(CharacterEncodingFilter.class)  //判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；\n\n@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)  //判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的\n//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；\npublic class HttpEncodingAutoConfiguration {\n  \n  \t//他已经和SpringBoot的配置文件映射了\n  \tprivate final HttpEncodingProperties properties;\n  \n   //只有一个有参构造器的情况下，参数的值就会从容器中拿\n  \tpublic HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {\n\t\tthis.properties = properties;\n\t}\n  \n    @Bean   //给容器中添加一个组件，这个组件的某些值需要从properties中获取\n\t@ConditionalOnMissingBean(CharacterEncodingFilter.class) //判断容器没有这个组件？\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t}\n```\n\n根据当前不同的条件判断，决定这个配置类是否生效？\n\n一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；\n\n5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类\n```java\n@ConfigurationProperties(prefix = "spring.http.encoding")  //从配置文件中获取指定的值和bean的属性进行绑定\npublic class HttpEncodingProperties {\n\n   public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");\n```\n\n**精髓：**\n\n\u200b\t**1）、SpringBoot启动会加载大量的自动配置类**\n\n\u200b\t**2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；**\n\n\u200b\t**3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）**\n\n\u200b\t**4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；**\n\n\nxxxxAutoConfigurartion：自动配置类；\n\n给容器中添加组件\n\nxxxxProperties:封装配置文件中相关属性；\n\n### 细节\n@Conditional派生注解（Spring注解版原生的@Conditional作用）\n作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；\n\n| @Conditional扩展注解            | 作用（判断是否满足当前指定条件）                 |\n| ------------------------------- | ------------------------------------------------ |\n| @ConditionalOnJava              | 系统的java版本是否符合要求                       |\n| @ConditionalOnBean              | 容器中存在指定Bean；                             |\n| @ConditionalOnMissingBean       | 容器中不存在指定Bean；                           |\n| @ConditionalOnExpression        | 满足SpEL表达式指定                               |\n| @ConditionalOnClass             | 系统中有指定的类                                 |\n| @ConditionalOnMissingClass      | 系统中没有指定的类                               |\n| @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean，或者这个Bean是首选Bean |\n| @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                   |\n| @ConditionalOnResource          | 类路径下是否存在指定资源文件                     |\n| @ConditionalOnWebApplication    | 当前是web环境                                    |\n| @ConditionalOnNotWebApplication | 当前不是web环境                                  |\n| @ConditionalOnJndi              | JNDI存在指定项                                   |\n\n**自动配置类必须在一定的条件下才能生效；**\n我们怎么知道哪些自动配置类生效；\n\n**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；\n```java\n=========================\nAUTO-CONFIGURATION REPORT\n=========================\n\n\nPositive matches:（自动配置类启用的）\n-----------------\n\n   DispatcherServletAutoConfiguration matched:\n      - @ConditionalOnClass found required class \'org.springframework.web.servlet.DispatcherServlet\'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)\n      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)\n        \n    \nNegative matches:（没有启动，没有匹配成功的自动配置类）\n-----------------\n\n   ActiveMQAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes \'javax.jms.ConnectionFactory\', \'org.apache.activemq.ActiveMQConnectionFactory\' (OnClassCondition)\n\n   AopAutoConfiguration:\n      Did not match:\n         - @ConditionalOnClass did not find required classes \'org.aspectj.lang.annotation.Aspect\', \'org.aspectj.lang.reflect.Advice\' (OnClassCondition)\n```\n\n\n# 如何修改SpringBoot的默认配置\n模式：\n\n\u200b\t1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；\n\n\u200b\t2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置\n\n\u200b\t3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置', 'title': 'Springboot学习：核心配置文件', 'categories': ['[随笔分类]Java~SpringBoot'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/11832618.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/11832618.html', 'postid': '11832618', 'source': {}, 'userid': '-2'}