{'dateCreated': <DateTime '20200806T10:05:00' at 0x1a4f24fd708>, 'description': 'PyPi：https://pypi.org/project/python-dotenv/\n\n# 介绍\n\n> Reads the key-value pair from .env file and adds them to environment variable. It is great for managing app settings during development and in production using 12-factor principles.\n> Do one thing, do it well!\n\n# 安装\n\n```\npip install -U python-dotenv\n```\n\n# 基本用法\n\nThe easiest and most common usage consists on calling load_dotenv when the application starts, which will load environment variables from a file named .env in the current directory or any of its parents or from the path specificied; after that, you can just call the environment-related method you need as provided by os.getenv.\n\n`.env`文件内容类似：\n```\n# a comment that will be ignored.\nREDIS_ADDRESS=localhost:6379\nMEANING_OF_LIFE=42\nMULTILINE_VAR="hello\\nworld"\n```\n\n```\nCONFIG_PATH=${HOME}/.config/foo\nDOMAIN=example.org\nEMAIL=admin@${DOMAIN}\nDEBUG=${DEBUG:-false}\n```\n\n# 在设置文件里加载\n\n```python\n# settings.py\nfrom dotenv import load_dotenv\nload_dotenv()\n\n# OR, the same with increased verbosity\nload_dotenv(verbose=True)\n\n# OR, explicitly providing path to \'.env\'\nfrom pathlib import Path  # Python 3.6+ only\nenv_path = Path(\'.\') / \'.env\'\nload_dotenv(dotenv_path=env_path)\n```\n\n# 读取示例\n\n```python\n# settings.py\nimport os\nSECRET_KEY = os.getenv("EMAIL")\nDATABASE_PASSWORD = os.getenv("DATABASE_PASSWORD")\n```\n\n# 坑一：默认不会更新的配置项\n\n```python\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv())\n```\n然而这个例子里面缺隐藏了一个大坑。此时当用户在.env中更新配置项的值时，是不会生效的。原因是load_dotenv默认不会更新已经存在的配置项。推荐使用override参数，推荐代码如下:\n\n```python\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv(), override=True)\n```\n\n# `#`的处理\n\n考虑.env中的如下写法:\n```\nBASEURL=http://codehub.com/#/python\n```\n暂且不讨论在url中带#是否优雅。#在url中表示锚点，的确是会经常用到的；然而在Python中却是表示注释开始。此时BASEURL的值会是http://codehub.com/。以下写法均符合预期。\n```\nBASEURL="http://codehub.com/#/python"\nBASEURL=\'http://codehub.com/#/python\'\n```\n需要使用双引号/单引号括起来。\n\n# Flask 中的实践\n\n一般来说，在执行flask run命令运行程序前，我们需要提供程序实例所在模块的位置 。\n\nFlask会自动探测程序实例，自动探测存在下面这些规则：\n\n从当前目录寻找app.py和wsgi.py模块，并从中寻找名为app或application的程序实例\n从环境变量FLASK_APP对应的值寻找名为app或application的程序实例\n \n\n如果你程序主模块命名为app.py，flask run命令会自动在其中寻找程序实例。如果你的程序主模块名是其他名称，\n\n比如hello.py，那么需要设置环境变量FLASK_APP，将包含程序实例的模块名赋值给这个变量。\n\n在linux 或 macOS系统使用export命令： `export FLASK_APP=hello`\n![](https://img2020.cnblogs.com/blog/1446249/202008/1446249-20200806103641696-272621575.png)\n\n除了FLASK_APP,我们还需要使用到其他环境变量。环境变量在新创建命令行窗口或重启电脑后就清除了，每次都要重设\n\n变量有些麻烦。而且如果你同时开发多个Flask程序，这个FLASK_APP就需要在不同的值之间切换。为了避免频繁设置环境变量，\n\n我们在项目根目录下分别创建两个文件：.env和.flaskenv。.flaskenv用来存储和Flask相关的公开环境变量，比如FLASK_APP；\n\n而.env用来存储包含敏感信息的环境变量，比如配置Email服务器的账户名与密码。\n\n在.env和.flaskenv文件中，环境变量使用键值对的形式定义，每行一个，以#开头的为注释\n\n【注意!】一定是要在运行flask项目的情况下.env 和.flaskenv中的环境变量才会被Flask加载\n\n> 如果不在.flaskenv中配置有关flask的环境变量，运行flask后，\n> 即使.flaskenv中有其它变量如，TEST_ENV，也不能获取到它的值\n\n![](https://img2020.cnblogs.com/blog/1446249/202008/1446249-20200806103811459-65237936.png)\n\n.flaskenv 文件中增加环境变量  `FLASK_ENV=\'development\'`   再次运行app.py\n\n这次.flaskenv中的环境变量都被Flask加载到了，与Flask环境无关的变量TEST_ENV的值也能被获取取了\n\n另：如果不使用python-dotenv来管理配置变量，其实也可以使用.ini这样的配置文件来存储配置信息。\n\n# 更多内容见 pypi', 'title': 'python-dotenv 管理项目中的环境变量', 'categories': ['[随笔分类]Python~常用库'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/13444500.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/13444500.html', 'postid': '13444500', 'source': {}, 'userid': '-2'}