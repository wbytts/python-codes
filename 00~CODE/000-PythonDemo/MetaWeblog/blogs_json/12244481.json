{'dateCreated': <DateTime '20200131T00:15:00' at 0x1a4f2996908>, 'description': '\n一阶导数与Soble算子\n二阶导数与拉普拉斯算子\n\n图像边缘：\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131000749556-477593931.png)\n\nSoble算子：\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131000938148-380549809.png)\n\n二阶导数：\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131001003542-964274075.png)\n\n拉普拉斯算子：\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200131001047400-1397840187.png)\n\n\n```python\nimport cv2 as cv\nimport numpy as np\n\n\n# 图像梯度（由x,y方向上的偏导数和偏移构成），有一阶导数（sobel算子）和二阶导数（Laplace算子）\n# 用于求解图像边缘，一阶的极大值，二阶的零点\n# 一阶偏导在图像中为一阶差分，再变成算子（即权值）与图像像素值乘积相加，二阶同理\ndef sobel_demo(image):\n    grad_x = cv.Sobel(image, cv.CV_32F, 1, 0)  # 采用Scharr边缘更突出\n    grad_y = cv.Sobel(image, cv.CV_32F, 0, 1)\n\n    gradx = cv.convertScaleAbs(grad_x)  # 由于算完的图像有正有负，所以对其取绝对值\n    grady = cv.convertScaleAbs(grad_y)\n\n    # 计算两个图像的权值和，dst = src1*alpha + src2*beta + gamma\n    gradxy = cv.addWeighted(gradx, 0.5, grady, 0.5, 0)\n\n    cv.imshow("gradx", gradx)\n    cv.imshow("grady", grady)\n    cv.imshow("gradient", gradxy)\n\n\ndef laplace_demo(image):  # 二阶导数，边缘更细\n    dst = cv.Laplacian(image,cv.CV_32F)\n    lpls = cv.convertScaleAbs(dst)\n    cv.imshow("laplace_demo", lpls)\n\n\ndef custom_laplace(image):\n    # 以下算子与上面的Laplace_demo()是一样的，增强采用np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])\n    kernel = np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])\n    dst = cv.filter2D(image, cv.CV_32F, kernel=kernel)\n    lpls = cv.convertScaleAbs(dst)\n    cv.imshow("custom_laplace", lpls)\n\n\ndef main():\n    src = cv.imread("../images/lena.jpg")\n    cv.imshow("lena",src)\n    # sobel_demo(src)\n    laplace_demo(src)\n    custom_laplace(src)\n    cv.waitKey(0)  # 等有键输入或者1000ms后自动将窗口消除，0表示只用键输入结束窗口\n    cv.destroyAllWindows()  # 关闭所有窗口\n\n\nif __name__ == \'__main__\':\n    main()\n```', 'title': 'opencv python：图像梯度', 'categories': ['[随笔分类]OpenCV~Python', '[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12244481.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12244481.html', 'postid': '12244481', 'source': {}, 'userid': '-2'}