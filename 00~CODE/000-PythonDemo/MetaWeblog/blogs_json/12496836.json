{'dateCreated': <DateTime '20200315T12:17:00' at 0x1a4f2567e88>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# 数据类型的转换\n\n## 概述\n\nJavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。\n\n```javascript\nvar x = y ? 1 : \'a\';\n```\n\n上面代码中，变量`x`到底是数值还是字符串，取决于另一个变量`y`的值。`y`为`true`时，`x`是一个数值；`y`为`false`时，`x`是一个字符串。这意味着，`x`的类型没法在编译阶段就知道，必须等到运行时才能知道。\n\n虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。比如，减法运算符预期左右两侧的运算子应该是数值，如果不是，就会自动将它们转为数值。\n\n```javascript\n\'4\' - \'3\' // 1\n```\n\n上面代码中，虽然是两个字符串相减，但是依然会得到结果数值`1`，原因就在于 JavaScript 将运算子自动转为了数值。\n\n本章讲解数据类型自动转换的规则。在此之前，先讲解如何手动强制转换数据类型。\n\n## 强制转换\n\n强制转换主要指使用`Number()`、`String()`和`Boolean()`三个函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。\n\n### Number()\n\n使用`Number`函数，可以将任意类型的值转化成数值。\n\n下面分成两种情况讨论，一种是参数是原始类型的值，另一种是参数是对象。\n\n**（1）原始类型值**\n\n原始类型值的转换规则如下。\n\n```javascript\n// 数值：转换后还是原来的值\nNumber(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber(\'324\') // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber(\'324abc\') // NaN\n\n// 空字符串转为0\nNumber(\'\') // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0\n```\n\n`Number`函数将字符串转为数值，要比`parseInt`函数严格很多。基本上，只要有一个字符无法转成数值，整个字符串就会被转为`NaN`。\n\n```javascript\nparseInt(\'42 cats\') // 42\nNumber(\'42 cats\') // NaN\n```\n\n上面代码中，`parseInt`逐个解析字符，而`Number`函数整体转换字符串的类型。\n\n另外，`parseInt`和`Number`函数都会自动过滤一个字符串前导和后缀的空格。\n\n```javascript\nparseInt(\'\\t\\v\\r12.34\\n\') // 12\nNumber(\'\\t\\v\\r12.34\\n\') // 12.34\n```\n\n**（2）对象**\n\n简单的规则是，`Number`方法的参数是对象时，将返回`NaN`，除非是包含单个数值的数组。\n\n```javascript\nNumber({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\n```\n\n之所以会这样，是因为`Number`背后的转换规则比较复杂。\n\n第一步，调用对象自身的`valueOf`方法。如果返回原始类型的值，则直接对该值使用`Number`函数，不再进行后续步骤。\n\n第二步，如果`valueOf`方法返回的还是对象，则改为调用对象自身的`toString`方法。如果`toString`方法返回原始类型的值，则对该值使用`Number`函数，不再进行后续步骤。\n\n第三步，如果`toString`方法返回的是对象，就报错。\n\n请看下面的例子。\n\n```javascript\nvar obj = {x: 1};\nNumber(obj) // NaN\n\n// 等同于\nif (typeof obj.valueOf() === \'object\') {\n  Number(obj.toString());\n} else {\n  Number(obj.valueOf());\n}\n```\n\n上面代码中，`Number`函数将`obj`对象转为数值。背后发生了一连串的操作，首先调用`obj.valueOf`方法, 结果返回对象本身；于是，继续调用`obj.toString`方法，这时返回字符串`[object Object]`，对这个字符串使用`Number`函数，得到`NaN`。\n\n默认情况下，对象的`valueOf`方法返回对象本身，所以一般总是会调用`toString`方法，而`toString`方法返回对象的类型字符串（比如`[object Object]`）。所以，会有下面的结果。\n\n```javascript\nNumber({}) // NaN\n```\n\n如果`toString`方法返回的不是原始类型的值，结果就会报错。\n\n```javascript\nvar obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nNumber(obj)\n// TypeError: Cannot convert object to primitive value\n```\n\n上面代码的`valueOf`和`toString`方法，返回的都是对象，所以转成数值时会报错。\n\n从上例还可以看到，`valueOf`和`toString`方法，都是可以自定义的。\n\n```javascript\nNumber({\n  valueOf: function () {\n    return 2;\n  }\n})\n// 2\n\nNumber({\n  toString: function () {\n    return 3;\n  }\n})\n// 3\n\nNumber({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// 2\n```\n\n上面代码对三个对象使用`Number`函数。第一个对象返回`valueOf`方法的值，第二个对象返回`toString`方法的值，第三个对象表示`valueOf`方法先于`toString`方法执行。\n\n### String()\n\n`String`函数可以将任意类型的值转化成字符串，转换规则如下。\n\n**（1）原始类型值**\n\n- **数值**：转为相应的字符串。\n- **字符串**：转换后还是原来的值。\n- **布尔值**：`true`转为字符串`"true"`，`false`转为字符串`"false"`。\n- **undefined**：转为字符串`"undefined"`。\n- **null**：转为字符串`"null"`。\n\n```javascript\nString(123) // "123"\nString(\'abc\') // "abc"\nString(true) // "true"\nString(undefined) // "undefined"\nString(null) // "null"\n```\n\n**（2）对象**\n\n`String`方法的参数如果是对象，返回一个类型字符串；如果是数组，返回该数组的字符串形式。\n\n```javascript\nString({a: 1}) // "[object Object]"\nString([1, 2, 3]) // "1,2,3"\n```\n\n`String`方法背后的转换规则，与`Number`方法基本相同，只是互换了`valueOf`方法和`toString`方法的执行顺序。\n\n1. 先调用对象自身的`toString`方法。如果返回原始类型的值，则对该值使用`String`函数，不再进行以下步骤。\n\n2. 如果`toString`方法返回的是对象，再调用原对象的`valueOf`方法。如果`valueOf`方法返回原始类型的值，则对该值使用`String`函数，不再进行以下步骤。\n\n3. 如果`valueOf`方法返回的是对象，就报错。\n\n下面是一个例子。\n\n```javascript\nString({a: 1})\n// "[object Object]"\n\n// 等同于\nString({a: 1}.toString())\n// "[object Object]"\n```\n\n上面代码先调用对象的`toString`方法，发现返回的是字符串`[object Object]`，就不再调用`valueOf`方法了。\n\n如果`toString`法和`valueOf`方法，返回的都是对象，就会报错。\n\n```javascript\nvar obj = {\n  valueOf: function () {\n    return {};\n  },\n  toString: function () {\n    return {};\n  }\n};\n\nString(obj)\n// TypeError: Cannot convert object to primitive value\n```\n\n下面是通过自定义`toString`方法，改变返回值的例子。\n\n```javascript\nString({\n  toString: function () {\n    return 3;\n  }\n})\n// "3"\n\nString({\n  valueOf: function () {\n    return 2;\n  }\n})\n// "[object Object]"\n\nString({\n  valueOf: function () {\n    return 2;\n  },\n  toString: function () {\n    return 3;\n  }\n})\n// "3"\n```\n\n上面代码对三个对象使用`String`函数。第一个对象返回`toString`方法的值（数值3），第二个对象返回的还是`toString`方法的值（`[object Object]`），第三个对象表示`toString`方法先于`valueOf`方法执行。\n\n### Boolean()\n\n`Boolean()`函数可以将任意类型的值转为布尔值。\n\n它的转换规则相对简单：除了以下五个值的转换结果为`false`，其他的值全部为`true`。\n\n- `undefined`\n- `null`\n- `0`（包含`-0`和`+0`）\n- `NaN`\n- `\'\'`（空字符串）\n\n```javascript\nBoolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean(\'\') // false\n```\n\n当然，`true`和`false`这两个布尔值不会发生变化。\n\n```javascript\nBoolean(true) // true\nBoolean(false) // false\n```\n\n注意，所有对象（包括空对象）的转换结果都是`true`，甚至连`false`对应的布尔对象`new Boolean(false)`也是`true`（详见《原始类型值的包装对象》一章）。\n\n```javascript\nBoolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true\n```\n\n所有对象的布尔值都是`true`，这是因为 JavaScript 语言设计的时候，出于性能的考虑，如果对象需要计算才能得到布尔值，对于`obj1 && obj2`这样的场景，可能会需要较多的计算。为了保证性能，就统一规定，对象的布尔值为`true`。\n\n## 自动转换\n\n下面介绍自动转换，它是以强制转换为基础的。\n\n遇到以下三种情况时，JavaScript 会自动转换数据类型，即转换是自动完成的，用户不可见。\n\n第一种情况，不同类型的数据互相运算。\n\n```javascript\n123 + \'abc\' // "123abc"\n```\n\n第二种情况，对非布尔值类型的数据求布尔值。\n\n```javascript\nif (\'abc\') {\n  console.log(\'hello\')\n}  // "hello"\n```\n\n第三种情况，对非数值类型的值使用一元运算符（即`+`和`-`）。\n\n```javascript\n+ {foo: \'bar\'} // NaN\n- [1, 2, 3] // NaN\n```\n\n自动转换的规则是这样的：预期什么类型的值，就调用该类型的转换函数。比如，某个位置预期为字符串，就调用`String`函数进行转换。如果该位置即可以是字符串，也可能是数值，那么默认转为数值。\n\n由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用`Boolean`、`Number`和`String`函数进行显式转换。\n\n### 自动转换为布尔值\n\nJavaScript 遇到预期为布尔值的地方（比如`if`语句的条件部分），就会将非布尔值的参数自动转换为布尔值。系统内部会自动调用`Boolean`函数。\n\n因此除了以下五个值，其他都是自动转为`true`。\n\n- `undefined`\n- `null`\n- `+0`或`-0`\n- `NaN`\n- `\'\'`（空字符串）\n\n下面这个例子中，条件部分的每个值都相当于`false`，使用否定运算符后，就变成了`true`。\n\n```javascript\nif ( !undefined\n  && !null\n  && !0\n  && !NaN\n  && !\'\'\n) {\n  console.log(\'true\');\n} // true\n```\n\n下面两种写法，有时也用于将一个表达式转为布尔值。它们内部调用的也是`Boolean`函数。\n\n```javascript\n// 写法一\nexpression ? true : false\n\n// 写法二\n!! expression\n```\n\n### 自动转换为字符串\n\nJavaScript 遇到预期为字符串的地方，就会将非字符串的值自动转为字符串。具体规则是，先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串。\n\n字符串的自动转换，主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。\n\n```javascript\n\'5\' + 1 // \'51\'\n\'5\' + true // "5true"\n\'5\' + false // "5false"\n\'5\' + {} // "5[object Object]"\n\'5\' + [] // "5"\n\'5\' + function (){} // "5function (){}"\n\'5\' + undefined // "5undefined"\n\'5\' + null // "5null"\n```\n\n这种自动转换很容易出错。\n\n```javascript\nvar obj = {\n  width: \'100\'\n};\n\nobj.width + 20 // "10020"\n```\n\n上面代码中，开发者可能期望返回`120`，但是由于自动转换，实际上返回了一个字符`10020`。\n\n### 自动转换为数值\n\nJavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用`Number`函数。\n\n除了加法运算符（`+`）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。\n\n```javascript\n\'5\' - \'2\' // 3\n\'5\' * \'2\' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n\'1\' - 1   // 0\n\'5\' * []    // 0\nfalse / \'5\' // 0\n\'abc\' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n```\n\n上面代码中，运算符两侧的运算子，都被转成了数值。\n\n> 注意：`null`转为数值时为`0`，而`undefined`转为数值时为`NaN`。\n\n一元运算符也会把运算子转成数值。\n\n```javascript\n+\'abc\' // NaN\n-\'abc\' // NaN\n+true // 1\n-false // 0\n```\n\n## 参考链接\n\n- Axel Rauschmayer, [What is {} + {} in JavaScript?](http://www.2ality.com/2012/01/object-plus-object.html)\n- Axel Rauschmayer, [JavaScript quirk 1: implicit conversion of values](http://www.2ality.com/2013/04/quirk-implicit-conversion.html)\n- Benjie Gillam, [Quantum JavaScript?](http://www.benjiegillam.com/2013/06/quantum-javascript/)', 'title': 'javascript：基本数据类型转换', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12496836.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12496836.html', 'postid': '12496836', 'source': {}, 'userid': '-2'}