{'dateCreated': <DateTime '20200213T22:31:00' at 0x1a4f2583388>, 'description': '# EPF滤波概述\n均值与滤波的缺点：并没有考虑中心像素点对整个输出像素的贡献，实际上锚定的那个点贡献应该是最大的\n\n高斯滤波的缺点：当边缘值梯度很大的时候，应减少中心像素点的权重，而高斯滤波没有考虑\n\n边缘保留滤波：\n\n- 高斯双边\n- 均值迁移\n- 局部均方差\n\n# 高斯双边滤波\n![](https://img2018.cnblogs.com/blog/1446249/202002/1446249-20200213223045621-1599819238.png)\n\n# 非局部均值滤波\n![](https://img2018.cnblogs.com/blog/1446249/202002/1446249-20200213223102972-1854585415.png)\n\n# example\n\n```c++\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace cv;\nusing namespace std;\n\nvoid add_salt_and_pepper_noise(Mat& image);\nvoid add_gaussian_noise(Mat& image);\n\nint main(int argc, char** argv)\n{\n    Mat src = imread("f:/images/lena.jpg");\n    if (src.empty())\n    {\n        printf("Could not find the image!\\n");\n        return -1;\n    }\n\n    namedWindow("input", WINDOW_AUTOSIZE);\n    imshow("input", src);\n\n    //add_salt_and_pepper_noise(src);\n    add_gaussian_noise(src);\n    Mat dst;\n    // 中值滤波\n    medianBlur(src, dst, 3);\n    imshow("median denoise demo", dst);\n\n    // 高斯滤波  高斯滤波对椒盐噪声去噪效果不理想\n    GaussianBlur(src, dst, Size(5, 5), 0);\n    imshow("guassian denoise demo", dst);\n\n    // 高斯双边\n    bilateralFilter(src, dst, 0, 100, 10);\n    imshow("bilateralF denoise demo", dst);\n\n    // 如果不加噪声， 直接进行高斯双边，去掉微小细节，保留边缘\n    src = imread("f:/images/lena.jpg");\n    bilateralFilter(src, dst, 0, 100, 10);\n    imshow("src - bilateralFilter", dst);\n\n    // NLM 非局部均值去燥\n    src = imread("f:/images/lena.jpg");\n    add_gaussian_noise(src);\n\t\t// 除了彩色版本，还有灰度版本等一些其他版本\n    fastNlMeansDenoisingColored(src, dst, 3., 3., 7, 21);\n    imshow("NLM", dst);\n\n    waitKey(0);\n    destroyAllWindows();\n\n    return 0;\n}\n\nvoid add_salt_and_pepper_noise(Mat& image) {\n    RNG rng(12345);\n    int h = image.rows;\n    int w = image.cols;\n    int nums = 10000;\n    for (int i = 0; i < nums; i++) {\n        int x = rng.uniform(0, w);\n        int y = rng.uniform(0, h);\n        if (i % 2 == 1) {\n            image.at<Vec3b>(y, x) = Vec3b(255, 255, 255);\n        }\n        else {\n            image.at<Vec3b>(y, x) = Vec3b(0, 0, 0);\n        }\n    }\n    imshow("salt and pepper noise", image);\n}\n\nvoid add_gaussian_noise(Mat& image) {\n    // 高斯噪声\n    Mat noise = Mat::zeros(image.size(), image.type());\n    // 图像，均值，方差，显示一幅随机图像\n    randn(noise, Scalar(15, 25, 45), Scalar(30, 30, 30));\n    Mat dst;\n    add(image, noise, dst);\n    dst.copyTo(image);\n    imshow("gaussian noise", image);\n}\n```', 'title': 'opencv：边缘保留滤波', 'categories': ['[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12305635.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12305635.html', 'postid': '12305635', 'source': {}, 'userid': '-2'}