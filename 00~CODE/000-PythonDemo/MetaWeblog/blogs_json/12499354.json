{'dateCreated': <DateTime '20200315T18:58:00' at 0x1a4f2545048>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# window 对象\n\n## 概述\n\n浏览器里面，`window`对象（注意，`w`为小写）指当前的浏览器窗口。它也是当前页面的顶层对象，即最高一层的对象，所有其他对象都是它的下属。一个变量如果未声明，那么默认就是顶层对象的属性。\n\n```javascript\na = 1;\nwindow.a // 1\n```\n\n上面代码中，`a`是一个没有声明就直接赋值的变量，它自动成为顶层对象的属性。\n\n`window`有自己的实体含义，其实不适合当作最高一层的顶层对象，这是一个语言的设计失误。最早，设计这门语言的时候，原始设想是语言内置的对象越少越好，这样可以提高浏览器的性能。因此，语言设计者 Brendan Eich 就把`window`对象当作顶层对象，所有未声明就赋值的变量都自动变成`window`对象的属性。这种设计使得编译阶段无法检测出未声明变量，但到了今天已经没有办法纠正了。\n\n## window 对象的属性\n\n### window.name\n\n`window.name`属性是一个字符串，表示当前浏览器窗口的名字。窗口不一定需要名字，这个属性主要配合超链接和表单的`target`属性使用。\n\n```javascript\nwindow.name = \'Hello World!\';\nconsole.log(window.name)\n// "Hello World!"\n```\n\n该属性只能保存字符串，如果写入的值不是字符串，会自动转成字符串。各个浏览器对这个值的储存容量有所不同，但是一般来说，可以高达几MB。\n\n只要浏览器窗口不关闭，这个属性是不会消失的。举例来说，访问`a.com`时，该页面的脚本设置了`window.name`，接下来在同一个窗口里面载入了`b.com`，新页面的脚本可以读到上一个网页设置的`window.name`。页面刷新也是这种情况。一旦浏览器窗口关闭后，该属性保存的值就会消失，因为这时窗口已经不存在了。\n\n### window.closed，window.opener\n\n`window.closed`属性返回一个布尔值，表示窗口是否关闭。\n\n```javascript\nwindow.closed // false\n```\n\n上面代码检查当前窗口是否关闭。这种检查意义不大，因为只要能运行代码，当前窗口肯定没有关闭。这个属性一般用来检查，使用脚本打开的新窗口是否关闭。\n\n```javascript\nvar popup = window.open();\n\nif ((popup !== null) && !popup.closed) {\n  // 窗口仍然打开着\n}\n```\n\n`window.opener`属性表示打开当前窗口的父窗口。如果当前窗口没有父窗口（即直接在地址栏输入打开），则返回`null`。\n\n```javascript\nwindow.open().opener === window // true\n```\n\n上面表达式会打开一个新窗口，然后返回`true`。\n\n如果两个窗口之间不需要通信，建议将子窗口的`opener`属性显式设为`null`，这样可以减少一些安全隐患。\n\n```javascript\nvar newWin = window.open(\'example.html\', \'newWindow\', \'height=400,width=400\');\nnewWin.opener = null;\n```\n\n上面代码中，子窗口的`opener`属性设为`null`，两个窗口之间就没办法再联系了。\n\n通过`opener`属性，可以获得父窗口的全局属性和方法，但只限于两个窗口同源的情况（参见《同源限制》一章），且其中一个窗口由另一个打开。`<a>`元素添加`rel="noopener"`属性，可以防止新打开的窗口获取父窗口，减轻被恶意网站修改父窗口 URL 的风险。\n\n```html\n<a href="https://an.evil.site" target="_blank" rel="noopener">\n恶意网站\n</a>\n```\n\n### window.self，window.window\n\n`window.self`和`window.window`属性都指向窗口本身。这两个属性只读。\n\n```javascript\nwindow.self === window // true\nwindow.window === window // true\n```\n\n### window.frames，window.length\n\n`window.frames`属性返回一个类似数组的对象，成员为页面内所有框架窗口，包括`frame`元素和`iframe`元素。`window.frames[0]`表示页面中第一个框架窗口。\n\n如果`iframe`元素设置了`id`或`name`属性，那么就可以用属性值，引用这个`iframe`窗口。比如`<iframe name="myIFrame">`可以用`frames[\'myIFrame\']`或者`frames.myIFrame`来引用。\n\n`frames`属性实际上是`window`对象的别名。\n\n```javascript\nframes === window // true\n```\n\n因此，`frames[0]`也可以用`window[0]`表示。但是，从语义上看，`frames`更清晰，而且考虑到`window`还是全局对象，因此推荐表示多窗口时，总是使用`frames[0]`的写法。更多介绍请看下文的《多窗口操作》部分。\n\n`window.length`属性返回当前网页包含的框架总数。如果当前网页不包含`frame`和`iframe`元素，那么`window.length`就返回`0`。\n\n```javascript\nwindow.frames.length === window.length // true\n```\n\n上面代码表示，`window.frames.length`与`window.length`应该是相等的。\n\n### window.frameElement\n\n`window.frameElement`属性主要用于当前窗口嵌在另一个网页的情况（嵌入`<object>`、`<iframe>`或`<embed>`元素），返回当前窗口所在的那个元素节点。如果当前窗口是顶层窗口，或者所嵌入的那个网页不是同源的，该属性返回`null`。\n\n```javascript\n// HTML 代码如下\n// <iframe src="about.html"></iframe>\n\n// 下面的脚本在 about.html 里面\nvar frameEl = window.frameElement;\nif (frameEl) {\n  frameEl.src = \'other.html\';\n}\n```\n\n上面代码中，`frameEl`变量就是`<iframe>`元素。\n\n### window.top，window.parent\n\n`window.top`属性指向最顶层窗口，主要用于在框架窗口（frame）里面获取顶层窗口。\n\n`window.parent`属性指向父窗口。如果当前窗口没有父窗口，`window.parent`指向自身。\n\n```javascript\nif (window.parent !== window.top) {\n  // 表明当前窗口嵌入不止一层\n}\n```\n\n对于不包含框架的网页，这两个属性等同于`window`对象。\n\n### window.status\n\n`window.status`属性用于读写浏览器状态栏的文本。但是，现在很多浏览器都不允许改写状态栏文本，所以使用这个方法不一定有效。\n\n### window.devicePixelRatio\n\n`window.devicePixelRatio`属性返回一个数值，表示一个 CSS 像素的大小与一个物理像素的大小之间的比率。也就是说，它表示一个 CSS 像素由多少个物理像素组成。它可以用于判断用户的显示环境，如果这个比率较大，就表示用户正在使用高清屏幕，因此可以显示较大像素的图片。\n\n### 位置大小属性\n\n以下属性返回`window`对象的位置信息和大小信息。\n\n**（1）window.screenX，window.screenY**\n\n`window.screenX`和`window.screenY`属性，返回浏览器窗口左上角相对于当前屏幕左上角的水平距离和垂直距离（单位像素）。这两个属性只读。\n\n**（2） window.innerHeight，window.innerWidth**\n\n`window.innerHeight`和`window.innerWidth`属性，返回网页在当前窗口中可见部分的高度和宽度，即“视口”（viewport）的大小（单位像素）。这两个属性只读。\n\n用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。因为这时网页的像素大小不变（比如宽度还是960像素），只是每个像素占据的屏幕空间变大了，因为可见部分（视口）就变小了。\n\n注意，这两个属性值包括滚动条的高度和宽度。\n\n**（3）window.outerHeight，window.outerWidth**\n\n`window.outerHeight`和`window.outerWidth`属性返回浏览器窗口的高度和宽度，包括浏览器菜单和边框（单位像素）。这两个属性只读。\n\n**（4）window.scrollX，window.scrollY**\n\n`window.scrollX`属性返回页面的水平滚动距离，`window.scrollY`属性返回页面的垂直滚动距离，单位都为像素。这两个属性只读。\n\n注意，这两个属性的返回值不是整数，而是双精度浮点数。如果页面没有滚动，它们的值就是`0`。\n\n举例来说，如果用户向下拉动了垂直滚动条75像素，那么`window.scrollY`就是75左右。用户水平向右拉动水平滚动条200像素，`window.scrollX`就是200左右。\n\n```javascript\nif (window.scrollY < 75) {\n  window.scroll(0, 75);\n}\n```\n\n上面代码中，如果页面向下滚动的距离小于75像素，那么页面向下滚动75像素。\n\n**（5）window.pageXOffset，window.pageYOffset**\n\n`window.pageXOffset`属性和`window.pageYOffset`属性，是`window.scrollX`和`window.scrollY`别名。\n\n### 组件属性\n\n组件属性返回浏览器的组件对象。这样的属性有下面几个。\n\n- `window.locationbar`：地址栏对象\n- `window.menubar`：菜单栏对象\n- `window.scrollbars`：窗口的滚动条对象\n- `window.toolbar`：工具栏对象\n- `window.statusbar`：状态栏对象\n- `window.personalbar`：用户安装的个人工具栏对象\n\n这些对象的`visible`属性是一个布尔值，表示这些组件是否可见。这些属性只读。\n\n```javascript\nwindow.locationbar.visible\nwindow.menubar.visible\nwindow.scrollbars.visible\nwindow.toolbar.visible\nwindow.statusbar.visible\nwindow.personalbar.visible\n```\n\n### 全局对象属性\n\n全局对象属性指向一些浏览器原生的全局对象。\n\n- `window.document`：指向`document`对象，详见《document 对象》一章。注意，这个属性有同源限制。只有来自同源的脚本才能读取这个属性。\n- `window.location`：指向`Location`对象，用于获取当前窗口的 URL 信息。它等同于`document.location`属性，详见《Location 对象》一章。\n- `window.navigator`：指向`Navigator`对象，用于获取环境信息，详见《Navigator 对象》一章。\n- `window.history`：指向`History`对象，表示浏览器的浏览历史，详见《History 对象》一章。\n- `window.localStorage`：指向本地储存的 localStorage 数据，详见《Storage 接口》一章。\n- `window.sessionStorage`：指向本地储存的 sessionStorage 数据，详见《Storage 接口》一章。\n- `window.console`：指向`console`对象，用于操作控制台，详见《console 对象》一章。\n- `window.screen`：指向`Screen`对象，表示屏幕信息，详见《Screen 对象》一章。\n\n### window.isSecureContext\n\n`window.isSecureContext`属性返回一个布尔值，表示当前窗口是否处在加密环境。如果是 HTTPS 协议，就是`true`，否则就是`false`。\n\n## window 对象的方法\n\n### window.alert()，window.prompt()，window.confirm()\n\n`window.alert()`、`window.prompt()`、`window.confirm()`都是浏览器与用户互动的全局方法。它们会弹出不同的对话框，要求用户做出回应。注意，这三个方法弹出的对话框，都是浏览器统一规定的式样，无法定制。\n\n**（1）window.alert()**\n\n`window.alert()`方法弹出的对话框，只有一个“确定”按钮，往往用来通知用户某些信息。\n\n```javascript\nwindow.alert(\'Hello World\');\n```\n\n用户只有点击“确定”按钮，对话框才会消失。对话框弹出期间，浏览器窗口处于冻结状态，如果不点“确定”按钮，用户什么也干不了。\n\n`window.alert()`方法的参数只能是字符串，没法使用 CSS 样式，但是可以用`\\n`指定换行。\n\n```javascript\nalert(\'本条提示\\n分成两行\');\n```\n\n**（2）window.prompt()**\n\n`window.prompt()`方法弹出的对话框，提示文字的下方，还有一个输入框，要求用户输入信息，并有“确定”和“取消”两个按钮。它往往用来获取用户输入的数据。\n\n```javascript\nvar result = prompt(\'您的年龄？\', 25)\n```\n\n上面代码会跳出一个对话框，文字提示为“您的年龄？”，要求用户在对话框中输入自己的年龄（默认显示25）。用户填入的值，会作为返回值存入变量`result`。\n\n`window.prompt()`的返回值有两种情况，可能是字符串（有可能是空字符串），也有可能是`null`。具体分成三种情况。\n\n1. 用户输入信息，并点击“确定”，则用户输入的信息就是返回值。\n2. 用户没有输入信息，直接点击“确定”，则输入框的默认值就是返回值。\n3. 用户点击了“取消”（或者按了 ESC 按钮），则返回值是`null`。\n\n`window.prompt()`方法的第二个参数是可选的，但是最好总是提供第二个参数，作为输入框的默认值。\n\n**（3）window.confirm()**\n\n`window.confirm()`方法弹出的对话框，除了提示信息之外，只有“确定”和“取消”两个按钮，往往用来征询用户是否同意。\n\n```javascript\nvar result = confirm(\'你最近好吗？\');\n```\n\n上面代码弹出一个对话框，上面只有一行文字“你最近好吗？”，用户选择点击“确定”或“取消”。\n\n`confirm`方法返回一个布尔值，如果用户点击“确定”，返回`true`；如果用户点击“取消”，则返回`false`。\n\n```javascript\nvar okay = confirm(\'Please confirm this message.\');\nif (okay) {\n  // 用户按下“确定”\n} else {\n  // 用户按下“取消”\n}\n```\n\n`confirm`的一个用途是，用户离开当前页面时，弹出一个对话框，问用户是否真的要离开。\n\n```javascript\nwindow.onunload = function () {\n  return window.confirm(\'你确定要离开当面页面吗？\');\n}\n```\n\n这三个方法都具有堵塞效应，一旦弹出对话框，整个页面就是暂停执行，等待用户做出反应。\n\n### window.open(), window.close()，window.stop()\n\n**（1）window.open()**\n\n`window.open`方法用于新建另一个浏览器窗口，类似于浏览器菜单的新建窗口选项。它会返回新窗口的引用，如果无法新建窗口，则返回`null`。\n\n```javascript\nvar popup = window.open(\'somefile.html\');\n```\n\n上面代码会让浏览器弹出一个新建窗口，网址是当前域名下的`somefile.html`。\n\n`open`方法一共可以接受三个参数。\n\n```javascript\nwindow.open(url, windowName, [windowFeatures])\n```\n\n- `url`：字符串，表示新窗口的网址。如果省略，默认网址就是`about:blank`。\n- `windowName`：字符串，表示新窗口的名字。如果该名字的窗口已经存在，则占用该窗口，不再新建窗口。如果省略，就默认使用`_blank`，表示新建一个没有名字的窗口。另外还有几个预设值，`_self`表示当前窗口，`_top`表示顶层窗口，`_parent`表示上一层窗口。\n- `windowFeatures`：字符串，内容为逗号分隔的键值对（详见下文），表示新窗口的参数，比如有没有提示栏、工具条等等。如果省略，则默认打开一个完整 UI 的新窗口。如果新建的是一个已经存在的窗口，则该参数不起作用，浏览器沿用以前窗口的参数。\n\n下面是一个例子。\n\n```javascript\nvar popup = window.open(\n  \'somepage.html\',\n  \'DefinitionsWindows\',\n  \'height=200,width=200,location=no,status=yes,resizable=yes,scrollbars=yes\'\n);\n```\n\n上面代码表示，打开的新窗口高度和宽度都为200像素，没有地址栏，但有状态栏和滚动条，允许用户调整大小。\n\n第三个参数可以设定如下属性。\n\n- left：新窗口距离屏幕最左边的距离（单位像素）。注意，新窗口必须是可见的，不能设置在屏幕以外的位置。\n- top：新窗口距离屏幕最顶部的距离（单位像素）。\n- height：新窗口内容区域的高度（单位像素），不得小于100。\n- width：新窗口内容区域的宽度（单位像素），不得小于100。\n- outerHeight：整个浏览器窗口的高度（单位像素），不得小于100。\n- outerWidth：整个浏览器窗口的宽度（单位像素），不得小于100。\n- menubar：是否显示菜单栏。\n- toolbar：是否显示工具栏。\n- location：是否显示地址栏。\n- personalbar：是否显示用户自己安装的工具栏。\n- status：是否显示状态栏。\n- dependent：是否依赖父窗口。如果依赖，那么父窗口最小化，该窗口也最小化；父窗口关闭，该窗口也关闭。\n- minimizable：是否有最小化按钮，前提是`dialog=yes`。\n- noopener：新窗口将与父窗口切断联系，即新窗口的`window.opener`属性返回`null`，父窗口的`window.open()`方法也返回`null`。\n- resizable：新窗口是否可以调节大小。\n- scrollbars：是否允许新窗口出现滚动条。\n- dialog：新窗口标题栏是否出现最大化、最小化、恢复原始大小的控件。\n- titlebar：新窗口是否显示标题栏。\n- alwaysRaised：是否显示在所有窗口的顶部。\n- alwaysLowered：是否显示在父窗口的底下。\n- close：新窗口是否显示关闭按钮。\n\n对于那些可以打开和关闭的属性，设为`yes`或`1`或不设任何值就表示打开，比如`status=yes`、`status=1`、`status`都会得到同样的结果。如果想设为关闭，不用写`no`，而是直接省略这个属性即可。也就是说，如果在第三个参数中设置了一部分属性，其他没有被设置的`yes/no`属性都会被设成`no`，只有`titlebar`和关闭按钮除外（它们的值默认为`yes`）。\n\n上面这些属性，属性名与属性值之间用等号连接，属性与属性之间用逗号分隔。\n\n```javascript\n\'height=200,width=200,location=no,status=yes,resizable=yes,scrollbars=yes\'\n```\n\n另外，`open()`方法的第二个参数虽然可以指定已经存在的窗口，但是不等于可以任意控制其他窗口。为了防止被不相干的窗口控制，浏览器只有在两个窗口同源，或者目标窗口被当前网页打开的情况下，才允许`open`方法指向该窗口。\n\n`window.open`方法返回新窗口的引用。\n\n```javascript\nvar windowB = window.open(\'windowB.html\', \'WindowB\');\nwindowB.window.name // "WindowB"\n```\n\n注意，如果新窗口和父窗口不是同源的（即不在同一个域），它们彼此不能获取对方窗口对象的内部属性。\n\n下面是另一个例子。\n\n```javascript\nvar w = window.open();\nconsole.log(\'已经打开新窗口\');\nw.location = \'http://example.com\';\n```\n\n上面代码先打开一个新窗口，然后在该窗口弹出一个对话框，再将网址导向`example.com`。\n\n由于`open`这个方法很容易被滥用，许多浏览器默认都不允许脚本自动新建窗口。只允许在用户点击链接或按钮时，脚本做出反应，弹出新窗口。因此，有必要检查一下打开新窗口是否成功。\n\n```javascript\nvar popup = window.open();\nif (popup === null) {\n  // 新建窗口失败\n}\n```\n\n**（2）window.close()**\n\n`window.close`方法用于关闭当前窗口，一般只用来关闭`window.open`方法新建的窗口。\n\n```javascript\npopup.close()\n```\n\n该方法只对顶层窗口有效，`iframe`框架之中的窗口使用该方法无效。\n\n**（3）window.stop()**\n\n`window.stop()`方法完全等同于单击浏览器的停止按钮，会停止加载图像、视频等正在或等待加载的对象。\n\n```javascript\nwindow.stop()\n```\n\n### window.moveTo()，window.moveBy()\n\n`window.moveTo()`方法用于移动浏览器窗口到指定位置。它接受两个参数，分别是窗口左上角距离屏幕左上角的水平距离和垂直距离，单位为像素。\n\n```javascript\nwindow.moveTo(100, 200)\n```\n\n上面代码将窗口移动到屏幕`(100, 200)`的位置。\n\n`window.moveBy()`方法将窗口移动到一个相对位置。它接受两个参数，分别是窗口左上角向右移动的水平距离和向下移动的垂直距离，单位为像素。\n\n```javascript\nwindow.moveBy(25, 50)\n```\n\n上面代码将窗口向右移动25像素、向下移动50像素。\n\n为了防止有人滥用这两个方法，随意移动用户的窗口，目前只有一种情况，浏览器允许用脚本移动窗口：该窗口是用`window.open()`方法新建的，并且窗口里只有它一个 Tab 页。除此以外的情况，使用上面两个方法都是无效的。\n\n### window.resizeTo()，window.resizeBy()\n\n`window.resizeTo()`方法用于缩放窗口到指定大小。\n\n它接受两个参数，第一个是缩放后的窗口宽度（`outerWidth`属性，包含滚动条、标题栏等等），第二个是缩放后的窗口高度（`outerHeight`属性）。\n\n```javascript\nwindow.resizeTo(\n  window.screen.availWidth / 2,\n  window.screen.availHeight / 2\n)\n```\n\n上面代码将当前窗口缩放到，屏幕可用区域的一半宽度和高度。\n\n`window.resizeBy()`方法用于缩放窗口。它与`window.resizeTo()`的区别是，它按照相对的量缩放，`window.resizeTo()`需要给出缩放后的绝对大小。\n\n它接受两个参数，第一个是水平缩放的量，第二个是垂直缩放的量，单位都是像素。\n\n```javascript\nwindow.resizeBy(-200, -200)\n```\n\n上面的代码将当前窗口的宽度和高度，都缩小200像素。\n\n### window.scrollTo()，window.scroll()，window.scrollBy()\n\n`window.scrollTo`方法用于将文档滚动到指定位置。它接受两个参数，表示滚动后位于窗口左上角的页面坐标。\n\n```javascript\nwindow.scrollTo(x-coord, y-coord)\n```\n\n它也可以接受一个配置对象作为参数。\n\n```javascript\nwindow.scrollTo(options)\n```\n\n配置对象`options`有三个属性。\n\n- `top`：滚动后页面左上角的垂直坐标，即 y 坐标。\n- `left`：滚动后页面左上角的水平坐标，即 x 坐标。\n- `behavior`：字符串，表示滚动的方式，有三个可能值（`smooth`、`instant`、`auto`），默认值为`auto`。\n\n```javascript\nwindow.scrollTo({\n  top: 1000,\n  behavior: \'smooth\'\n});\n```\n\n`window.scroll()`方法是`window.scrollTo()`方法的别名。\n\n`window.scrollBy()`方法用于将网页滚动指定距离（单位像素）。它接受两个参数：水平向右滚动的像素，垂直向下滚动的像素。\n\n```javascript\nwindow.scrollBy(0, window.innerHeight)\n```\n\n上面代码用于将网页向下滚动一屏。\n\n如果不是要滚动整个文档，而是要滚动某个元素，可以使用下面三个属性和方法。\n\n- Element.scrollTop\n- Element.scrollLeft\n- Element.scrollIntoView()\n\n### window.print()\n\n`window.print`方法会跳出打印对话框，与用户点击菜单里面的“打印”命令效果相同。\n\n常见的打印按钮代码如下。\n\n```javascript\ndocument.getElementById(\'printLink\').onclick = function () {\n  window.print();\n}\n```\n\n非桌面设备（比如手机）可能没有打印功能，这时可以这样判断。\n\n```javascript\nif (typeof window.print === \'function\') {\n  // 支持打印功能\n}\n```\n\n### window.focus()，window.blur()\n\n`window.focus()`方法会激活窗口，使其获得焦点，出现在其他窗口的前面。\n\n```javascript\nvar popup = window.open(\'popup.html\', \'Popup Window\');\n\nif ((popup !== null) && !popup.closed) {\n  popup.focus();\n}\n```\n\n上面代码先检查`popup`窗口是否依然存在，确认后激活该窗口。\n\n`window.blur()`方法将焦点从窗口移除。\n\n当前窗口获得焦点时，会触发`focus`事件；当前窗口失去焦点时，会触发`blur`事件。\n\n### window.getSelection()\n\n`window.getSelection`方法返回一个`Selection`对象，表示用户现在选中的文本。\n\n```javascript\nvar selObj = window.getSelection();\n```\n\n使用`Selection`对象的`toString`方法可以得到选中的文本。\n\n```javascript\nvar selectedText = selObj.toString();\n```\n\n### window.getComputedStyle()，window.matchMedia()\n\n`window.getComputedStyle()`方法接受一个元素节点作为参数，返回一个包含该元素的最终样式信息的对象，详见《CSS 操作》一章。\n\n`window.matchMedia()`方法用来检查 CSS 的`mediaQuery`语句，详见《CSS 操作》一章。\n\n### window.requestAnimationFrame()\n\n`window.requestAnimationFrame()`方法跟`setTimeout`类似，都是推迟某个函数的执行。不同之处在于，`setTimeout`必须指定推迟的时间，`window.requestAnimationFrame()`则是推迟到浏览器下一次重流时执行，执行完才会进行下一次重绘。重绘通常是 16ms 执行一次，不过浏览器会自动调节这个速率，比如网页切换到后台 Tab 页时，`requestAnimationFrame()`会暂停执行。\n\n如果某个函数会改变网页的布局，一般就放在`window.requestAnimationFrame()`里面执行，这样可以节省系统资源，使得网页效果更加平滑。因为慢速设备会用较慢的速率重流和重绘，而速度更快的设备会有更快的速率。\n\n该方法接受一个回调函数作为参数。\n\n```javascript\nwindow.requestAnimationFrame(callback)\n```\n\n上面代码中，`callback`是一个回调函数。`callback`执行时，它的参数就是系统传入的一个高精度时间戳（`performance.now()`的返回值），单位是毫秒，表示距离网页加载的时间。\n\n`window.requestAnimationFrame()`的返回值是一个整数，这个整数可以传入`window.cancelAnimationFrame()`，用来取消回调函数的执行。\n\n下面是一个`window.requestAnimationFrame()`执行网页动画的例子。\n\n```javascript\nvar element = document.getElementById(\'animate\');\nelement.style.position = \'absolute\';\n\nvar start = null;\n\nfunction step(timestamp) {\n  if (!start) start = timestamp;\n  var progress = timestamp - start;\n  // 元素不断向左移，最大不超过200像素\n  element.style.left = Math.min(progress / 10, 200) + \'px\';\n  // 如果距离第一次执行不超过 2000 毫秒，\n  // 就继续执行动画\n  if (progress < 2000) {\n    window.requestAnimationFrame(step);\n  }\n}\n\nwindow.requestAnimationFrame(step);\n```\n\n上面代码定义了一个网页动画，持续时间是2秒，会让元素向右移动。\n\n### window.requestIdleCallback()\n\n`window.requestIdleCallback()`跟`setTimeout`类似，也是将某个函数推迟执行，但是它保证将回调函数推迟到系统资源空闲时执行。也就是说，如果某个任务不是很关键，就可以使用`window.requestIdleCallback()`将其推迟执行，以保证网页性能。\n\n它跟`window.requestAnimationFrame()`的区别在于，后者指定回调函数在下一次浏览器重排时执行，问题在于下一次重排时，系统资源未必空闲，不一定能保证在16毫秒之内完成；`window.requestIdleCallback()`可以保证回调函数在系统资源空闲时执行。\n\n该方法接受一个回调函数和一个配置对象作为参数。配置对象可以指定一个推迟执行的最长时间，如果过了这个时间，回调函数不管系统资源有无空虚，都会执行。\n\n```javascript\nwindow.requestIdleCallback(callback[, options])\n```\n\n`callback`参数是一个回调函数。该回调函数执行时，系统会传入一个`IdleDeadline`对象作为参数。`IdleDeadline`对象有一个`didTimeout`属性（布尔值，表示是否为超时调用）和一个`timeRemaining()`方法（返回该空闲时段剩余的毫秒数）。\n\n`options`参数是一个配置对象，目前只有`timeout`一个属性，用来指定回调函数推迟执行的最大毫秒数。该参数可选。\n\n`window.requestIdleCallback()`方法返回一个整数。该整数可以传入`window.cancelIdleCallback()`取消回调函数。\n\n下面是一个例子。\n\n```javascript\nrequestIdleCallback(myNonEssentialWork);\n\nfunction myNonEssentialWork(deadline) {\n  while (deadline.timeRemaining() > 0) {\n    doWorkIfNeeded();\n  }\n}\n```\n\n上面代码中，`requestIdleCallback()`用来执行非关键任务`myNonEssentialWork`。该任务先确认本次空闲时段有剩余时间，然后才真正开始执行任务。\n\n下面是指定`timeout`的例子。\n\n```javascript\nrequestIdleCallback(processPendingAnalyticsEvents, { timeout: 2000 });\n```\n\n上面代码指定，`processPendingAnalyticsEvents`必须在未来2秒之内执行。\n\n如果由于超时导致回调函数执行，则`deadline.timeRemaining()`返回`0`，`deadline.didTimeout`返回`true`。\n\n如果多次执行`window.requestIdleCallback()`，指定多个回调函数，那么这些回调函数将排成一个队列，按照先进先出的顺序执行。\n\n## 事件\n\n`window`对象可以接收以下事件。\n\n### load 事件和 onload 属性\n\n`load`事件发生在文档在浏览器窗口加载完毕时。`window.onload`属性可以指定这个事件的回调函数。\n\n```javascript\nwindow.onload = function() {\n  var elements = document.getElementsByClassName(\'example\');\n  for (var i = 0; i < elements.length; i++) {\n    var elt = elements[i];\n    // ...\n  }\n};\n```\n\n上面代码在网页加载完毕后，获取指定元素并进行处理。\n\n### error 事件和 onerror 属性\n\n浏览器脚本发生错误时，会触发`window`对象的`error`事件。我们可以通过`window.onerror`属性对该事件指定回调函数。\n\n```javascript\nwindow.onerror = function (message, filename, lineno, colno, error) {\n  console.log("出错了！--> %s", error.stack);\n};\n```\n\n由于历史原因，`window`的`error`事件的回调函数不接受错误对象作为参数，而是一共可以接受五个参数，它们的含义依次如下。\n\n- 出错信息\n- 出错脚本的网址\n- 行号\n- 列号\n- 错误对象\n\n老式浏览器只支持前三个参数。\n\n并不是所有的错误，都会触发 JavaScript 的`error`事件（即让 JavaScript 报错）。一般来说，只有 JavaScript 脚本的错误，才会触发这个事件，而像资源文件不存在之类的错误，都不会触发。\n\n下面是一个例子，如果整个页面未捕获错误超过3个，就显示警告。\n\n```javascript\nwindow.onerror = function(msg, url, line) {\n  if (onerror.num++ > onerror.max) {\n    alert(\'ERROR: \' + msg + \'\\n\' + url + \':\' + line);\n    return true;\n  }\n}\nonerror.max = 3;\nonerror.num = 0;\n```\n\n需要注意的是，如果脚本网址与网页网址不在同一个域（比如使用了 CDN），浏览器根本不会提供详细的出错信息，只会提示出错，错误类型是“Script error.”，行号为0，其他信息都没有。这是浏览器防止向外部脚本泄漏信息。一个解决方法是在脚本所在的服务器，设置`Access-Control-Allow-Origin`的 HTTP 头信息。\n\n```bash\nAccess-Control-Allow-Origin: *\n```\n\n然后，在网页的`<script>`标签中设置`crossorigin`属性。\n\n```html\n<script crossorigin="anonymous" src="//example.com/file.js"></script>\n```\n\n上面代码的`crossorigin="anonymous"`表示，读取文件不需要身份信息，即不需要 cookie 和 HTTP 认证信息。如果设为`crossorigin="use-credentials"`，就表示浏览器会上传 cookie 和 HTTP 认证信息，同时还需要服务器端打开 HTTP 头信息`Access-Control-Allow-Credentials`。\n\n### window 对象的事件监听属性\n\n除了具备元素节点都有的 GlobalEventHandlers 接口，`window`对象还具有以下的事件监听函数属性。\n\n- `window.onafterprint`：`afterprint`事件的监听函数。\n- `window.onbeforeprint`：`beforeprint`事件的监听函数。\n- `window.onbeforeunload`：`beforeunload`事件的监听函数。\n- `window.onhashchange`：`hashchange`事件的监听函数。\n- `window.onlanguagechange`: `languagechange`的监听函数。\n- `window.onmessage`：`message`事件的监听函数。\n- `window.onmessageerror`：`MessageError`事件的监听函数。\n- `window.onoffline`：`offline`事件的监听函数。\n- `window.ononline`：`online`事件的监听函数。\n- `window.onpagehide`：`pagehide`事件的监听函数。\n- `window.onpageshow`：`pageshow`事件的监听函数。\n- `window.onpopstate`：`popstate`事件的监听函数。\n- `window.onstorage`：`storage`事件的监听函数。\n- `window.onunhandledrejection`：未处理的 Promise 对象的`reject`事件的监听函数。\n- `window.onunload`：`unload`事件的监听函数。\n\n## 多窗口操作\n\n由于网页可以使用`iframe`元素，嵌入其他网页，因此一个网页之中会形成多个窗口。如果子窗口之中又嵌入别的网页，就会形成多级窗口。\n\n### 窗口的引用\n\n各个窗口之中的脚本，可以引用其他窗口。浏览器提供了一些特殊变量，用来返回其他窗口。\n\n- `top`：顶层窗口，即最上层的那个窗口\n- `parent`：父窗口\n- `self`：当前窗口，即自身\n\n下面代码可以判断，当前窗口是否为顶层窗口。\n\n```javascript\nif (window.top === window.self) {\n  // 当前窗口是顶层窗口\n} else {\n  // 当前窗口是子窗口\n}\n```\n\n下面的代码让父窗口的访问历史后退一次。\n\n```javascript\nwindow.parent.history.back();\n```\n\n与这些变量对应，浏览器还提供一些特殊的窗口名，供`window.open()`方法、`<a>`标签、`<form>`标签等引用。\n\n- `_top`：顶层窗口\n- `_parent`：父窗口\n- `_blank`：新窗口\n\n下面代码就表示在顶层窗口打开链接。\n\n```html\n<a href="somepage.html" target="_top">Link</a>\n```\n\n### iframe 元素\n\n对于`iframe`嵌入的窗口，`document.getElementById`方法可以拿到该窗口的 DOM 节点，然后使用`contentWindow`属性获得`iframe`节点包含的`window`对象。\n\n```javascript\nvar frame = document.getElementById(\'theFrame\');\nvar frameWindow = frame.contentWindow;\n```\n\n上面代码中，`frame.contentWindow`可以拿到子窗口的`window`对象。然后，在满足同源限制的情况下，可以读取子窗口内部的属性。\n\n```javascript\n// 获取子窗口的标题\nframeWindow.title\n```\n\n`<iframe>`元素的`contentDocument`属性，可以拿到子窗口的`document`对象。\n\n```javascript\nvar frame = document.getElementById(\'theFrame\');\nvar frameDoc = frame.contentDocument;\n\n// 等同于\nvar frameDoc = frame.contentWindow.document;\n```\n\n`<iframe>`元素遵守同源政策，只有当父窗口与子窗口在同一个域时，两者之间才可以用脚本通信，否则只有使用`window.postMessage`方法。\n\n`<iframe>`窗口内部，使用`window.parent`引用父窗口。如果当前页面没有父窗口，则`window.parent`属性返回自身。因此，可以通过`window.parent`是否等于`window.self`，判断当前窗口是否为`iframe`窗口。\n\n```javascript\nif (window.parent !== window.self) {\n  // 当前窗口是子窗口\n}\n```\n\n`<iframe>`窗口的`window`对象，有一个`frameElement`属性，返回`<iframe>`在父窗口中的 DOM 节点。对于非嵌入的窗口，该属性等于`null`。\n\n```javascript\nvar f1Element = document.getElementById(\'f1\');\nvar f1Window = f1Element.contentWindow;\n\nf1Window.frameElement === f1Element // true\nwindow.frameElement === null // true\n```\n\n### window.frames 属性\n\n`window.frames`属性返回一个类似数组的对象，成员是所有子窗口的`window`对象。可以使用这个属性，实现窗口之间的互相引用。比如，`frames[0]`返回第一个子窗口，`frames[1].frames[2]`返回第二个子窗口内部的第三个子窗口，`parent.frames[1]`返回父窗口的第二个子窗口。\n\n注意，`window.frames`每个成员的值，是框架内的窗口（即框架的`window`对象），而不是`iframe`标签在父窗口的 DOM 节点。如果要获取每个框架内部的 DOM 树，需要使用`window.frames[0].document`的写法。\n\n另外，如果`<iframe>`元素设置了`name`或`id`属性，那么属性值会自动成为全局变量，并且可以通过`window.frames`属性引用，返回子窗口的`window`对象。\n\n```javascript\n// HTML 代码为 <iframe id="myFrame">\nwindow.myFrame // [HTMLIFrameElement]\nframes.myframe === myFrame // true\n```\n\n另外，`name`属性的值会自动成为子窗口的名称，可以用在`window.open`方法的第二个参数，或者`<a>`和`<frame>`标签的`target`属性。', 'title': 'javascript：window 对象', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12499354.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12499354.html', 'postid': '12499354', 'source': {}, 'userid': '-2'}