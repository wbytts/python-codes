{'dateCreated': <DateTime '20200130T23:51:00' at 0x1a4f299a0c8>, 'description': '\n```python\nimport cv2 as cv\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 二值图像就是将灰度图转化成黑白图，没有灰，在一个值之前为黑，之后为白\n# 有全局和局部两种\n# 在使用全局阈值时，我们就是随便给了一个数来做阈值，那我们怎么知道我们选取的这个数的好坏呢？答案就是不停的尝试。\n# 如果是一副双峰图像（简 单来说双峰图像是指图像直方图中存在两个峰）呢？\n# 我们岂不是应该在两个峰之间的峰谷选一个值作为阈值？这就是 Otsu 二值化要做的。\n# 简单来说就是对 一副双峰图像自动根据其直方图计算出一个阈值。\n# （对于非双峰图像，这种方法 得到的结果可能会不理想）。\n\n\ndef threshold_demo(image):\n    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n\n    # 这个函数的第一个参数就是原图像，原图像应该是灰度图。\n    # 第二个参数就是用来对像素值进行分类的阈值。\n    # 第三个参数就是当像素值高于（有时是小于）阈值时应该被赋予的新的像素值\n    # 第四个参数来决定阈值方法，见threshold_simple()\n    # ret, binary = cv.threshold(gray, 127, 255, cv.THRESH_BINARY)\n    ret, binary = cv.threshold(gray, 127, 255, cv.THRESH_BINARY | cv.THRESH_OTSU)\n    print("threshold value: %s"%ret)\n    cv.imshow("threshold_demo", binary)\n\n\ndef threshold_simple(image):\n    img = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    ret, thresh1 = cv.threshold(img, 127, 255, cv.THRESH_BINARY)\n    ret, thresh2 = cv.threshold(img, 127, 255, cv.THRESH_BINARY_INV)\n    ret, thresh3 = cv.threshold(img, 127, 255, cv.THRESH_TRUNC)\n    ret, thresh4 = cv.threshold(img, 127, 255, cv.THRESH_TOZERO)\n    ret, thresh5 = cv.threshold(img, 127, 255, cv.THRESH_TOZERO_INV)\n    titles = [\'Original Image\', \'BINARY\', \'BINARY_INV\', \'TRUNC\', \'TOZERO\', \'TOZERO_INV\']\n    images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]\n\n    for i in range(6):\n        plt.subplot(2, 3, i + 1), plt.imshow(images[i], \'gray\')  # 将图像按2x3铺开\n        plt.title(titles[i])\n        plt.xticks([]), plt.yticks([])\n\n    plt.show()\n\n\n# 在前面的部分我们使用是全局阈值，整幅图像采用同一个数作为阈值。\n# 当时这种方法并不适应与所有情况，尤其是当同一幅图像上的不同部分的具有不同亮度时。\n# 这种情况下我们需要采用自适应阈值。此时的阈值是根据图像上的 每一个小区域计算与其对应的阈值。\n# 因此在同一幅图像上的不同区域采用的是不同的阈值，从而使我们能在亮度不同的情况下得到更好的结果。\n# 这种方法需要我们指定三个参数，返回值只有一个\n# _MEAN_C：阈值取自相邻区域的平均值,_GAUSSIAN_C：阈值取值相邻区域 的加权和，权重为一个高斯窗口。\n# Block Size - 邻域大小（用来计算阈值的区域大小）。\n# C - 这就是是一个常数，阈值就等于的平均值或者加权平均值减去这个常数。\n\ndef threshold_adaptive(image):\n    img = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    # 中值滤波\n    img = cv.medianBlur(img,5)\n\n    ret, th1 = cv.threshold(img, 127, 255, cv.THRESH_BINARY)\n    # 11 为 Block size, 2 为 C 值\n    th2 = cv.adaptiveThreshold(img, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY, 11, 2)\n    th3 = cv.adaptiveThreshold(img,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, 11, 2)\n\n    titles = [\'Original Image\', \'Global Threshold (v = 127)\', \'Adaptive Mean Threshold\', \'Adaptive Gaussian Threshold\']\n    images = [img, th1, th2, th3]\n\n    for i in range(4):\n        plt.subplot(2, 2, i + 1), plt.imshow(images[i], \'gray\')\n        plt.title(titles[i])\n        plt.xticks([]), plt.yticks([])\n\n    plt.show()\n\n\ndef threshold_custom(image):\n    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    h, w = gray.shape[:2]\n    m = np.reshape(gray, [1, w*h])\n    mean = m.sum() / (w*h)  # 求出整个灰度图像的平均值\n    print("mean:", mean)\n    ret, binary = cv.threshold(gray, mean, 255, cv.THRESH_BINARY)\n    cv.imshow("threshold_custom", binary)\n\n\n# 将大图片拆分成小图片后再用自适应局部阈值比较好\ndef big_image_demo(image):\n    print(image.shape)\n    cw = 200\n    ch = 200\n    h, w = image.shape[:2]\n    gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n    cv.imshow("big_image_demo_gray", gray)\n\n    # 将一张图片每隔ch * cw分成一份\n    for row in range(0, h, ch):\n        for col in range(0, w, cw):\n            roi = gray[row:row+ch, col:col+cw]\n            dst = cv.adaptiveThreshold(roi, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C, cv.THRESH_BINARY, 127, 2)\n            gray[row:row + ch, col:col + cw] = dst\n            print(np.std(dst), np.mean(dst))\n\n    cv.imwrite("../images/result_big_image.png", gray)\n\n\ndef main():\n    img = cv.imread("../images/02.jpg")\n    # threshold_demo(img)\n    # threshold_simple(img)\n    # threshold_adaptive(img)\n    # threshold_custom(img)\n    src = cv.imread("../images/big_image.jpg")\n    big_image_demo(src)\n    cv.waitKey(0)  # 等有键输入或者1000ms后自动将窗口消除，0表示只用键输入结束窗口\n    cv.destroyAllWindows()  # 关闭所有窗口\n\n\nif __name__ == \'__main__\':\n    main()\n```', 'title': 'opencv python：图像二值化', 'categories': ['[随笔分类]OpenCV~Python', '[随笔分类]OpenCV'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12244448.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12244448.html', 'postid': '12244448', 'source': {}, 'userid': '-2'}