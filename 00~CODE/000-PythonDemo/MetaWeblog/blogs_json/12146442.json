{'dateCreated': <DateTime '20200103T19:10:00' at 0x1a4f2a07708>, 'description': '# Maven的概念\n\nMaven是基于项目对象模型（POM，Project Object Model）,可以通过描述信息来管理项目的构建，报告和文档的软件管理工具\n\nMaven除了以程序构建能力为特色之外，还提供了高级项目管理工具。\n\n# Maven的安装\n\n1. 官网下载Maven压缩版，解压到任意目录\n2. 配置Maven的环境变量：MAVEN_HOME，及MAVEN安装的根目录\n3. 配置path环境变量，maven下的bin目录路径：`%MAVEN_HOME%\\bin`\n4. 要使用maven要确保jdk已经正确安装\n   * Maven 3.3 要求 JDK 1.7 或以上\n   * Maven 3.2 要求 JDK 1.6 或以上\n   * Maven 3.0/3.1 要求 JDK 1.5 或以上\n\n\n# POM\n\nPOM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。\n\n执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。\n\n在创建 POM 之前，我们首先需要描述项目组 (groupId), 项目的唯一ID。\n```xml\n<project xmlns = "http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation = "http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd">\n \n    <!-- 模型版本 -->\n    <modelVersion>4.0.0</modelVersion>\n    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group -->\n    <groupId>com.companyname.project-group</groupId>\n \n    <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->\n    <artifactId>project</artifactId>\n \n    <!-- 版本号 -->\n    <version>1.0</version>\n</project>\n```\n\n**所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。**\n\n# 父（Super）POM\n\n父（Super）POM是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 包含了一些可以被继承的默认设置。因此，当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的默认仓库 http://repo1.maven.org/maven2 去下载。\n\nMaven 使用 effective pom（Super pom 加上工程自己的配置）来执行相关的目标，它帮助开发者在 pom.xml 中做尽可能少的配置，当然这些配置可以被重写。\n\n使用以下命令来查看 Super POM 默认配置：`mvn help:effective-pom`\n\n创建一个pom文件，在控制台执行以下命令：`mvn help:effective-pom`\n\nMaven 将会开始处理并显示 effective-pom\n\nEffective POM 的结果就像在控制台中显示的一样，经过继承、插值之后，使配置生效。\n\n在上面的 pom.xml 中，你可以看到 Maven 在执行目标时需要用到的默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录。\n\nMaven 的 pom.xml 文件也不需要手工编写。\n\nMaven 提供了大量的原型插件来创建工程，包括工程结构和 pom.xml。\n\n\n# Maven约定的目录配置\n\nMaven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：\n\n- `${basedir}`\t存放pom.xml和所有的子目录\n- `${basedir}/src/main/java`\t项目的java源代码\n- `${basedir}/src/main/resources`\t项目的资源，比如说property文件，springmvc.xml\n- `${basedir}/src/test/java`\t项目的测试类，比如说Junit代码\n- `${basedir}/src/test/resources`\t测试用的资源\n- `${basedir}/src/main/webapp/WEB-INF`\tweb应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面\n- `${basedir}/target`\t打包输出目录\n- `${basedir}/target/classes`\t编译输出目录\n- `${basedir}/target/test-classes`\t测试编译输出目录\n- `Test.java`\tMaven只会自动运行符合该命名规则的测试类\n- `~/.m2/repository`\tMaven默认的本地仓库目录位置\n\n# Maven的特点\n\n项目设置遵循统一的规则。\n\n任意工程中共享。\n\n依赖管理包括自动更新。\n\n一个庞大且不断增长的库。\n\n可扩展，能够轻松编写 Java 或脚本语言的插件。\n\n只需很少或不需要额外配置即可即时访问新功能。\n\n基于模型的构建 − Maven能够将任意数量的项目构建到预定义的输出类型中，如 JAR，WAR 或基于项目元数据的分发，而不需要在大多数情况下执行任何脚本。\n\n项目信息的一致性站点 − 使用与构建过程相同的元数据，Maven 能够生成一个网站或PDF，包括您要添加的任何文档，并添加到关于项目开发状态的标准报告中。\n\n发布管理和发布单独的输出 − Maven 将不需要额外的配置，就可以与源代码管理系统（如 Subversion 或 Git）集成，并可以基于某个标签管理项目的发布。它也可以将其发布到分发位置供其他项目使用。Maven 能够发布单独的输出，如 JAR，包含其他依赖和文档的归档，或者作为源代码发布。\n\n向后兼容性 − 您可以很轻松的从旧版本 Maven 的多个模块移植到 Maven 3 中。\n\n子项目使用父项目依赖时，正常情况子项目应该继承父项目依赖，无需使用版本号，\n\n并行构建 − 编译的速度能普遍提高20 - 50 %。\n\n更好的错误报告 − Maven 改进了错误报告，它为您提供了 Maven wiki 页面的链接，您可以点击链接查看错误的完整描述。', 'title': 'Maven学习笔记：Maven简介', 'categories': ['[随笔分类]Java~Maven'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12146442.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12146442.html', 'postid': '12146442', 'source': {}, 'userid': '-2'}