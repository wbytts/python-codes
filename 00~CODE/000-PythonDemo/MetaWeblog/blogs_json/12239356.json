{'dateCreated': <DateTime '20200128T23:28:00' at 0x1a4f29a6908>, 'description': '# 数组\n\n在程序设计中，为了方便处理数据把具有相同类型的若干变量按有序形式组织起来——称为数组。\n\n数组就是在内存中连续的相同类型的变量空间。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。\n\n![](https://img2018.cnblogs.com/blog/1446249/202001/1446249-20200128231913433-1257788396.png)\n\n数组属于构造数据类型：一个数组可以分解为多个数组元素：这些数组元素可以是基本数据类型或构造类型。\n\n按数组元素类型的不同，数组可分为：数值数组、字符数组、指针数组、结构数组等类别。\n\n通常情况下，数组元素下标的个数也称为维数，根据维数的不同，可将数组分为一维数组、二维数组、三维数组、四维数组等。通常情况下，我们将二维及以上的数组称为多维数组。\n\n# 一维数组\n\n## 定义一维数组\n\n定义数组时`[]`内最好是常量，使用数组时`[]`内即可是常量，也可以是变量\n在定义数组的同时进行赋值，称为初始化。**全局数组若不初始化，编译器将其初始化为零。局部数组若不初始化，内容为随机值。**\n```c\nint a[5]; // 定义一个有5个元素的一位数组\nint a[5] = {1,2,3,4,5}; // 定义数组并初始化\nint a[] = {1,2,3,4,5}; // 如果定义并初始化，可以不给出数组大小，编译器会自动推断\nint a[5] = {1,2,3}; // 如果初始化只给出一部分，则其余部分默认为0\nint a[5] = {0}; // 所有元素初始化为0\n```\n\n# 二维数组\n\n二维数组在概念上是二维的：其下标在两个方向上变化，对其访问一般需要两个下标\n\n在内存中并不存在二维数组，二维数组实际的硬件存储器是连续编址的，也就是说内存中只有一维数组，即放完一行之后顺次放入第二行，和一维数组存放方式是一样的。\n\n## 定义二维数组\n\n`类型说明符 数组名[常量表达式1][常量表达式2]`：其中常量表达式1表示第一维下标的长度，常量表达式2 表示第二维下标的长度。\n\n```c\nint a[3][4]; // 定义一个3行4列的二维数组\nint a[3][4] = {1,2,3,4,5,6,7,8,9,10,11,12}; // 定义并初始化，第一行完了接着第二行\nint a[3][4] = {1,2,3}; // 和一维一样，没有初始化的设置为0\nint a[3][4] = {{1,2,3,4}, {5,6,7,8}, {9,10,11,12}}; // 定义并初始化，详细指定了初始化的行数\nint a[3][4] = {{1,2,3}, {5,6}, {9}}; // 对每一行来说，没有初始化的设置为0\nint a[3][4] = {0}; // 整个二维数组设置为0\n```\n\n# 数组的使用\n\n数组名是一个地址的常量，代表数组中首元素的地址，而数组使用时后面方括号里的数字代表着偏移量\n\n所以数组第一个元素的偏移量为0，第n个元素的偏移量为 n-1\n\n数组使用时要注意不要超过数组的长度，否则会引发 `数组越界` 的问题，在C语言中，这并不会报错，但经常会导致莫名其妙的结果', 'title': 'C：数组基础', 'categories': ['[随笔分类]C/C++~C语言'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12239356.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12239356.html', 'postid': '12239356', 'source': {}, 'userid': '-2'}