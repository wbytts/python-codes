{'dateCreated': <DateTime '20200315T19:18:00' at 0x1a4f25401c8>, 'description': '原文章：https://wangdoc.com/javascript/index.html\n# Location 对象，URL 对象，URLSearchParams 对象\n\nURL 是互联网的基础设施之一。浏览器提供了一些原生对象，用来管理 URL。\n\n## Location 对象\n\n`Location`对象是浏览器提供的原生对象，提供 URL 相关的信息和操作方法。通过`window.location`和`document.location`属性，可以拿到这个对象。\n\n### 属性\n\n`Location`对象提供以下属性。\n\n- `Location.href`：整个 URL。\n- `Location.protocol`：当前 URL 的协议，包括冒号（`:`）。\n- `Location.host`：主机。如果端口不是协议默认的`80`和`433`，则还会包括冒号（`:`）和端口。\n- `Location.hostname`：主机名，不包括端口。\n- `Location.port`：端口号。\n- `Location.pathname`：URL 的路径部分，从根路径`/`开始。\n- `Location.search`：查询字符串部分，从问号`?`开始。\n- `Location.hash`：片段字符串部分，从`#`开始。\n- `Location.username`：域名前面的用户名。\n- `Location.password`：域名前面的密码。\n- `Location.origin`：URL 的协议、主机名和端口。\n\n```javascript\n// 当前网址为\n// http://user:passwd@www.example.com:4097/path/a.html?x=111#part1\ndocument.location.href\n// "http://user:passwd@www.example.com:4097/path/a.html?x=111#part1"\ndocument.location.protocol\n// "http:"\ndocument.location.host\n// "www.example.com:4097"\ndocument.location.hostname\n// "www.example.com"\ndocument.location.port\n// "4097"\ndocument.location.pathname\n// "/path/a.html"\ndocument.location.search\n// "?x=111"\ndocument.location.hash\n// "#part1"\ndocument.location.username\n// "user"\ndocument.location.password\n// "passwd"\ndocument.location.origin\n// "http://user:passwd@www.example.com:4097"\n```\n\n这些属性里面，只有`origin`属性是只读的，其他属性都可写。\n\n注意，如果对`Location.href`写入新的 URL 地址，浏览器会立刻跳转到这个新地址。\n\n```javascript\n// 跳转到新网址\ndocument.location.href = \'http://www.example.com\';\n```\n\n这个特性常常用于让网页自动滚动到新的锚点。\n\n```javascript\ndocument.location.href = \'#top\';\n// 等同于\ndocument.location.hash = \'#top\';\n```\n\n直接改写`location`，相当于写入`href`属性。\n\n```javascript\ndocument.location = \'http://www.example.com\';\n// 等同于\ndocument.location.href = \'http://www.example.com\';\n```\n\n另外，`Location.href`属性是浏览器唯一允许跨域写入的属性，即非同源的窗口可以改写另一个窗口（比如子窗口与父窗口）的`Location.href`属性，导致后者的网址跳转。`Location`的其他属性都不允许跨域写入。\n\n### 方法\n\n**（1）Location.assign()**\n\n`assign`方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。\n\n```javascript\n// 跳转到新的网址\ndocument.location.assign(\'http://www.example.com\')\n```\n\n**（2）Location.replace()**\n\n`replace`方法接受一个 URL 字符串作为参数，使得浏览器立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。\n\n它与`assign`方法的差异在于，`replace`会在浏览器的浏览历史`History`里面删除当前网址，也就是说，一旦使用了该方法，后退按钮就无法回到当前网页了，相当于在浏览历史里面，使用新的 URL 替换了老的 URL。它的一个应用是，当脚本发现当前是移动设备时，就立刻跳转到移动版网页。\n\n```javascript\n// 跳转到新的网址\ndocument.location.replace(\'http://www.example.com\')\n```\n\n**（3）Location.reload()**\n\n`reload`方法使得浏览器重新加载当前网址，相当于按下浏览器的刷新按钮。\n\n它接受一个布尔值作为参数。如果参数为`true`，浏览器将向服务器重新请求这个网页，并且重新加载后，网页将滚动到头部（即`scrollTop === 0`）。如果参数是`false`或为空，浏览器将从本地缓存重新加载该网页，并且重新加载后，网页的视口位置是重新加载前的位置。\n\n```javascript\n// 向服务器重新请求当前网址\nwindow.location.reload(true);\n```\n\n**（4）Location.toString()**\n\n`toString`方法返回整个 URL 字符串，相当于读取`Location.href`属性。\n\n## URL 的编码和解码\n\n网页的 URL 只能包含合法的字符。合法字符分成两类。\n\n- URL 元字符：分号（`;`），逗号（`,`），斜杠（`/`），问号（`?`），冒号（`:`），at（`@`），`&`，等号（`=`），加号（`+`），美元符号（`$`），井号（`#`）\n- 语义字符：`a-z`，`A-Z`，`0-9`，连词号（`-`），下划线（`_`），点（`.`），感叹号（`!`），波浪线（`~`），星号（`*`），单引号（`\'`），圆括号（`()`）\n\n除了以上字符，其他字符出现在 URL 之中都必须转义，规则是根据操作系统的默认编码，将每个字节转为百分号（`%`）加上两个大写的十六进制字母。\n\n比如，UTF-8 的操作系统上，`http://www.example.com/q=春节`这个 URL 之中，汉字“春节”不是 URL 的合法字符，所以被浏览器自动转成`http://www.example.com/q=%E6%98%A5%E8%8A%82`。其中，“春”转成了`%E6%98%A5`，“节”转成了`%E8%8A%82`。这是因为“春”和“节”的 UTF-8 编码分别是`E6 98 A5`和`E8 8A 82`，将每个字节前面加上百分号，就构成了 URL 编码。\n\nJavaScript 提供四个 URL 的编码/解码方法。\n\n- `encodeURI()`\n- `encodeURIComponent()`\n- `decodeURI()`\n- `decodeURIComponent()`\n\n### encodeURI()\n\n`encodeURI()`方法用于转码整个 URL。它的参数是一个字符串，代表整个 URL。它会将元字符和语义字符之外的字符，都进行转义。\n\n```javascript\nencodeURI(\'http://www.example.com/q=春节\')\n// "http://www.example.com/q=%E6%98%A5%E8%8A%82"\n```\n\n### encodeURIComponent()\n\n`encodeURIComponent()`方法用于转码 URL 的组成部分，会转码除了语义字符之外的所有字符，即元字符也会被转码。所以，它不能用于转码整个 URL。它接受一个参数，就是 URL 的片段。\n\n```javascript\nencodeURIComponent(\'春节\')\n// "%E6%98%A5%E8%8A%82"\nencodeURIComponent(\'http://www.example.com/q=春节\')\n// "http%3A%2F%2Fwww.example.com%2Fq%3D%E6%98%A5%E8%8A%82"\n```\n\n上面代码中，`encodeURIComponent()`会连 URL 元字符一起转义，所以如果转码整个 URL 就会出错。\n\n### decodeURI()\n\n`decodeURI()`方法用于整个 URL 的解码。它是`encodeURI()`方法的逆运算。它接受一个参数，就是转码后的 URL。\n\n```javascript\ndecodeURI(\'http://www.example.com/q=%E6%98%A5%E8%8A%82\')\n// "http://www.example.com/q=春节"\n```\n\n### decodeURIComponent()\n\n`decodeURIComponent()`用于URL 片段的解码。它是`encodeURIComponent()`方法的逆运算。它接受一个参数，就是转码后的 URL 片段。\n\n```javascript\ndecodeURIComponent(\'%E6%98%A5%E8%8A%82\')\n// "春节"\n```\n\n## URL 接口\n\n`URL`接口是一个构造函数，浏览器原生提供，可以用来构造、解析和编码 URL。一般情况下，通过`window.URL`可以拿到这个构造函数。\n\n### 构造函数\n\n`URL`作为构造函数，可以生成 URL 实例。它接受一个表示 URL 的字符串作为参数。如果参数不是合法的 URL，会报错。\n\n```javascript\nvar url = new URL(\'http://www.example.com/index.html\');\nurl.href\n// "http://www.example.com/index.html"\n```\n\n如果参数是另一个 URL 实例，构造函数会自动读取该实例的`href`属性，作为实际参数。\n\n如果 URL 字符串是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准。\n\n```javascript\nvar url1 = new URL(\'index.html\', \'http://example.com\');\nurl1.href\n// "http://example.com/index.html"\n\nvar url2 = new URL(\'page2.html\', \'http://example.com/page1.html\');\nurl2.href\n// "http://example.com/page2.html"\n\nvar url3 = new URL(\'..\', \'http://example.com/a/b.html\')\nurl3.href\n// "http://example.com/"\n```\n\n上面代码中，返回的 URL 实例的路径都是在第二个参数的基础上，切换到第一个参数得到的。最后一个例子里面，第一个参数是`..`，表示上层路径。\n\n### 实例属性\n\nURL 实例的属性与`Location`对象的属性基本一致，返回当前 URL 的信息。\n\n- URL.href：返回整个 URL\n- URL.protocol：返回协议，以冒号`:`结尾\n- URL.hostname：返回域名\n- URL.host：返回域名与端口，包含`:`号，默认的80和443端口会省略\n- URL.port：返回端口\n- URL.origin：返回协议、域名和端口\n- URL.pathname：返回路径，以斜杠`/`开头\n- URL.search：返回查询字符串，以问号`?`开头\n- URL.searchParams：返回一个`URLSearchParams`实例，该属性是`Location`对象没有的\n- URL.hash：返回片段识别符，以井号`#`开头\n- URL.password：返回域名前面的密码\n- URL.username：返回域名前面的用户名\n\n```javascript\nvar url = new URL(\'http://user:passwd@www.example.com:4097/path/a.html?x=111#part1\');\n\nurl.href\n// "http://user:passwd@www.example.com:4097/path/a.html?x=111#part1"\nurl.protocol\n// "http:"\nurl.hostname\n// "www.example.com"\nurl.host\n// "www.example.com:4097"\nurl.port\n// "4097"\nurl.origin\n// "http://www.example.com:4097"\nurl.pathname\n// "/path/a.html"\nurl.search\n// "?x=111"\nurl.searchParams\n// URLSearchParams {}\nurl.hash\n// "#part1"\nurl.password\n// "passwd"\nurl.username\n// "user"\n```\n\n这些属性里面，只有`origin`属性是只读的，其他属性都可写。\n\n```javascript\nvar url = new URL(\'http://example.com/index.html#part1\');\n\nurl.pathname = \'index2.html\';\nurl.href // "http://example.com/index2.html#part1"\n\nurl.hash = \'#part2\';\nurl.href // "http://example.com/index2.html#part2"\n```\n\n上面代码中，改变 URL 实例的`pathname`属性和`hash`属性，都会实时反映在 URL 实例当中。\n\n### 静态方法\n\n**（1）URL.createObjectURL()**\n\n`URL.createObjectURL()`方法用来为上传/下载的文件、流媒体文件生成一个 URL 字符串。这个字符串代表了`File`对象或`Blob`对象的 URL。\n\n```javascript\n// HTML 代码如下\n// <div id="display"/>\n// <input\n//   type="file"\n//   id="fileElem"\n//   multiple\n//   accept="image/*"\n//   onchange="handleFiles(this.files)"\n//  >\nvar div = document.getElementById(\'display\');\n\nfunction handleFiles(files) {\n  for (var i = 0; i < files.length; i++) {\n    var img = document.createElement(\'img\');\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n  }\n}\n```\n\n上面代码中，`URL.createObjectURL()`方法用来为上传的文件生成一个 URL 字符串，作为`<img>`元素的图片来源。\n\n该方法生成的 URL 就像下面的样子。\n\n```javascript\nblob:http://localhost/c745ef73-ece9-46da-8f66-ebes574789b1\n```\n\n注意，每次使用`URL.createObjectURL()`方法，都会在内存里面生成一个 URL 实例。如果不再需要该方法生成的 URL 字符串，为了节省内存，可以使用`URL.revokeObjectURL()`方法释放这个实例。\n\n**（2）URL.revokeObjectURL()**\n\n`URL.revokeObjectURL()`方法用来释放`URL.createObjectURL()`方法生成的 URL 实例。它的参数就是`URL.createObjectURL()`方法返回的 URL 字符串。\n\n下面为上一段的示例加上`URL.revokeObjectURL()`。\n\n```javascript\nvar div = document.getElementById(\'display\');\n\nfunction handleFiles(files) {\n  for (var i = 0; i < files.length; i++) {\n    var img = document.createElement(\'img\');\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n    img.onload = function() {\n      window.URL.revokeObjectURL(this.src);\n    }\n  }\n}\n```\n\n上面代码中，一旦图片加载成功以后，为本地文件生成的 URL 字符串就没用了，于是可以在`img.onload`回调函数里面，通过`URL.revokeObjectURL()`方法卸载这个 URL 实例。\n\n## URLSearchParams 对象\n\n### 概述\n\n`URLSearchParams`对象是浏览器的原生对象，用来构造、解析和处理 URL 的查询字符串（即 URL 问号后面的部分）。\n\n它本身也是一个构造函数，可以生成实例。参数可以为查询字符串，起首的问号`?`有没有都行，也可以是对应查询字符串的数组或对象。\n\n```javascript\n// 方法一：传入字符串\nvar params = new URLSearchParams(\'?foo=1&bar=2\');\n// 等同于\nvar params = new URLSearchParams(document.location.search);\n\n// 方法二：传入数组\nvar params = new URLSearchParams([[\'foo\', 1], [\'bar\', 2]]);\n\n// 方法三：传入对象\nvar params = new URLSearchParams({\'foo\' : 1 , \'bar\' : 2});\n```\n\n`URLSearchParams`会对查询字符串自动编码。\n\n```javascript\nvar params = new URLSearchParams({\'foo\': \'你好\'});\nparams.toString() // "foo=%E4%BD%A0%E5%A5%BD"\n```\n\n上面代码中，`foo`的值是汉字，`URLSearchParams`对其自动进行 URL 编码。\n\n浏览器向服务器发送表单数据时，可以直接使用`URLSearchParams`实例作为表单数据。\n\n```javascript\nconst params = new URLSearchParams({foo: 1, bar: 2});\nfetch(\'https://example.com/api\', {\n  method: \'POST\',\n  body: params\n}).then(...)\n```\n\n上面代码中，`fetch`命令向服务器发送命令时，可以直接使用`URLSearchParams`实例。\n\n`URLSearchParams`可以与`URL`接口结合使用。\n\n```javascript\nvar url = new URL(window.location);\nvar foo = url.searchParams.get(\'foo\') || \'somedefault\';\n```\n\n上面代码中，URL 实例的`searchParams`属性就是一个`URLSearchParams`实例，所以可以使用`URLSearchParams`接口的`get`方法。\n\n`URLSearchParams`实例有遍历器接口，可以用`for...of`循环遍历（详见《ES6 标准入门》的《Iterator》一章）。\n\n```javascript\nvar params = new URLSearchParams({\'foo\': 1 , \'bar\': 2});\n\nfor (var p of params) {\n  console.log(p[0] + \': \' + p[1]);\n}\n// foo: 1\n// bar: 2\n```\n\n`URLSearchParams`没有实例属性，只有实例方法。\n\n### URLSearchParams.toString()\n\n`toString`方法返回实例的字符串形式。\n\n```javascript\nvar url = new URL(\'https://example.com?foo=1&bar=2\');\nvar params = new URLSearchParams(url.search);\n\nparams.toString() // "foo=1&bar=2\'\n```\n\n那么需要字符串的场合，会自动调用`toString`方法。\n\n```javascript\nvar params = new URLSearchParams({version: 2.0});\nwindow.location.href = location.pathname + \'?\' + params;\n```\n\n上面代码中，`location.href`赋值时，可以直接使用`params`对象。这时就会自动调用`toString`方法。\n\n### URLSearchParams.append()\n\n`append()`方法用来追加一个查询参数。它接受两个参数，第一个为键名，第二个为键值，没有返回值。\n\n```javascript\nvar params = new URLSearchParams({\'foo\': 1 , \'bar\': 2});\nparams.append(\'baz\', 3);\nparams.toString() // "foo=1&bar=2&baz=3"\n```\n\n`append()`方法不会识别是否键名已经存在。\n\n```javascript\nvar params = new URLSearchParams({\'foo\': 1 , \'bar\': 2});\nparams.append(\'foo\', 3);\nparams.toString() // "foo=1&bar=2&foo=3"\n```\n\n上面代码中，查询字符串里面`foo`已经存在了，但是`append`依然会追加一个同名键。\n\n### URLSearchParams.delete()\n\n`delete()`方法用来删除指定的查询参数。它接受键名作为参数。\n\n```javascript\nvar params = new URLSearchParams({\'foo\': 1 , \'bar\': 2});\nparams.delete(\'bar\');\nparams.toString() // "foo=1"\n```\n\n### URLSearchParams.has()\n\n`has()`方法返回一个布尔值，表示查询字符串是否包含指定的键名。\n\n```javascript\nvar params = new URLSearchParams({\'foo\': 1 , \'bar\': 2});\nparams.has(\'bar\') // true\nparams.has(\'baz\') // false\n```\n\n### URLSearchParams.set()\n\n`set()`方法用来设置查询字符串的键值。\n\n它接受两个参数，第一个是键名，第二个是键值。如果是已经存在的键，键值会被改写，否则会被追加。\n\n```javascript\nvar params = new URLSearchParams(\'?foo=1\');\nparams.set(\'foo\', 2);\nparams.toString() // "foo=2"\nparams.set(\'bar\', 3);\nparams.toString() // "foo=2&bar=3"\n```\n\n上面代码中，`foo`是已经存在的键，`bar`是还不存在的键。\n\n如果有多个的同名键，`set`会移除现存所有的键。\n\n```javascript\nvar params = new URLSearchParams(\'?foo=1&foo=2\');\nparams.set(\'foo\', 3);\nparams.toString() // "foo=3"\n```\n\n下面是一个替换当前 URL 的例子。\n\n```javascript\n// URL: https://example.com?version=1.0\nvar params = new URLSearchParams(location.search.slice(1));\nparams.set(\'version\', 2.0);\n\nwindow.history.replaceState({}, \'\', location.pathname + `?` + params);\n// URL: https://example.com?version=2.0\n```\n\n### URLSearchParams.get()，URLSearchParams.getAll()\n\n`get()`方法用来读取查询字符串里面的指定键。它接受键名作为参数。\n\n```javascript\nvar params = new URLSearchParams(\'?foo=1\');\nparams.get(\'foo\') // "1"\nparams.get(\'bar\') // null\n```\n\n两个地方需要注意。第一，它返回的是字符串，如果原始值是数值，需要转一下类型；第二，如果指定的键名不存在，返回值是`null`。\n\n如果有多个的同名键，`get`返回位置最前面的那个键值。\n\n```javascript\nvar params = new URLSearchParams(\'?foo=3&foo=2&foo=1\');\nparams.get(\'foo\') // "3"\n```\n\n上面代码中，查询字符串有三个`foo`键，`get`方法返回最前面的键值`3`。\n\n`getAll()`方法返回一个数组，成员是指定键的所有键值。它接受键名作为参数。\n\n```javascript\nvar params = new URLSearchParams(\'?foo=1&foo=2\');\nparams.getAll(\'foo\') // ["1", "2"]\n```\n\n上面代码中，查询字符串有两个`foo`键，`getAll`返回的数组就有两个成员。\n\n### URLSearchParams.sort()\n\n`sort()`方法对查询字符串里面的键进行排序，规则是按照 Unicode 码点从小到大排列。\n\n该方法没有返回值，或者说返回值是`undefined`。\n\n```javascript\nvar params = new URLSearchParams(\'c=4&a=2&b=3&a=1\');\nparams.sort();\nparams.toString() // "a=2&a=1&b=3&c=4"\n```\n\n上面代码中，如果有两个同名的键`a`，它们之间不会排序，而是保留原始的顺序。\n\n### URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries()\n\n这三个方法都返回一个遍历器对象，供`for...of`循环遍历。它们的区别在于，`keys`方法返回的是键名的遍历器，`values`方法返回的是键值的遍历器，`entries`返回的是键值对的遍历器。\n\n```javascript\nvar params = new URLSearchParams(\'a=1&b=2\');\n\nfor(var p of params.keys()) {\n  console.log(p);\n}\n// a\n// b\n\nfor(var p of params.values()) {\n  console.log(p);\n}\n// 1\n// 2\n\nfor(var p of params.entries()) {\n  console.log(p);\n}\n// ["a", "1"]\n// ["b", "2"]\n```\n\n如果直接对`URLSearchParams`进行遍历，其实内部调用的就是`entries`接口。\n\n```javascript\nfor (var p of params) {}\n// 等同于\nfor (var p of params.entries()) {}\n```\n\n## 参考链接\n\n- [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location), by MDN\n- [URL](https://developer.mozilla.org/en-US/docs/Web/API/URL), by MDN\n- [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams), by MDN\n- [Easy URL Manipulation with URLSearchParams](https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en), by Eric Bidelman', 'title': 'javascript：Location 对象，URL 对象，URLSearchParams 对象', 'categories': ['[随笔分类]FrontEnd~JavaScript'], 'enclosure': {'length': 0}, 'link': 'https://www.cnblogs.com/wbyixx/p/12499464.html', 'permalink': 'https://www.cnblogs.com/wbyixx/p/12499464.html', 'postid': '12499464', 'source': {}, 'userid': '-2'}